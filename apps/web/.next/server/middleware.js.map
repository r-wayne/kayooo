{"version":3,"file":"middleware.js","mappings":"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EACA1D,EAAAuD,UAAA,CAAAG,EAAAD,EACA,EACA,EAUAzD,EAAAkE,iBAAA,UAAAV,CAAA,CAAAC,CAAA,EACAzD,EAAA2D,UAAA,CAAAH,EAAA,SAAAE,CAAA,EACA1D,EAAAgE,WAAA,CAAAN,EAAAD,EACA,EACA,EAOAzD,EAAAmE,kBAAA,UAAAT,CAAA,EACA,mCACA,EAQA1D,EAAAoE,aAAA,UAAAZ,CAAA,EAEA,IADA,IAAAE,EAAAW,EAAA,EACA,OAAAX,CAAAA,EAAAF,GAAA,GACAa,GAAArE,EAAAmE,kBAAA,CAAAT,GACA,OAAAW,CACA,EAQArE,EAAAsE,oBAAA,UAAAd,CAAA,EACA,IAAAe,EAAA,EAAAF,EAAA,EAIA,OAHArE,EAAA+D,WAAA,CAAAP,EAAA,SAAAE,CAAA,EACA,EAAAa,EAAqBF,GAAArE,EAAAmE,kBAAA,CAAAT,EACrB,GACA,CAAAa,EAAAF,EAAA,EAGArE,EAGAhJ,CAAAA,KAAA1C,GAAA,CAAA0C,KAAA1C,GAAA,aAAwC,WAAA0C,IAAA,EAOxC,IAAAuK,EAAA,GAOAH,EAAA,GAqBAoD,EAAA,CACA,mDACA,oDACA,sDACA,iCACA,CAOAC,EAAA,CACA,sDACA,sDACA,sDACA,sDACA,sDACA,sDACA,uDACA,uDACA,qDACA,sDACA,uDACA,qDACA,uDACA,sDACA,qDACA,sDACA,uDACA,qDACA,uDACA,sDACA,oDACA,sDACA,sDACA,oDACA,qDACA,uDACA,sDACA,sDACA,uDACA,qDACA,sDACA,sDACA,sDACA,sDACA,uDACA,qDACA,uDACA,uDACA,uDACA,sDACA,sDACA,sDACA,sDACA,uDACA,iDACA,uDACA,mDACA,sDACA,qDACA,sDACA,sDACA,uDACA,qDACA,sDACA,uDACA,uDACA,oDACA,uDACA,uDACA,qDACA,sDACA,oDACA,sDACA,qDACA,sDACA,sDACA,sDACA,uDACA,uDACA,mDACA,qDACA,qDACA,sDACA,uDACA,qDACA,sDACA,oDACA,uDACA,qDACA,sDACA,oDACA,qDACA,uDACA,sDACA,sDACA,uDACA,oDACA,qDACA,uDACA,sDACA,sDACA,uDACA,uDACA,uDACA,qDACA,mDACA,sDACA,sDACA,uDACA,sDACA,sDACA,sDACA,uDACA,uDACA,qDACA,sDACA,qDACA,sDACA,qDACA,sDACA,uDACA,qDACA,oDACA,uDACA,sDACA,uDACA,uDACA,mDACA,sDACA,sDACA,oDACA,oDACA,sDACA,sDACA,sDACA,sDACA,sDACA,uDACA,uDACA,sDACA,sDACA,sDACA,qDACA,sDACA,uDACA,uDACA,uDACA,uDACA,uDACA,uDACA,sDACA,sDACA,sDACA,mDACA,uDACA,sDACA,oDACA,oDACA,uDACA,sDACA,qDACA,sDACA,sDACA,sDACA,uDACA,uDACA,sDACA,uDACA,sDACA,uDACA,uDACA,sDACA,uDACA,sDACA,oDACA,oDACA,uDACA,sDACA,sDACA,mDACA,qDACA,oDACA,sDACA,qDACA,uDACA,sDACA,sDACA,qDACA,uDACA,uDACA,uDACA,mDACA,mDACA,qDACA,sDACA,sDACA,qDACA,sDACA,qDACA,sDACA,qDACA,sDACA,sDACA,qDACA,sDACA,uDACA,uDACA,sDACA,uDACA,sDACA,oDACA,sDACA,kDACA,uDACA,2CACA,CAOAC,EAAA,CACA,uDACA,WACA,CAUA,SAAAC,EAAAC,CAAA,CAAA5B,CAAA,CAAA6B,CAAA,CAAAC,CAAA,EACA,IACAT,EAAAO,CAAA,CAAA5B,EAAA,CACA+B,EAAAH,CAAA,CAAA5B,EAAA,GAgHA,OA9GAqB,GAAAQ,CAAA,IAwBAE,GAAAR,CAJAO,CAAA,CAAAT,IAAA,IACAS,CAAA,gBACAA,CAAA,gBACAA,CAAA,KAAAT,IAAAA,EAAA,CACAQ,CAAA,IAKAR,GAAAE,CAJAO,CAAA,CAAAC,IAAA,IACAD,CAAA,gBACAA,CAAA,gBACAA,CAAA,KAAAC,IAAAA,EAAA,CACAF,CAAA,IAMAE,GAAAR,CAJAO,CAAA,CAAAT,IAAA,IACAS,CAAA,gBACAA,CAAA,gBACAA,CAAA,KAAAT,IAAAA,EAAA,CACAQ,CAAA,IAKAR,GAAAE,CAJAO,CAAA,CAAAC,IAAA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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/external commonjs \"node:events\"","webpack://_N_E/external commonjs \"node:util\"","webpack://_N_E/external root \" globalThis.__import_unsupported('child_process')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('crypto')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('dns')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('fs')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('fs/promises')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('http')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('net')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('os')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('stream')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('timers')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('timers/promises')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('tls')\"","webpack://_N_E/external root \" globalThis.__import_unsupported('zlib')\"","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/globals.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/error.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/lib/constants.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/utils.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js","webpack://_N_E/../../../src/shared/lib/i18n/detect-domain-locale.ts","webpack://_N_E/../../../src/shared/lib/router/utils/remove-trailing-slash.ts","webpack://_N_E/../../../src/shared/lib/router/utils/parse-path.ts","webpack://_N_E/../../../src/shared/lib/router/utils/add-path-prefix.ts","webpack://_N_E/../../../src/shared/lib/router/utils/add-path-suffix.ts","webpack://_N_E/../../../src/shared/lib/router/utils/path-has-prefix.ts","webpack://_N_E/../../../src/shared/lib/router/utils/add-locale.ts","webpack://_N_E/../../../src/shared/lib/router/utils/format-next-pathname-info.ts","webpack://_N_E/../../../src/shared/lib/get-hostname.ts","webpack://_N_E/../../../src/shared/lib/i18n/normalize-locale-path.ts","webpack://_N_E/../../../src/shared/lib/router/utils/remove-path-prefix.ts","webpack://_N_E/../../../src/shared/lib/router/utils/get-next-pathname-info.ts","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/next-url.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/spec-extension/cookies.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/spec-extension/request.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/spec-extension/adapters/reflect.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/spec-extension/response.js","webpack://_N_E/../../../src/shared/lib/router/utils/relativize-url.ts","webpack://_N_E/../../../src/client/components/app-router-headers.ts","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/internal-utils.js","webpack://_N_E/../../../src/shared/lib/router/utils/app-paths.ts","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/spec-extension/adapters/headers.js","webpack://_N_E/../../../src/client/components/async-local-storage.ts","webpack://_N_E/../../../src/client/components/static-generation-async-storage-instance.ts","webpack://_N_E/../../../src/client/components/static-generation-async-storage.external.ts","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/lib/trace/constants.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/lib/trace/tracer.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/api-utils/index.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/async-storage/draft-mode-provider.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/async-storage/request-async-storage-wrapper.js","webpack://_N_E/../../../src/client/components/request-async-storage-instance.ts","webpack://_N_E/../../../src/client/components/request-async-storage.external.ts","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/get-edge-preview-props.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/adapter.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/spec-extension/user-agent.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/spec-extension/url-pattern.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/server/web/exports/index.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/esm/api/server.js","webpack://_N_E/../../packages/db/lib/mongodb.ts","webpack://_N_E/./lib/services/auth.ts","webpack://_N_E/./middleware.ts","webpack://_N_E/","webpack://_N_E/../../node_modules/.pnpm/@mongodb-js+saslprep@1.3.0/node_modules/@mongodb-js/saslprep/dist/browser.js","webpack://_N_E/../../node_modules/.pnpm/@mongodb-js+saslprep@1.3.0/node_modules/@mongodb-js/saslprep/dist/code-points-data-browser.js","webpack://_N_E/../../node_modules/.pnpm/@mongodb-js+saslprep@1.3.0/node_modules/@mongodb-js/saslprep/dist/index.js","webpack://_N_E/../../node_modules/.pnpm/@mongodb-js+saslprep@1.3.0/node_modules/@mongodb-js/saslprep/dist/memory-code-points.js","webpack://_N_E/../../node_modules/.pnpm/bcryptjs@2.4.3/node_modules/bcryptjs/dist/bcrypt.js","webpack://_N_E/../../node_modules/.pnpm/buffer-equal-constant-time@1.0.1/node_modules/buffer-equal-constant-time/index.js","webpack://_N_E/../../node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js","webpack://_N_E/../../node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/decode.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/index.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/JsonWebTokenError.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/NotBeforeError.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/TokenExpiredError.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/psSupported.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/timespan.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/sign.js","webpack://_N_E/../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/verify.js","webpack://_N_E/../../node_modules/.pnpm/jwa@1.4.2/node_modules/jwa/index.js","webpack://_N_E/../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/index.js","webpack://_N_E/../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/data-stream.js","webpack://_N_E/../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/sign-stream.js","webpack://_N_E/../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/tostring.js","webpack://_N_E/../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/verify-stream.js","webpack://_N_E/../../node_modules/.pnpm/lodash.includes@4.3.0/node_modules/lodash.includes/index.js","webpack://_N_E/../../node_modules/.pnpm/lodash.isboolean@3.0.3/node_modules/lodash.isboolean/index.js","webpack://_N_E/../../node_modules/.pnpm/lodash.isinteger@4.0.4/node_modules/lodash.isinteger/index.js","webpack://_N_E/../../node_modules/.pnpm/lodash.isnumber@3.0.3/node_modules/lodash.isnumber/index.js","webpack://_N_E/../../node_modules/.pnpm/lodash.isplainobject@4.0.6/node_modules/lodash.isplainobject/index.js","webpack://_N_E/../../node_modules/.pnpm/lodash.isstring@4.0.1/node_modules/lodash.isstring/index.js","webpack://_N_E/../../node_modules/.pnpm/lodash.once@4.1.1/node_modules/lodash.once/index.js","webpack://_N_E/../../node_modules/.pnpm/memory-pager@1.5.0/node_modules/memory-pager/index.js","webpack://_N_E/../../node_modules/.pnpm/mongodb-connection-string-url@3.0.2/node_modules/mongodb-connection-string-url/lib/index.js","webpack://_N_E/../../node_modules/.pnpm/mongodb-connection-string-url@3.0.2/node_modules/mongodb-connection-string-url/lib/redact.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/admin.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/beta.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/bson.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/bulk/common.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/bulk/ordered.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/bulk/unordered.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/change_stream.js","webpack://_N_E/../../src/client-side-encryption/auto_encrypter.ts","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/client-side-encryption/client_encryption.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/client-side-encryption/errors.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/client-side-encryption/providers/aws.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/client-side-encryption/providers/azure.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/client-side-encryption/providers/gcp.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/client-side-encryption/providers/index.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/client-side-encryption/state_machine.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/auth_provider.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/aws_temporary_credentials.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/gssapi.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/automated_callback_workflow.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_machine_workflow.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/command_builders.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/gcp_machine_workflow.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/human_callback_workflow.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/k8s_machine_workflow.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_cache.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_machine_workflow.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/plain.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/providers.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/scram.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/auth/x509.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/command_monitoring_events.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/commands.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/connect.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/connection.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/connection_pool.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/connection_pool_events.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/errors.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/handshake/client_metadata.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/metrics.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/stream_description.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/wire_protocol/compression.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/wire_protocol/constants.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/wire_protocol/on_data.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/wire_protocol/on_demand/document.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/wire_protocol/responses.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cmap/wire_protocol/shared.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/collection.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/connection_string.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/constants.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cursor/abstract_cursor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cursor/aggregation_cursor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cursor/change_stream_cursor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cursor/client_bulk_write_cursor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cursor/find_cursor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cursor/list_collections_cursor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cursor/list_indexes_cursor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/cursor/run_command_cursor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/db.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/deps.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/encrypter.js","webpack://_N_E/../src/error.ts","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/explain.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/gridfs/download.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/gridfs/index.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/gridfs/upload.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/index.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/mongo_client.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/mongo_client_auth_providers.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/mongo_logger.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/mongo_types.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/aggregate.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/bulk_write.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/client_bulk_write/command_builder.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/client_bulk_write/executor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/client_bulk_write/results_merger.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/collections.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/command.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/count.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/create_collection.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/delete.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/distinct.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/drop.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/estimated_document_count.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/execute_operation.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/find.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/find_and_modify.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/get_more.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/indexes.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/insert.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/is_capped.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/kill_cursors.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/list_collections.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/list_databases.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/operation.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/options_operation.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/profiling_level.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/remove_user.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/rename.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/run_command.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/search_indexes/create.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/search_indexes/drop.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/search_indexes/update.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/set_profiling_level.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/stats.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/update.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/operations/validate_collection.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/read_concern.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/read_preference.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/resource_management.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/common.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/events.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/monitor.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/server.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/server_description.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/server_selection.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/server_selection_events.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/srv_polling.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/topology.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sdam/topology_description.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sessions.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/sort.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/timeout.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/transactions.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/utils.js","webpack://_N_E/../../node_modules/.pnpm/mongodb@6.18.0/node_modules/mongodb/lib/write_concern.js","webpack://_N_E/../../node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/@edge-runtime/cookies/index.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/@opentelemetry/api/index.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/cookie/index.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/native-url/index.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/process/browser.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/querystring-es3/index.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/ua-parser-js/ua-parser.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/experimental/testmode/context.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/experimental/testmode/fetch.js","webpack://_N_E/../../node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/experimental/testmode/server-edge.js","webpack://_N_E/../../node_modules/.pnpm/punycode@2.3.1/node_modules/punycode/punycode.es6.js","webpack://_N_E/../../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/classes/comparator.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/classes/range.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/classes/semver.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/clean.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/cmp.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/coerce.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/compare-build.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/compare-loose.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/compare.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/diff.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/eq.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/gt.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/gte.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/inc.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/lt.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/lte.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/major.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/minor.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/neq.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/parse.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/patch.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/prerelease.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/rcompare.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/rsort.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/satisfies.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/sort.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/valid.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/index.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/constants.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/debug.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/identifiers.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/lrucache.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/parse-options.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/re.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/gtr.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/intersects.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/ltr.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/max-satisfying.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/min-satisfying.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/min-version.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/outside.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/simplify.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/subset.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/to-comparators.js","webpack://_N_E/../../node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/valid.js","webpack://_N_E/../../node_modules/.pnpm/sparse-bitfield@3.0.3/node_modules/sparse-bitfield/index.js","webpack://_N_E/../../node_modules/.pnpm/tr46@5.1.1/node_modules/tr46/index.js","webpack://_N_E/../../node_modules/.pnpm/tr46@5.1.1/node_modules/tr46/lib/regexes.js","webpack://_N_E/../../node_modules/.pnpm/tr46@5.1.1/node_modules/tr46/lib/statusMapping.js","webpack://_N_E/../../node_modules/.pnpm/webidl-conversions@7.0.0/node_modules/webidl-conversions/lib/index.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/index.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/Function.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/URL-impl.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/URL.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/URLSearchParams-impl.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/URLSearchParams.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/encoding.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/infra.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/percent-encoding.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/url-state-machine.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/urlencoded.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/lib/utils.js","webpack://_N_E/../../node_modules/.pnpm/whatwg-url@14.2.0/node_modules/whatwg-url/webidl2js-wrapper.js","webpack://_N_E/../../node_modules/.pnpm/bson@6.10.4/node_modules/bson/lib/bson.mjs"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","module.exports = require(\"node:events\");","module.exports = require(\"node:util\");","module.exports =  globalThis.__import_unsupported('child_process');","module.exports =  globalThis.__import_unsupported('crypto');","module.exports =  globalThis.__import_unsupported('dns');","module.exports =  globalThis.__import_unsupported('fs');","module.exports =  globalThis.__import_unsupported('fs/promises');","module.exports =  globalThis.__import_unsupported('http');","module.exports =  globalThis.__import_unsupported('net');","module.exports =  globalThis.__import_unsupported('os');","module.exports =  globalThis.__import_unsupported('stream');","module.exports =  globalThis.__import_unsupported('timers');","module.exports =  globalThis.__import_unsupported('timers/promises');","module.exports =  globalThis.__import_unsupported('tls');","module.exports =  globalThis.__import_unsupported('zlib');","async function registerInstrumentation() {\n    const register = \"_ENTRIES\" in globalThis && _ENTRIES.middleware_instrumentation && (await _ENTRIES.middleware_instrumentation).register;\n    if (register) {\n        try {\n            await register();\n        } catch (err) {\n            err.message = `An error occurred while loading instrumentation hook: ${err.message}`;\n            throw err;\n        }\n    }\n}\nlet registerInstrumentationPromise = null;\nexport function ensureInstrumentationRegistered() {\n    if (!registerInstrumentationPromise) {\n        registerInstrumentationPromise = registerInstrumentation();\n    }\n    return registerInstrumentationPromise;\n}\nfunction getUnsupportedModuleErrorMessage(module) {\n    // warning: if you change these messages, you must adjust how react-dev-overlay's middleware detects modules not found\n    return `The edge runtime does not support Node.js '${module}' module.\nLearn More: https://nextjs.org/docs/messages/node-module-in-edge-runtime`;\n}\nfunction __import_unsupported(moduleName) {\n    const proxy = new Proxy(function() {}, {\n        get (_obj, prop) {\n            if (prop === \"then\") {\n                return {};\n            }\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        },\n        construct () {\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        },\n        apply (_target, _this, args) {\n            if (typeof args[0] === \"function\") {\n                return args[0](proxy);\n            }\n            throw new Error(getUnsupportedModuleErrorMessage(moduleName));\n        }\n    });\n    return new Proxy({}, {\n        get: ()=>proxy\n    });\n}\nfunction enhanceGlobals() {\n    // The condition is true when the \"process\" module is provided\n    if (process !== global.process) {\n        // prefer local process but global.process has correct \"env\"\n        process.env = global.process.env;\n        global.process = process;\n    }\n    // to allow building code that import but does not use node.js modules,\n    // webpack will expect this function to exist in global scope\n    Object.defineProperty(globalThis, \"__import_unsupported\", {\n        value: __import_unsupported,\n        enumerable: false,\n        configurable: false\n    });\n    // Eagerly fire instrumentation hook to make the startup faster.\n    void ensureInstrumentationRegistered();\n}\nenhanceGlobals();\n\n//# sourceMappingURL=globals.js.map","export class PageSignatureError extends Error {\n    constructor({ page }){\n        super(`The middleware \"${page}\" accepts an async API directly with the form:\n  \n  export function middleware(request, event) {\n    return NextResponse.redirect('/new-location')\n  }\n  \n  Read more: https://nextjs.org/docs/messages/middleware-new-signature\n  `);\n    }\n}\nexport class RemovedPageError extends Error {\n    constructor(){\n        super(`The request.page has been deprecated in favour of \\`URLPattern\\`.\n  Read more: https://nextjs.org/docs/messages/middleware-request-page\n  `);\n    }\n}\nexport class RemovedUAError extends Error {\n    constructor(){\n        super(`The request.ua has been removed in favour of \\`userAgent\\` function.\n  Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n  `);\n    }\n}\n\n//# sourceMappingURL=error.js.map","export const NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nexport const NEXT_INTERCEPTION_MARKER_PREFIX = \"nxtI\";\nexport const PRERENDER_REVALIDATE_HEADER = \"x-prerender-revalidate\";\nexport const PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = \"x-prerender-revalidate-if-generated\";\nexport const RSC_PREFETCH_SUFFIX = \".prefetch.rsc\";\nexport const RSC_SUFFIX = \".rsc\";\nexport const ACTION_SUFFIX = \".action\";\nexport const NEXT_DATA_SUFFIX = \".json\";\nexport const NEXT_META_SUFFIX = \".meta\";\nexport const NEXT_BODY_SUFFIX = \".body\";\nexport const NEXT_CACHE_TAGS_HEADER = \"x-next-cache-tags\";\nexport const NEXT_CACHE_SOFT_TAGS_HEADER = \"x-next-cache-soft-tags\";\nexport const NEXT_CACHE_REVALIDATED_TAGS_HEADER = \"x-next-revalidated-tags\";\nexport const NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER = \"x-next-revalidate-tag-token\";\n// if these change make sure we update the related\n// documentation as well\nexport const NEXT_CACHE_TAG_MAX_ITEMS = 128;\nexport const NEXT_CACHE_TAG_MAX_LENGTH = 256;\nexport const NEXT_CACHE_SOFT_TAG_MAX_LENGTH = 1024;\nexport const NEXT_CACHE_IMPLICIT_TAG_ID = \"_N_T_\";\n// in seconds\nexport const CACHE_ONE_YEAR = 31536000;\n// Patterns to detect middleware files\nexport const MIDDLEWARE_FILENAME = \"middleware\";\nexport const MIDDLEWARE_LOCATION_REGEXP = `(?:src/)?${MIDDLEWARE_FILENAME}`;\n// Pattern to detect instrumentation hooks file\nexport const INSTRUMENTATION_HOOK_FILENAME = \"instrumentation\";\n// Because on Windows absolute paths in the generated code can break because of numbers, eg 1 in the path,\n// we have to use a private alias\nexport const PAGES_DIR_ALIAS = \"private-next-pages\";\nexport const DOT_NEXT_ALIAS = \"private-dot-next\";\nexport const ROOT_DIR_ALIAS = \"private-next-root-dir\";\nexport const APP_DIR_ALIAS = \"private-next-app-dir\";\nexport const RSC_MOD_REF_PROXY_ALIAS = \"private-next-rsc-mod-ref-proxy\";\nexport const RSC_ACTION_VALIDATE_ALIAS = \"private-next-rsc-action-validate\";\nexport const RSC_ACTION_PROXY_ALIAS = \"private-next-rsc-server-reference\";\nexport const RSC_ACTION_ENCRYPTION_ALIAS = \"private-next-rsc-action-encryption\";\nexport const RSC_ACTION_CLIENT_WRAPPER_ALIAS = \"private-next-rsc-action-client-wrapper\";\nexport const PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict`;\nexport const SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps`;\nexport const SERVER_PROPS_GET_INIT_PROPS_CONFLICT = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`;\nexport const SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`;\nexport const STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props`;\nexport const SERVER_PROPS_EXPORT_ERROR = `pages with \\`getServerSideProps\\` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export`;\nexport const GSP_NO_RETURNED_VALUE = \"Your `getStaticProps` function did not return an object. Did you forget to add a `return`?\";\nexport const GSSP_NO_RETURNED_VALUE = \"Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?\";\nexport const UNSTABLE_REVALIDATE_RENAME_ERROR = \"The `unstable_revalidate` property is available for general use.\\n\" + \"Please use `revalidate` instead.\";\nexport const GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`;\nexport const NON_STANDARD_NODE_ENV = `You are using a non-standard \"NODE_ENV\" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`;\nexport const SSG_FALLBACK_EXPORT_ERROR = `Pages with \\`fallback\\` enabled in \\`getStaticPaths\\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`;\nexport const ESLINT_DEFAULT_DIRS = [\n    \"app\",\n    \"pages\",\n    \"components\",\n    \"lib\",\n    \"src\"\n];\nexport const SERVER_RUNTIME = {\n    edge: \"edge\",\n    experimentalEdge: \"experimental-edge\",\n    nodejs: \"nodejs\"\n};\n/**\n * The names of the webpack layers. These layers are the primitives for the\n * webpack chunks.\n */ const WEBPACK_LAYERS_NAMES = {\n    /**\n   * The layer for the shared code between the client and server bundles.\n   */ shared: \"shared\",\n    /**\n   * React Server Components layer (rsc).\n   */ reactServerComponents: \"rsc\",\n    /**\n   * Server Side Rendering layer for app (ssr).\n   */ serverSideRendering: \"ssr\",\n    /**\n   * The browser client bundle layer for actions.\n   */ actionBrowser: \"action-browser\",\n    /**\n   * The layer for the API routes.\n   */ api: \"api\",\n    /**\n   * The layer for the middleware code.\n   */ middleware: \"middleware\",\n    /**\n   * The layer for the instrumentation hooks.\n   */ instrument: \"instrument\",\n    /**\n   * The layer for assets on the edge.\n   */ edgeAsset: \"edge-asset\",\n    /**\n   * The browser client bundle layer for App directory.\n   */ appPagesBrowser: \"app-pages-browser\",\n    /**\n   * The server bundle layer for metadata routes.\n   */ appMetadataRoute: \"app-metadata-route\",\n    /**\n   * The layer for the server bundle for App Route handlers.\n   */ appRouteHandler: \"app-route-handler\"\n};\nconst WEBPACK_LAYERS = {\n    ...WEBPACK_LAYERS_NAMES,\n    GROUP: {\n        serverOnly: [\n            WEBPACK_LAYERS_NAMES.reactServerComponents,\n            WEBPACK_LAYERS_NAMES.actionBrowser,\n            WEBPACK_LAYERS_NAMES.appMetadataRoute,\n            WEBPACK_LAYERS_NAMES.appRouteHandler,\n            WEBPACK_LAYERS_NAMES.instrument\n        ],\n        clientOnly: [\n            WEBPACK_LAYERS_NAMES.serverSideRendering,\n            WEBPACK_LAYERS_NAMES.appPagesBrowser\n        ],\n        nonClientServerTarget: [\n            // middleware and pages api\n            WEBPACK_LAYERS_NAMES.middleware,\n            WEBPACK_LAYERS_NAMES.api\n        ],\n        app: [\n            WEBPACK_LAYERS_NAMES.reactServerComponents,\n            WEBPACK_LAYERS_NAMES.actionBrowser,\n            WEBPACK_LAYERS_NAMES.appMetadataRoute,\n            WEBPACK_LAYERS_NAMES.appRouteHandler,\n            WEBPACK_LAYERS_NAMES.serverSideRendering,\n            WEBPACK_LAYERS_NAMES.appPagesBrowser,\n            WEBPACK_LAYERS_NAMES.shared,\n            WEBPACK_LAYERS_NAMES.instrument\n        ]\n    }\n};\nconst WEBPACK_RESOURCE_QUERIES = {\n    edgeSSREntry: \"__next_edge_ssr_entry__\",\n    metadata: \"__next_metadata__\",\n    metadataRoute: \"__next_metadata_route__\",\n    metadataImageMeta: \"__next_metadata_image_meta__\"\n};\nexport { WEBPACK_LAYERS, WEBPACK_RESOURCE_QUERIES };\n\n//# sourceMappingURL=constants.js.map","import { NEXT_INTERCEPTION_MARKER_PREFIX, NEXT_QUERY_PARAM_PREFIX } from \"../../lib/constants\";\n/**\n * Converts a Node.js IncomingHttpHeaders object to a Headers object. Any\n * headers with multiple values will be joined with a comma and space. Any\n * headers that have an undefined value will be ignored and others will be\n * coerced to strings.\n *\n * @param nodeHeaders the headers object to convert\n * @returns the converted headers object\n */ export function fromNodeOutgoingHttpHeaders(nodeHeaders) {\n    const headers = new Headers();\n    for (let [key, value] of Object.entries(nodeHeaders)){\n        const values = Array.isArray(value) ? value : [\n            value\n        ];\n        for (let v of values){\n            if (typeof v === \"undefined\") continue;\n            if (typeof v === \"number\") {\n                v = v.toString();\n            }\n            headers.append(key, v);\n        }\n    }\n    return headers;\n}\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n  \n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/ export function splitCookiesString(cookiesString) {\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\n/**\n * Converts a Headers object to a Node.js OutgoingHttpHeaders object. This is\n * required to support the set-cookie header, which may have multiple values.\n *\n * @param headers the headers object to convert\n * @returns the converted headers object\n */ export function toNodeOutgoingHttpHeaders(headers) {\n    const nodeHeaders = {};\n    const cookies = [];\n    if (headers) {\n        for (const [key, value] of headers.entries()){\n            if (key.toLowerCase() === \"set-cookie\") {\n                // We may have gotten a comma joined string of cookies, or multiple\n                // set-cookie headers. We need to merge them into one header array\n                // to represent all the cookies.\n                cookies.push(...splitCookiesString(value));\n                nodeHeaders[key] = cookies.length === 1 ? cookies[0] : cookies;\n            } else {\n                nodeHeaders[key] = value;\n            }\n        }\n    }\n    return nodeHeaders;\n}\n/**\n * Validate the correctness of a user-provided URL.\n */ export function validateURL(url) {\n    try {\n        return String(new URL(String(url)));\n    } catch (error) {\n        throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n            cause: error\n        });\n    }\n}\n/**\n * Normalizes `nxtP` and `nxtI` query param values to remove the prefix.\n * This function does not mutate the input key; it calls the provided function\n * with the normalized key.\n */ export function normalizeNextQueryParam(key, onKeyNormalized) {\n    const prefixes = [\n        NEXT_QUERY_PARAM_PREFIX,\n        NEXT_INTERCEPTION_MARKER_PREFIX\n    ];\n    for (const prefix of prefixes){\n        if (key !== prefix && key.startsWith(prefix)) {\n            const normalizedKey = key.substring(prefix.length);\n            onKeyNormalized(normalizedKey);\n        }\n    }\n}\n\n//# sourceMappingURL=utils.js.map","import { PageSignatureError } from \"../error\";\nconst responseSymbol = Symbol(\"response\");\nconst passThroughSymbol = Symbol(\"passThrough\");\nexport const waitUntilSymbol = Symbol(\"waitUntil\");\nclass FetchEvent {\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(_request){\n        this[waitUntilSymbol] = [];\n        this[passThroughSymbol] = false;\n    }\n    respondWith(response) {\n        if (!this[responseSymbol]) {\n            this[responseSymbol] = Promise.resolve(response);\n        }\n    }\n    passThroughOnException() {\n        this[passThroughSymbol] = true;\n    }\n    waitUntil(promise) {\n        this[waitUntilSymbol].push(promise);\n    }\n}\nexport class NextFetchEvent extends FetchEvent {\n    constructor(params){\n        super(params.request);\n        this.sourcePage = params.page;\n    }\n    /**\n   * @deprecated The `request` is now the first parameter and the API is now async.\n   *\n   * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n   */ get request() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    /**\n   * @deprecated Using `respondWith` is no longer needed.\n   *\n   * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n   */ respondWith() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\n\n//# sourceMappingURL=fetch-event.js.map",null,null,null,null,null,null,null,null,null,null,null,null,"import { detectDomainLocale } from \"../../shared/lib/i18n/detect-domain-locale\";\nimport { formatNextPathnameInfo } from \"../../shared/lib/router/utils/format-next-pathname-info\";\nimport { getHostname } from \"../../shared/lib/get-hostname\";\nimport { getNextPathnameInfo } from \"../../shared/lib/router/utils/get-next-pathname-info\";\nconst REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\\/\\/)(127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|\\[::1\\]|localhost)/;\nfunction parseURL(url, base) {\n    return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"));\n}\nconst Internal = Symbol(\"NextURLInternal\");\nexport class NextURL {\n    constructor(input, baseOrOpts, opts){\n        let base;\n        let options;\n        if (typeof baseOrOpts === \"object\" && \"pathname\" in baseOrOpts || typeof baseOrOpts === \"string\") {\n            base = baseOrOpts;\n            options = opts || {};\n        } else {\n            options = opts || baseOrOpts || {};\n        }\n        this[Internal] = {\n            url: parseURL(input, base ?? options.base),\n            options: options,\n            basePath: \"\"\n        };\n        this.analyze();\n    }\n    analyze() {\n        var _this_Internal_options_nextConfig_i18n, _this_Internal_options_nextConfig, _this_Internal_domainLocale, _this_Internal_options_nextConfig_i18n1, _this_Internal_options_nextConfig1;\n        const info = getNextPathnameInfo(this[Internal].url.pathname, {\n            nextConfig: this[Internal].options.nextConfig,\n            parseData: !process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE,\n            i18nProvider: this[Internal].options.i18nProvider\n        });\n        const hostname = getHostname(this[Internal].url, this[Internal].options.headers);\n        this[Internal].domainLocale = this[Internal].options.i18nProvider ? this[Internal].options.i18nProvider.detectDomainLocale(hostname) : detectDomainLocale((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.domains, hostname);\n        const defaultLocale = ((_this_Internal_domainLocale = this[Internal].domainLocale) == null ? void 0 : _this_Internal_domainLocale.defaultLocale) || ((_this_Internal_options_nextConfig1 = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n1 = _this_Internal_options_nextConfig1.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n1.defaultLocale);\n        this[Internal].url.pathname = info.pathname;\n        this[Internal].defaultLocale = defaultLocale;\n        this[Internal].basePath = info.basePath ?? \"\";\n        this[Internal].buildId = info.buildId;\n        this[Internal].locale = info.locale ?? defaultLocale;\n        this[Internal].trailingSlash = info.trailingSlash;\n    }\n    formatPathname() {\n        return formatNextPathnameInfo({\n            basePath: this[Internal].basePath,\n            buildId: this[Internal].buildId,\n            defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : undefined,\n            locale: this[Internal].locale,\n            pathname: this[Internal].url.pathname,\n            trailingSlash: this[Internal].trailingSlash\n        });\n    }\n    formatSearch() {\n        return this[Internal].url.search;\n    }\n    get buildId() {\n        return this[Internal].buildId;\n    }\n    set buildId(buildId) {\n        this[Internal].buildId = buildId;\n    }\n    get locale() {\n        return this[Internal].locale ?? \"\";\n    }\n    set locale(locale) {\n        var _this_Internal_options_nextConfig_i18n, _this_Internal_options_nextConfig;\n        if (!this[Internal].locale || !((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.locales.includes(locale))) {\n            throw new TypeError(`The NextURL configuration includes no locale \"${locale}\"`);\n        }\n        this[Internal].locale = locale;\n    }\n    get defaultLocale() {\n        return this[Internal].defaultLocale;\n    }\n    get domainLocale() {\n        return this[Internal].domainLocale;\n    }\n    get searchParams() {\n        return this[Internal].url.searchParams;\n    }\n    get host() {\n        return this[Internal].url.host;\n    }\n    set host(value) {\n        this[Internal].url.host = value;\n    }\n    get hostname() {\n        return this[Internal].url.hostname;\n    }\n    set hostname(value) {\n        this[Internal].url.hostname = value;\n    }\n    get port() {\n        return this[Internal].url.port;\n    }\n    set port(value) {\n        this[Internal].url.port = value;\n    }\n    get protocol() {\n        return this[Internal].url.protocol;\n    }\n    set protocol(value) {\n        this[Internal].url.protocol = value;\n    }\n    get href() {\n        const pathname = this.formatPathname();\n        const search = this.formatSearch();\n        return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;\n    }\n    set href(url) {\n        this[Internal].url = parseURL(url);\n        this.analyze();\n    }\n    get origin() {\n        return this[Internal].url.origin;\n    }\n    get pathname() {\n        return this[Internal].url.pathname;\n    }\n    set pathname(value) {\n        this[Internal].url.pathname = value;\n    }\n    get hash() {\n        return this[Internal].url.hash;\n    }\n    set hash(value) {\n        this[Internal].url.hash = value;\n    }\n    get search() {\n        return this[Internal].url.search;\n    }\n    set search(value) {\n        this[Internal].url.search = value;\n    }\n    get password() {\n        return this[Internal].url.password;\n    }\n    set password(value) {\n        this[Internal].url.password = value;\n    }\n    get username() {\n        return this[Internal].url.username;\n    }\n    set username(value) {\n        this[Internal].url.username = value;\n    }\n    get basePath() {\n        return this[Internal].basePath;\n    }\n    set basePath(value) {\n        this[Internal].basePath = value.startsWith(\"/\") ? value : `/${value}`;\n    }\n    toString() {\n        return this.href;\n    }\n    toJSON() {\n        return this.href;\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            href: this.href,\n            origin: this.origin,\n            protocol: this.protocol,\n            username: this.username,\n            password: this.password,\n            host: this.host,\n            hostname: this.hostname,\n            port: this.port,\n            pathname: this.pathname,\n            search: this.search,\n            searchParams: this.searchParams,\n            hash: this.hash\n        };\n    }\n    clone() {\n        return new NextURL(String(this), this[Internal].options);\n    }\n}\n\n//# sourceMappingURL=next-url.js.map","export { RequestCookies, ResponseCookies, stringifyCookie } from \"next/dist/compiled/@edge-runtime/cookies\";\n\n//# sourceMappingURL=cookies.js.map","import { NextURL } from \"../next-url\";\nimport { toNodeOutgoingHttpHeaders, validateURL } from \"../utils\";\nimport { RemovedUAError, RemovedPageError } from \"../error\";\nimport { RequestCookies } from \"./cookies\";\nexport const INTERNALS = Symbol(\"internal request\");\n/**\n * This class extends the [Web `Request` API](https://developer.mozilla.org/docs/Web/API/Request) with additional convenience methods.\n *\n * Read more: [Next.js Docs: `NextRequest`](https://nextjs.org/docs/app/api-reference/functions/next-request)\n */ export class NextRequest extends Request {\n    constructor(input, init = {}){\n        const url = typeof input !== \"string\" && \"url\" in input ? input.url : String(input);\n        validateURL(url);\n        if (input instanceof Request) super(input, init);\n        else super(url, init);\n        const nextUrl = new NextURL(url, {\n            headers: toNodeOutgoingHttpHeaders(this.headers),\n            nextConfig: init.nextConfig\n        });\n        this[INTERNALS] = {\n            cookies: new RequestCookies(this.headers),\n            geo: init.geo || {},\n            ip: init.ip,\n            nextUrl,\n            url: process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE ? url : nextUrl.toString()\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            geo: this.geo,\n            ip: this.ip,\n            nextUrl: this.nextUrl,\n            url: this.url,\n            // rest of props come from Request\n            bodyUsed: this.bodyUsed,\n            cache: this.cache,\n            credentials: this.credentials,\n            destination: this.destination,\n            headers: Object.fromEntries(this.headers),\n            integrity: this.integrity,\n            keepalive: this.keepalive,\n            method: this.method,\n            mode: this.mode,\n            redirect: this.redirect,\n            referrer: this.referrer,\n            referrerPolicy: this.referrerPolicy,\n            signal: this.signal\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    get geo() {\n        return this[INTERNALS].geo;\n    }\n    get ip() {\n        return this[INTERNALS].ip;\n    }\n    get nextUrl() {\n        return this[INTERNALS].nextUrl;\n    }\n    /**\n   * @deprecated\n   * `page` has been deprecated in favour of `URLPattern`.\n   * Read more: https://nextjs.org/docs/messages/middleware-request-page\n   */ get page() {\n        throw new RemovedPageError();\n    }\n    /**\n   * @deprecated\n   * `ua` has been removed in favour of \\`userAgent\\` function.\n   * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n   */ get ua() {\n        throw new RemovedUAError();\n    }\n    get url() {\n        return this[INTERNALS].url;\n    }\n}\n\n//# sourceMappingURL=request.js.map","export class ReflectAdapter {\n    static get(target, prop, receiver) {\n        const value = Reflect.get(target, prop, receiver);\n        if (typeof value === \"function\") {\n            return value.bind(target);\n        }\n        return value;\n    }\n    static set(target, prop, value, receiver) {\n        return Reflect.set(target, prop, value, receiver);\n    }\n    static has(target, prop) {\n        return Reflect.has(target, prop);\n    }\n    static deleteProperty(target, prop) {\n        return Reflect.deleteProperty(target, prop);\n    }\n}\n\n//# sourceMappingURL=reflect.js.map","import { stringifyCookie } from \"../../web/spec-extension/cookies\";\nimport { NextURL } from \"../next-url\";\nimport { toNodeOutgoingHttpHeaders, validateURL } from \"../utils\";\nimport { ReflectAdapter } from \"./adapters/reflect\";\nimport { ResponseCookies } from \"./cookies\";\nconst INTERNALS = Symbol(\"internal response\");\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var _init_request;\n    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error(\"request.headers must be an instance of Headers\");\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set(\"x-middleware-request-\" + key, value);\n            keys.push(key);\n        }\n        headers.set(\"x-middleware-override-headers\", keys.join(\",\"));\n    }\n}\n/**\n * This class extends the [Web `Response` API](https://developer.mozilla.org/docs/Web/API/Response) with additional convenience methods.\n *\n * Read more: [Next.js Docs: `NextResponse`](https://nextjs.org/docs/app/api-reference/functions/next-response)\n */ export class NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        const headers = this.headers;\n        const cookies = new ResponseCookies(headers);\n        const cookiesProxy = new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"delete\":\n                    case \"set\":\n                        {\n                            return (...args)=>{\n                                const result = Reflect.apply(target[prop], target, args);\n                                const newHeaders = new Headers(headers);\n                                if (result instanceof ResponseCookies) {\n                                    headers.set(\"x-middleware-set-cookie\", result.getAll().map((cookie)=>stringifyCookie(cookie)).join(\",\"));\n                                }\n                                handleMiddlewareField(init, newHeaders);\n                                return result;\n                            };\n                        }\n                    default:\n                        return ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n        this[INTERNALS] = {\n            cookies: cookiesProxy,\n            url: init.url ? new NextURL(init.url, {\n                headers: toNodeOutgoingHttpHeaders(headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            // rest of props come from Response\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === \"number\" ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === \"object\" ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set(\"Location\", validateURL(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-rewrite\", validateURL(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-next\", \"1\");\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n}\n\n//# sourceMappingURL=response.js.map",null,null,"import { NEXT_RSC_UNION_QUERY } from \"../client/components/app-router-headers\";\nconst INTERNAL_QUERY_NAMES = [\n    \"__nextFallback\",\n    \"__nextLocale\",\n    \"__nextInferredLocaleFromDefault\",\n    \"__nextDefaultLocale\",\n    \"__nextIsNotFound\",\n    NEXT_RSC_UNION_QUERY\n];\nconst EDGE_EXTENDED_INTERNAL_QUERY_NAMES = [\n    \"__nextDataReq\"\n];\nexport function stripInternalQueries(query) {\n    for (const name of INTERNAL_QUERY_NAMES){\n        delete query[name];\n    }\n}\nexport function stripInternalSearchParams(url, isEdge) {\n    const isStringUrl = typeof url === \"string\";\n    const instance = isStringUrl ? new URL(url) : url;\n    for (const name of INTERNAL_QUERY_NAMES){\n        instance.searchParams.delete(name);\n    }\n    if (isEdge) {\n        for (const name of EDGE_EXTENDED_INTERNAL_QUERY_NAMES){\n            instance.searchParams.delete(name);\n        }\n    }\n    return isStringUrl ? instance.toString() : instance;\n}\n\n//# sourceMappingURL=internal-utils.js.map",null,"import { ReflectAdapter } from \"./reflect\";\n/**\n * @internal\n */ export class ReadonlyHeadersError extends Error {\n    constructor(){\n        super(\"Headers cannot be modified. Read more: https://nextjs.org/docs/app/api-reference/functions/headers\");\n    }\n    static callable() {\n        throw new ReadonlyHeadersError();\n    }\n}\nexport class HeadersAdapter extends Headers {\n    constructor(headers){\n        // We've already overridden the methods that would be called, so we're just\n        // calling the super constructor to ensure that the instanceof check works.\n        super();\n        this.headers = new Proxy(headers, {\n            get (target, prop, receiver) {\n                // Because this is just an object, we expect that all \"get\" operations\n                // are for properties. If it's a \"get\" for a symbol, we'll just return\n                // the symbol.\n                if (typeof prop === \"symbol\") {\n                    return ReflectAdapter.get(target, prop, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return undefined.\n                if (typeof original === \"undefined\") return;\n                // If the original casing exists, return the value.\n                return ReflectAdapter.get(target, original, receiver);\n            },\n            set (target, prop, value, receiver) {\n                if (typeof prop === \"symbol\") {\n                    return ReflectAdapter.set(target, prop, value, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, use the prop as the key.\n                return ReflectAdapter.set(target, original ?? prop, value, receiver);\n            },\n            has (target, prop) {\n                if (typeof prop === \"symbol\") return ReflectAdapter.has(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return false.\n                if (typeof original === \"undefined\") return false;\n                // If the original casing exists, return true.\n                return ReflectAdapter.has(target, original);\n            },\n            deleteProperty (target, prop) {\n                if (typeof prop === \"symbol\") return ReflectAdapter.deleteProperty(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return true.\n                if (typeof original === \"undefined\") return true;\n                // If the original casing exists, delete the property.\n                return ReflectAdapter.deleteProperty(target, original);\n            }\n        });\n    }\n    /**\n   * Seals a Headers instance to prevent modification by throwing an error when\n   * any mutating method is called.\n   */ static seal(headers) {\n        return new Proxy(headers, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"append\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyHeadersError.callable;\n                    default:\n                        return ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n    /**\n   * Merges a header value into a string. This stores multiple values as an\n   * array, so we need to merge them into a string.\n   *\n   * @param value a header value\n   * @returns a merged header value (a string)\n   */ merge(value) {\n        if (Array.isArray(value)) return value.join(\", \");\n        return value;\n    }\n    /**\n   * Creates a Headers instance from a plain object or a Headers instance.\n   *\n   * @param headers a plain object or a Headers instance\n   * @returns a headers instance\n   */ static from(headers) {\n        if (headers instanceof Headers) return headers;\n        return new HeadersAdapter(headers);\n    }\n    append(name, value) {\n        const existing = this.headers[name];\n        if (typeof existing === \"string\") {\n            this.headers[name] = [\n                existing,\n                value\n            ];\n        } else if (Array.isArray(existing)) {\n            existing.push(value);\n        } else {\n            this.headers[name] = value;\n        }\n    }\n    delete(name) {\n        delete this.headers[name];\n    }\n    get(name) {\n        const value = this.headers[name];\n        if (typeof value !== \"undefined\") return this.merge(value);\n        return null;\n    }\n    has(name) {\n        return typeof this.headers[name] !== \"undefined\";\n    }\n    set(name, value) {\n        this.headers[name] = value;\n    }\n    forEach(callbackfn, thisArg) {\n        for (const [name, value] of this.entries()){\n            callbackfn.call(thisArg, value, name, this);\n        }\n    }\n    *entries() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(name);\n            yield [\n                name,\n                value\n            ];\n        }\n    }\n    *keys() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            yield name;\n        }\n    }\n    *values() {\n        for (const key of Object.keys(this.headers)){\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(key);\n            yield value;\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n}\n\n//# sourceMappingURL=headers.js.map",null,null,null,"import { ResponseCookies } from \"../cookies\";\nimport { ReflectAdapter } from \"./reflect\";\nimport { staticGenerationAsyncStorage } from \"../../../../client/components/static-generation-async-storage.external\";\n/**\n * @internal\n */ export class ReadonlyRequestCookiesError extends Error {\n    constructor(){\n        super(\"Cookies can only be modified in a Server Action or Route Handler. Read more: https://nextjs.org/docs/app/api-reference/functions/cookies#cookiessetname-value-options\");\n    }\n    static callable() {\n        throw new ReadonlyRequestCookiesError();\n    }\n}\nexport class RequestCookiesAdapter {\n    static seal(cookies) {\n        return new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"clear\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyRequestCookiesError.callable;\n                    default:\n                        return ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n}\nconst SYMBOL_MODIFY_COOKIE_VALUES = Symbol.for(\"next.mutated.cookies\");\nexport function getModifiedCookieValues(cookies) {\n    const modified = cookies[SYMBOL_MODIFY_COOKIE_VALUES];\n    if (!modified || !Array.isArray(modified) || modified.length === 0) {\n        return [];\n    }\n    return modified;\n}\nexport function appendMutableCookies(headers, mutableCookies) {\n    const modifiedCookieValues = getModifiedCookieValues(mutableCookies);\n    if (modifiedCookieValues.length === 0) {\n        return false;\n    }\n    // Return a new response that extends the response with\n    // the modified cookies as fallbacks. `res` cookies\n    // will still take precedence.\n    const resCookies = new ResponseCookies(headers);\n    const returnedCookies = resCookies.getAll();\n    // Set the modified cookies as fallbacks.\n    for (const cookie of modifiedCookieValues){\n        resCookies.set(cookie);\n    }\n    // Set the original cookies as the final values.\n    for (const cookie of returnedCookies){\n        resCookies.set(cookie);\n    }\n    return true;\n}\nexport class MutableRequestCookiesAdapter {\n    static wrap(cookies, onUpdateCookies) {\n        const responseCookies = new ResponseCookies(new Headers());\n        for (const cookie of cookies.getAll()){\n            responseCookies.set(cookie);\n        }\n        let modifiedValues = [];\n        const modifiedCookies = new Set();\n        const updateResponseCookies = ()=>{\n            // TODO-APP: change method of getting staticGenerationAsyncStore\n            const staticGenerationAsyncStore = staticGenerationAsyncStorage.getStore();\n            if (staticGenerationAsyncStore) {\n                staticGenerationAsyncStore.pathWasRevalidated = true;\n            }\n            const allCookies = responseCookies.getAll();\n            modifiedValues = allCookies.filter((c)=>modifiedCookies.has(c.name));\n            if (onUpdateCookies) {\n                const serializedCookies = [];\n                for (const cookie of modifiedValues){\n                    const tempCookies = new ResponseCookies(new Headers());\n                    tempCookies.set(cookie);\n                    serializedCookies.push(tempCookies.toString());\n                }\n                onUpdateCookies(serializedCookies);\n            }\n        };\n        return new Proxy(responseCookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    // A special symbol to get the modified cookie values\n                    case SYMBOL_MODIFY_COOKIE_VALUES:\n                        return modifiedValues;\n                    // TODO: Throw error if trying to set a cookie after the response\n                    // headers have been set.\n                    case \"delete\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                target.delete(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    case \"set\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                return target.set(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    default:\n                        return ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n}\n\n//# sourceMappingURL=request-cookies.js.map","/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/ // eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */ var BaseServerSpan;\n(function(BaseServerSpan) {\n    BaseServerSpan[\"handleRequest\"] = \"BaseServer.handleRequest\";\n    BaseServerSpan[\"run\"] = \"BaseServer.run\";\n    BaseServerSpan[\"pipe\"] = \"BaseServer.pipe\";\n    BaseServerSpan[\"getStaticHTML\"] = \"BaseServer.getStaticHTML\";\n    BaseServerSpan[\"render\"] = \"BaseServer.render\";\n    BaseServerSpan[\"renderToResponseWithComponents\"] = \"BaseServer.renderToResponseWithComponents\";\n    BaseServerSpan[\"renderToResponse\"] = \"BaseServer.renderToResponse\";\n    BaseServerSpan[\"renderToHTML\"] = \"BaseServer.renderToHTML\";\n    BaseServerSpan[\"renderError\"] = \"BaseServer.renderError\";\n    BaseServerSpan[\"renderErrorToResponse\"] = \"BaseServer.renderErrorToResponse\";\n    BaseServerSpan[\"renderErrorToHTML\"] = \"BaseServer.renderErrorToHTML\";\n    BaseServerSpan[\"render404\"] = \"BaseServer.render404\";\n})(BaseServerSpan || (BaseServerSpan = {}));\nvar LoadComponentsSpan;\n(function(LoadComponentsSpan) {\n    LoadComponentsSpan[\"loadDefaultErrorComponents\"] = \"LoadComponents.loadDefaultErrorComponents\";\n    LoadComponentsSpan[\"loadComponents\"] = \"LoadComponents.loadComponents\";\n})(LoadComponentsSpan || (LoadComponentsSpan = {}));\nvar NextServerSpan;\n(function(NextServerSpan) {\n    NextServerSpan[\"getRequestHandler\"] = \"NextServer.getRequestHandler\";\n    NextServerSpan[\"getServer\"] = \"NextServer.getServer\";\n    NextServerSpan[\"getServerRequestHandler\"] = \"NextServer.getServerRequestHandler\";\n    NextServerSpan[\"createServer\"] = \"createServer.createServer\";\n})(NextServerSpan || (NextServerSpan = {}));\nvar NextNodeServerSpan;\n(function(NextNodeServerSpan) {\n    NextNodeServerSpan[\"compression\"] = \"NextNodeServer.compression\";\n    NextNodeServerSpan[\"getBuildId\"] = \"NextNodeServer.getBuildId\";\n    NextNodeServerSpan[\"createComponentTree\"] = \"NextNodeServer.createComponentTree\";\n    NextNodeServerSpan[\"clientComponentLoading\"] = \"NextNodeServer.clientComponentLoading\";\n    NextNodeServerSpan[\"getLayoutOrPageModule\"] = \"NextNodeServer.getLayoutOrPageModule\";\n    NextNodeServerSpan[\"generateStaticRoutes\"] = \"NextNodeServer.generateStaticRoutes\";\n    NextNodeServerSpan[\"generateFsStaticRoutes\"] = \"NextNodeServer.generateFsStaticRoutes\";\n    NextNodeServerSpan[\"generatePublicRoutes\"] = \"NextNodeServer.generatePublicRoutes\";\n    NextNodeServerSpan[\"generateImageRoutes\"] = \"NextNodeServer.generateImageRoutes.route\";\n    NextNodeServerSpan[\"sendRenderResult\"] = \"NextNodeServer.sendRenderResult\";\n    NextNodeServerSpan[\"proxyRequest\"] = \"NextNodeServer.proxyRequest\";\n    NextNodeServerSpan[\"runApi\"] = \"NextNodeServer.runApi\";\n    NextNodeServerSpan[\"render\"] = \"NextNodeServer.render\";\n    NextNodeServerSpan[\"renderHTML\"] = \"NextNodeServer.renderHTML\";\n    NextNodeServerSpan[\"imageOptimizer\"] = \"NextNodeServer.imageOptimizer\";\n    NextNodeServerSpan[\"getPagePath\"] = \"NextNodeServer.getPagePath\";\n    NextNodeServerSpan[\"getRoutesManifest\"] = \"NextNodeServer.getRoutesManifest\";\n    NextNodeServerSpan[\"findPageComponents\"] = \"NextNodeServer.findPageComponents\";\n    NextNodeServerSpan[\"getFontManifest\"] = \"NextNodeServer.getFontManifest\";\n    NextNodeServerSpan[\"getServerComponentManifest\"] = \"NextNodeServer.getServerComponentManifest\";\n    NextNodeServerSpan[\"getRequestHandler\"] = \"NextNodeServer.getRequestHandler\";\n    NextNodeServerSpan[\"renderToHTML\"] = \"NextNodeServer.renderToHTML\";\n    NextNodeServerSpan[\"renderError\"] = \"NextNodeServer.renderError\";\n    NextNodeServerSpan[\"renderErrorToHTML\"] = \"NextNodeServer.renderErrorToHTML\";\n    NextNodeServerSpan[\"render404\"] = \"NextNodeServer.render404\";\n    NextNodeServerSpan[\"startResponse\"] = \"NextNodeServer.startResponse\";\n    // nested inner span, does not require parent scope name\n    NextNodeServerSpan[\"route\"] = \"route\";\n    NextNodeServerSpan[\"onProxyReq\"] = \"onProxyReq\";\n    NextNodeServerSpan[\"apiResolver\"] = \"apiResolver\";\n    NextNodeServerSpan[\"internalFetch\"] = \"internalFetch\";\n})(NextNodeServerSpan || (NextNodeServerSpan = {}));\nvar StartServerSpan;\n(function(StartServerSpan) {\n    StartServerSpan[\"startServer\"] = \"startServer.startServer\";\n})(StartServerSpan || (StartServerSpan = {}));\nvar RenderSpan;\n(function(RenderSpan) {\n    RenderSpan[\"getServerSideProps\"] = \"Render.getServerSideProps\";\n    RenderSpan[\"getStaticProps\"] = \"Render.getStaticProps\";\n    RenderSpan[\"renderToString\"] = \"Render.renderToString\";\n    RenderSpan[\"renderDocument\"] = \"Render.renderDocument\";\n    RenderSpan[\"createBodyResult\"] = \"Render.createBodyResult\";\n})(RenderSpan || (RenderSpan = {}));\nvar AppRenderSpan;\n(function(AppRenderSpan) {\n    AppRenderSpan[\"renderToString\"] = \"AppRender.renderToString\";\n    AppRenderSpan[\"renderToReadableStream\"] = \"AppRender.renderToReadableStream\";\n    AppRenderSpan[\"getBodyResult\"] = \"AppRender.getBodyResult\";\n    AppRenderSpan[\"fetch\"] = \"AppRender.fetch\";\n})(AppRenderSpan || (AppRenderSpan = {}));\nvar RouterSpan;\n(function(RouterSpan) {\n    RouterSpan[\"executeRoute\"] = \"Router.executeRoute\";\n})(RouterSpan || (RouterSpan = {}));\nvar NodeSpan;\n(function(NodeSpan) {\n    NodeSpan[\"runHandler\"] = \"Node.runHandler\";\n})(NodeSpan || (NodeSpan = {}));\nvar AppRouteRouteHandlersSpan;\n(function(AppRouteRouteHandlersSpan) {\n    AppRouteRouteHandlersSpan[\"runHandler\"] = \"AppRouteRouteHandlers.runHandler\";\n})(AppRouteRouteHandlersSpan || (AppRouteRouteHandlersSpan = {}));\nvar ResolveMetadataSpan;\n(function(ResolveMetadataSpan) {\n    ResolveMetadataSpan[\"generateMetadata\"] = \"ResolveMetadata.generateMetadata\";\n    ResolveMetadataSpan[\"generateViewport\"] = \"ResolveMetadata.generateViewport\";\n})(ResolveMetadataSpan || (ResolveMetadataSpan = {}));\nvar MiddlewareSpan;\n(function(MiddlewareSpan) {\n    MiddlewareSpan[\"execute\"] = \"Middleware.execute\";\n})(MiddlewareSpan || (MiddlewareSpan = {}));\n// This list is used to filter out spans that are not relevant to the user\nexport const NextVanillaSpanAllowlist = [\n    \"Middleware.execute\",\n    \"BaseServer.handleRequest\",\n    \"Render.getServerSideProps\",\n    \"Render.getStaticProps\",\n    \"AppRender.fetch\",\n    \"AppRender.getBodyResult\",\n    \"Render.renderDocument\",\n    \"Node.runHandler\",\n    \"AppRouteRouteHandlers.runHandler\",\n    \"ResolveMetadata.generateMetadata\",\n    \"ResolveMetadata.generateViewport\",\n    \"NextNodeServer.createComponentTree\",\n    \"NextNodeServer.findPageComponents\",\n    \"NextNodeServer.getLayoutOrPageModule\",\n    \"NextNodeServer.startResponse\",\n    \"NextNodeServer.clientComponentLoading\"\n];\n// These Spans are allowed to be always logged\n// when the otel log prefix env is set\nexport const LogSpanAllowList = [\n    \"NextNodeServer.findPageComponents\",\n    \"NextNodeServer.createComponentTree\",\n    \"NextNodeServer.clientComponentLoading\"\n];\nexport { BaseServerSpan, LoadComponentsSpan, NextServerSpan, NextNodeServerSpan, StartServerSpan, RenderSpan, RouterSpan, AppRenderSpan, NodeSpan, AppRouteRouteHandlersSpan, ResolveMetadataSpan, MiddlewareSpan,  };\n\n//# sourceMappingURL=constants.js.map","import { LogSpanAllowList, NextVanillaSpanAllowlist } from \"./constants\";\nlet api;\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (process.env.NEXT_RUNTIME === \"edge\") {\n    api = require(\"@opentelemetry/api\");\n} else {\n    try {\n        api = require(\"@opentelemetry/api\");\n    } catch (err) {\n        api = require(\"next/dist/compiled/@opentelemetry/api\");\n    }\n}\nconst { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } = api;\nconst isPromise = (p)=>{\n    return p !== null && typeof p === \"object\" && typeof p.then === \"function\";\n};\nconst closeSpanWithError = (span, error)=>{\n    if ((error == null ? void 0 : error.bubble) === true) {\n        span.setAttribute(\"next.bubble\", true);\n    } else {\n        if (error) {\n            span.recordException(error);\n        }\n        span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error == null ? void 0 : error.message\n        });\n    }\n    span.end();\n};\n/** we use this map to propagate attributes from nested spans to the top span */ const rootSpanAttributesStore = new Map();\nconst rootSpanIdKey = api.createContextKey(\"next.rootSpanId\");\nlet lastSpanId = 0;\nconst getSpanId = ()=>lastSpanId++;\nclass NextTracerImpl {\n    /**\n   * Returns an instance to the trace with configured name.\n   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n   * This should be lazily evaluated.\n   */ getTracerInstance() {\n        return trace.getTracer(\"next.js\", \"0.0.1\");\n    }\n    getContext() {\n        return context;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    withPropagatedContext(carrier, fn, getter) {\n        const activeContext = context.active();\n        if (trace.getSpanContext(activeContext)) {\n            // Active span is already set, too late to propagate.\n            return fn();\n        }\n        const remoteContext = propagation.extract(activeContext, carrier, getter);\n        return context.with(remoteContext, fn);\n    }\n    trace(...args) {\n        var _trace_getSpanContext;\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        // coerce options form overload\n        const { fn, options } = typeof fnOrOptions === \"function\" ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        const spanName = options.spanName ?? type;\n        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== \"1\" || options.hideSpan) {\n            return fn();\n        }\n        // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;\n            isRootSpan = true;\n        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            \"next.span_name\": spanName,\n            \"next.span_type\": type,\n            ...options.attributes\n        };\n        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const startTime = \"performance\" in globalThis ? globalThis.performance.now() : undefined;\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || \"\")) {\n                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split(\".\").pop() || \"\").replace(/[A-Z]/g, (match)=>\"-\" + match.toLowerCase())}`, {\n                            start: startTime,\n                            end: performance.now()\n                        });\n                    }\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        // If there's error make sure it throws\n                        return result.then((res)=>{\n                            span.end();\n                            // Need to pass down the promise result,\n                            // it could be react stream response with error { error, stream }\n                            return res;\n                        }).catch((err)=>{\n                            closeSpanWithError(span, err);\n                            throw err;\n                        }).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== \"1\") {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === \"function\" && typeof fn === \"function\") {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === \"function\") {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})();\nexport { getTracer, SpanStatusCode, SpanKind };\n\n//# sourceMappingURL=tracer.js.map","import { HeadersAdapter } from \"../web/spec-extension/adapters/headers\";\nimport { PRERENDER_REVALIDATE_HEADER, PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER } from \"../../lib/constants\";\nimport { getTracer } from \"../lib/trace/tracer\";\nimport { NodeSpan } from \"../lib/trace/constants\";\nexport function wrapApiHandler(page, handler) {\n    return (...args)=>{\n        var _getTracer_getRootSpanAttributes;\n        (_getTracer_getRootSpanAttributes = getTracer().getRootSpanAttributes()) == null ? void 0 : _getTracer_getRootSpanAttributes.set(\"next.route\", page);\n        // Call API route method\n        return getTracer().trace(NodeSpan.runHandler, {\n            spanName: `executing api route (pages) ${page}`\n        }, ()=>handler(...args));\n    };\n}\n/**\n *\n * @param res response object\n * @param statusCode `HTTP` status code of response\n */ export function sendStatusCode(res, statusCode) {\n    res.statusCode = statusCode;\n    return res;\n}\n/**\n *\n * @param res response object\n * @param [statusOrUrl] `HTTP` status code of redirect\n * @param url URL of redirect\n */ export function redirect(res, statusOrUrl, url) {\n    if (typeof statusOrUrl === \"string\") {\n        url = statusOrUrl;\n        statusOrUrl = 307;\n    }\n    if (typeof statusOrUrl !== \"number\" || typeof url !== \"string\") {\n        throw new Error(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n    }\n    res.writeHead(statusOrUrl, {\n        Location: url\n    });\n    res.write(url);\n    res.end();\n    return res;\n}\nexport function checkIsOnDemandRevalidate(req, previewProps) {\n    const headers = HeadersAdapter.from(req.headers);\n    const previewModeId = headers.get(PRERENDER_REVALIDATE_HEADER);\n    const isOnDemandRevalidate = previewModeId === previewProps.previewModeId;\n    const revalidateOnlyGenerated = headers.has(PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER);\n    return {\n        isOnDemandRevalidate,\n        revalidateOnlyGenerated\n    };\n}\nexport const COOKIE_NAME_PRERENDER_BYPASS = `__prerender_bypass`;\nexport const COOKIE_NAME_PRERENDER_DATA = `__next_preview_data`;\nexport const RESPONSE_LIMIT_DEFAULT = 4 * 1024 * 1024;\nexport const SYMBOL_PREVIEW_DATA = Symbol(COOKIE_NAME_PRERENDER_DATA);\nexport const SYMBOL_CLEARED_COOKIES = Symbol(COOKIE_NAME_PRERENDER_BYPASS);\nexport function clearPreviewData(res, options = {}) {\n    if (SYMBOL_CLEARED_COOKIES in res) {\n        return res;\n    }\n    const { serialize } = require(\"next/dist/compiled/cookie\");\n    const previous = res.getHeader(\"Set-Cookie\");\n    res.setHeader(`Set-Cookie`, [\n        ...typeof previous === \"string\" ? [\n            previous\n        ] : Array.isArray(previous) ? previous : [],\n        serialize(COOKIE_NAME_PRERENDER_BYPASS, \"\", {\n            // To delete a cookie, set `expires` to a date in the past:\n            // https://tools.ietf.org/html/rfc6265#section-4.1.1\n            // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n            expires: new Date(0),\n            httpOnly: true,\n            sameSite: process.env.NODE_ENV !== \"development\" ? \"none\" : \"lax\",\n            secure: process.env.NODE_ENV !== \"development\",\n            path: \"/\",\n            ...options.path !== undefined ? {\n                path: options.path\n            } : undefined\n        }),\n        serialize(COOKIE_NAME_PRERENDER_DATA, \"\", {\n            // To delete a cookie, set `expires` to a date in the past:\n            // https://tools.ietf.org/html/rfc6265#section-4.1.1\n            // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n            expires: new Date(0),\n            httpOnly: true,\n            sameSite: process.env.NODE_ENV !== \"development\" ? \"none\" : \"lax\",\n            secure: process.env.NODE_ENV !== \"development\",\n            path: \"/\",\n            ...options.path !== undefined ? {\n                path: options.path\n            } : undefined\n        })\n    ]);\n    Object.defineProperty(res, SYMBOL_CLEARED_COOKIES, {\n        value: true,\n        enumerable: false\n    });\n    return res;\n}\n/**\n * Custom error class\n */ export class ApiError extends Error {\n    constructor(statusCode, message){\n        super(message);\n        this.statusCode = statusCode;\n    }\n}\n/**\n * Sends error in `response`\n * @param res response object\n * @param statusCode of response\n * @param message of response\n */ export function sendError(res, statusCode, message) {\n    res.statusCode = statusCode;\n    res.statusMessage = message;\n    res.end(message);\n}\n/**\n * Execute getter function only if its needed\n * @param LazyProps `req` and `params` for lazyProp\n * @param prop name of property\n * @param getter function to get data\n */ export function setLazyProp({ req }, prop, getter) {\n    const opts = {\n        configurable: true,\n        enumerable: true\n    };\n    const optsReset = {\n        ...opts,\n        writable: true\n    };\n    Object.defineProperty(req, prop, {\n        ...opts,\n        get: ()=>{\n            const value = getter();\n            // we set the property on the object to avoid recalculating it\n            Object.defineProperty(req, prop, {\n                ...optsReset,\n                value\n            });\n            return value;\n        },\n        set: (value)=>{\n            Object.defineProperty(req, prop, {\n                ...optsReset,\n                value\n            });\n        }\n    });\n}\n\n//# sourceMappingURL=index.js.map","import { COOKIE_NAME_PRERENDER_BYPASS, checkIsOnDemandRevalidate } from \"../api-utils\";\nexport class DraftModeProvider {\n    constructor(previewProps, req, cookies, mutableCookies){\n        var _cookies_get;\n        // The logic for draftMode() is very similar to tryGetPreviewData()\n        // but Draft Mode does not have any data associated with it.\n        const isOnDemandRevalidate = previewProps && checkIsOnDemandRevalidate(req, previewProps).isOnDemandRevalidate;\n        const cookieValue = (_cookies_get = cookies.get(COOKIE_NAME_PRERENDER_BYPASS)) == null ? void 0 : _cookies_get.value;\n        this.isEnabled = Boolean(!isOnDemandRevalidate && cookieValue && previewProps && (cookieValue === previewProps.previewModeId || // In dev mode, the cookie can be actual hash value preview id but the preview props can still be `development-id`.\n        process.env.NODE_ENV !== \"production\" && previewProps.previewModeId === \"development-id\"));\n        this._previewModeId = previewProps == null ? void 0 : previewProps.previewModeId;\n        this._mutableCookies = mutableCookies;\n    }\n    enable() {\n        if (!this._previewModeId) {\n            throw new Error(\"Invariant: previewProps missing previewModeId this should never happen\");\n        }\n        this._mutableCookies.set({\n            name: COOKIE_NAME_PRERENDER_BYPASS,\n            value: this._previewModeId,\n            httpOnly: true,\n            sameSite: process.env.NODE_ENV !== \"development\" ? \"none\" : \"lax\",\n            secure: process.env.NODE_ENV !== \"development\",\n            path: \"/\"\n        });\n    }\n    disable() {\n        // To delete a cookie, set `expires` to a date in the past:\n        // https://tools.ietf.org/html/rfc6265#section-4.1.1\n        // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n        this._mutableCookies.set({\n            name: COOKIE_NAME_PRERENDER_BYPASS,\n            value: \"\",\n            httpOnly: true,\n            sameSite: process.env.NODE_ENV !== \"development\" ? \"none\" : \"lax\",\n            secure: process.env.NODE_ENV !== \"development\",\n            path: \"/\",\n            expires: new Date(0)\n        });\n    }\n}\n\n//# sourceMappingURL=draft-mode-provider.js.map","import { FLIGHT_PARAMETERS } from \"../../client/components/app-router-headers\";\nimport { HeadersAdapter } from \"../web/spec-extension/adapters/headers\";\nimport { MutableRequestCookiesAdapter, RequestCookiesAdapter } from \"../web/spec-extension/adapters/request-cookies\";\nimport { ResponseCookies, RequestCookies } from \"../web/spec-extension/cookies\";\nimport { DraftModeProvider } from \"./draft-mode-provider\";\nimport { splitCookiesString } from \"../web/utils\";\nfunction getHeaders(headers) {\n    const cleaned = HeadersAdapter.from(headers);\n    for (const param of FLIGHT_PARAMETERS){\n        cleaned.delete(param.toString().toLowerCase());\n    }\n    return HeadersAdapter.seal(cleaned);\n}\nfunction getMutableCookies(headers, onUpdateCookies) {\n    const cookies = new RequestCookies(HeadersAdapter.from(headers));\n    return MutableRequestCookiesAdapter.wrap(cookies, onUpdateCookies);\n}\n/**\n * If middleware set cookies in this request (indicated by `x-middleware-set-cookie`),\n * then merge those into the existing cookie object, so that when `cookies()` is accessed\n * it's able to read the newly set cookies.\n */ function mergeMiddlewareCookies(req, existingCookies) {\n    if (\"x-middleware-set-cookie\" in req.headers && typeof req.headers[\"x-middleware-set-cookie\"] === \"string\") {\n        const setCookieValue = req.headers[\"x-middleware-set-cookie\"];\n        const responseHeaders = new Headers();\n        for (const cookie of splitCookiesString(setCookieValue)){\n            responseHeaders.append(\"set-cookie\", cookie);\n        }\n        const responseCookies = new ResponseCookies(responseHeaders);\n        // Transfer cookies from ResponseCookies to RequestCookies\n        for (const cookie of responseCookies.getAll()){\n            existingCookies.set(cookie);\n        }\n    }\n}\nexport const RequestAsyncStorageWrapper = {\n    /**\n   * Wrap the callback with the given store so it can access the underlying\n   * store using hooks.\n   *\n   * @param storage underlying storage object returned by the module\n   * @param context context to seed the store\n   * @param callback function to call within the scope of the context\n   * @returns the result returned by the callback\n   */ wrap (storage, { req, res, renderOpts }, callback) {\n        let previewProps = undefined;\n        if (renderOpts && \"previewProps\" in renderOpts) {\n            // TODO: investigate why previewProps isn't on RenderOpts\n            previewProps = renderOpts.previewProps;\n        }\n        function defaultOnUpdateCookies(cookies) {\n            if (res) {\n                res.setHeader(\"Set-Cookie\", cookies);\n            }\n        }\n        const cache = {};\n        const store = {\n            get headers () {\n                if (!cache.headers) {\n                    // Seal the headers object that'll freeze out any methods that could\n                    // mutate the underlying data.\n                    cache.headers = getHeaders(req.headers);\n                }\n                return cache.headers;\n            },\n            get cookies () {\n                if (!cache.cookies) {\n                    // if middleware is setting cookie(s), then include those in\n                    // the initial cached cookies so they can be read in render\n                    const requestCookies = new RequestCookies(HeadersAdapter.from(req.headers));\n                    mergeMiddlewareCookies(req, requestCookies);\n                    // Seal the cookies object that'll freeze out any methods that could\n                    // mutate the underlying data.\n                    cache.cookies = RequestCookiesAdapter.seal(requestCookies);\n                }\n                return cache.cookies;\n            },\n            get mutableCookies () {\n                if (!cache.mutableCookies) {\n                    const mutableCookies = getMutableCookies(req.headers, (renderOpts == null ? void 0 : renderOpts.onUpdateCookies) || (res ? defaultOnUpdateCookies : undefined));\n                    mergeMiddlewareCookies(req, mutableCookies);\n                    cache.mutableCookies = mutableCookies;\n                }\n                return cache.mutableCookies;\n            },\n            get draftMode () {\n                if (!cache.draftMode) {\n                    cache.draftMode = new DraftModeProvider(previewProps, req, this.cookies, this.mutableCookies);\n                }\n                return cache.draftMode;\n            },\n            reactLoadableManifest: (renderOpts == null ? void 0 : renderOpts.reactLoadableManifest) || {},\n            assetPrefix: (renderOpts == null ? void 0 : renderOpts.assetPrefix) || \"\"\n        };\n        return storage.run(store, callback, store);\n    }\n};\n\n//# sourceMappingURL=request-async-storage-wrapper.js.map",null,null,"/**\n * In edge runtime, these props directly accessed from environment variables.\n *   - local: env vars will be injected through edge-runtime as runtime env vars\n *   - deployment: env vars will be replaced by edge build pipeline\n */ export function getEdgePreviewProps() {\n    return {\n        previewModeId: process.env.NODE_ENV === \"production\" ? process.env.__NEXT_PREVIEW_MODE_ID : \"development-id\",\n        previewModeSigningKey: process.env.__NEXT_PREVIEW_MODE_SIGNING_KEY || \"\",\n        previewModeEncryptionKey: process.env.__NEXT_PREVIEW_MODE_ENCRYPTION_KEY || \"\"\n    };\n}\n\n//# sourceMappingURL=get-edge-preview-props.js.map","import { PageSignatureError } from \"./error\";\nimport { fromNodeOutgoingHttpHeaders, normalizeNextQueryParam } from \"./utils\";\nimport { NextFetchEvent } from \"./spec-extension/fetch-event\";\nimport { NextRequest } from \"./spec-extension/request\";\nimport { NextResponse } from \"./spec-extension/response\";\nimport { relativizeURL } from \"../../shared/lib/router/utils/relativize-url\";\nimport { waitUntilSymbol } from \"./spec-extension/fetch-event\";\nimport { NextURL } from \"./next-url\";\nimport { stripInternalSearchParams } from \"../internal-utils\";\nimport { normalizeRscURL } from \"../../shared/lib/router/utils/app-paths\";\nimport { FLIGHT_PARAMETERS } from \"../../client/components/app-router-headers\";\nimport { ensureInstrumentationRegistered } from \"./globals\";\nimport { RequestAsyncStorageWrapper } from \"../async-storage/request-async-storage-wrapper\";\nimport { requestAsyncStorage } from \"../../client/components/request-async-storage.external\";\nimport { getTracer } from \"../lib/trace/tracer\";\nimport { MiddlewareSpan } from \"../lib/trace/constants\";\nimport { getEdgePreviewProps } from \"./get-edge-preview-props\";\nexport class NextRequestHint extends NextRequest {\n    constructor(params){\n        super(params.input, params.init);\n        this.sourcePage = params.page;\n    }\n    get request() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    respondWith() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    waitUntil() {\n        throw new PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\nconst headersGetter = {\n    keys: (headers)=>Array.from(headers.keys()),\n    get: (headers, key)=>headers.get(key) ?? undefined\n};\nlet propagator = (request, fn)=>{\n    const tracer = getTracer();\n    return tracer.withPropagatedContext(request.headers, fn, headersGetter);\n};\nlet testApisIntercepted = false;\nfunction ensureTestApisIntercepted() {\n    if (!testApisIntercepted) {\n        testApisIntercepted = true;\n        if (process.env.NEXT_PRIVATE_TEST_PROXY === \"true\") {\n            const { interceptTestApis, wrapRequestHandler } = require(\"next/dist/experimental/testmode/server-edge\");\n            interceptTestApis();\n            propagator = wrapRequestHandler(propagator);\n        }\n    }\n}\nexport async function adapter(params) {\n    ensureTestApisIntercepted();\n    await ensureInstrumentationRegistered();\n    // TODO-APP: use explicit marker for this\n    const isEdgeRendering = typeof self.__BUILD_MANIFEST !== \"undefined\";\n    params.request.url = normalizeRscURL(params.request.url);\n    const requestUrl = new NextURL(params.request.url, {\n        headers: params.request.headers,\n        nextConfig: params.request.nextConfig\n    });\n    // Iterator uses an index to keep track of the current iteration. Because of deleting and appending below we can't just use the iterator.\n    // Instead we use the keys before iteration.\n    const keys = [\n        ...requestUrl.searchParams.keys()\n    ];\n    for (const key of keys){\n        const value = requestUrl.searchParams.getAll(key);\n        normalizeNextQueryParam(key, (normalizedKey)=>{\n            requestUrl.searchParams.delete(normalizedKey);\n            for (const val of value){\n                requestUrl.searchParams.append(normalizedKey, val);\n            }\n            requestUrl.searchParams.delete(key);\n        });\n    }\n    // Ensure users only see page requests, never data requests.\n    const buildId = requestUrl.buildId;\n    requestUrl.buildId = \"\";\n    const isNextDataRequest = params.request.headers[\"x-nextjs-data\"];\n    if (isNextDataRequest && requestUrl.pathname === \"/index\") {\n        requestUrl.pathname = \"/\";\n    }\n    const requestHeaders = fromNodeOutgoingHttpHeaders(params.request.headers);\n    const flightHeaders = new Map();\n    // Parameters should only be stripped for middleware\n    if (!isEdgeRendering) {\n        for (const param of FLIGHT_PARAMETERS){\n            const key = param.toString().toLowerCase();\n            const value = requestHeaders.get(key);\n            if (value) {\n                flightHeaders.set(key, requestHeaders.get(key));\n                requestHeaders.delete(key);\n            }\n        }\n    }\n    const normalizeUrl = process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE ? new URL(params.request.url) : requestUrl;\n    const request = new NextRequestHint({\n        page: params.page,\n        // Strip internal query parameters off the request.\n        input: stripInternalSearchParams(normalizeUrl, true).toString(),\n        init: {\n            body: params.request.body,\n            geo: params.request.geo,\n            headers: requestHeaders,\n            ip: params.request.ip,\n            method: params.request.method,\n            nextConfig: params.request.nextConfig,\n            signal: params.request.signal\n        }\n    });\n    /**\n   * This allows to identify the request as a data request. The user doesn't\n   * need to know about this property neither use it. We add it for testing\n   * purposes.\n   */ if (isNextDataRequest) {\n        Object.defineProperty(request, \"__isData\", {\n            enumerable: false,\n            value: true\n        });\n    }\n    if (// If we are inside of the next start sandbox\n    // leverage the shared instance if not we need\n    // to create a fresh cache instance each time\n    !globalThis.__incrementalCacheShared && params.IncrementalCache) {\n        globalThis.__incrementalCache = new params.IncrementalCache({\n            appDir: true,\n            fetchCache: true,\n            minimalMode: process.env.NODE_ENV !== \"development\",\n            fetchCacheKeyPrefix: process.env.__NEXT_FETCH_CACHE_KEY_PREFIX,\n            dev: process.env.NODE_ENV === \"development\",\n            requestHeaders: params.request.headers,\n            requestProtocol: \"https\",\n            getPrerenderManifest: ()=>{\n                return {\n                    version: -1,\n                    routes: {},\n                    dynamicRoutes: {},\n                    notFoundRoutes: [],\n                    preview: getEdgePreviewProps()\n                };\n            }\n        });\n    }\n    const event = new NextFetchEvent({\n        request,\n        page: params.page\n    });\n    let response;\n    let cookiesFromResponse;\n    response = await propagator(request, ()=>{\n        // we only care to make async storage available for middleware\n        const isMiddleware = params.page === \"/middleware\" || params.page === \"/src/middleware\";\n        if (isMiddleware) {\n            return getTracer().trace(MiddlewareSpan.execute, {\n                spanName: `middleware ${request.method} ${request.nextUrl.pathname}`,\n                attributes: {\n                    \"http.target\": request.nextUrl.pathname,\n                    \"http.method\": request.method\n                }\n            }, ()=>RequestAsyncStorageWrapper.wrap(requestAsyncStorage, {\n                    req: request,\n                    renderOpts: {\n                        onUpdateCookies: (cookies)=>{\n                            cookiesFromResponse = cookies;\n                        },\n                        // @ts-expect-error: TODO: investigate why previewProps isn't on RenderOpts\n                        previewProps: getEdgePreviewProps()\n                    }\n                }, ()=>params.handler(request, event)));\n        }\n        return params.handler(request, event);\n    });\n    // check if response is a Response object\n    if (response && !(response instanceof Response)) {\n        throw new TypeError(\"Expected an instance of Response to be returned\");\n    }\n    if (response && cookiesFromResponse) {\n        response.headers.set(\"set-cookie\", cookiesFromResponse);\n    }\n    /**\n   * For rewrites we must always include the locale in the final pathname\n   * so we re-create the NextURL forcing it to include it when the it is\n   * an internal rewrite. Also we make sure the outgoing rewrite URL is\n   * a data URL if the request was a data request.\n   */ const rewrite = response == null ? void 0 : response.headers.get(\"x-middleware-rewrite\");\n    if (response && rewrite && !isEdgeRendering) {\n        const rewriteUrl = new NextURL(rewrite, {\n            forceLocale: true,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n            if (rewriteUrl.host === request.nextUrl.host) {\n                rewriteUrl.buildId = buildId || rewriteUrl.buildId;\n                response.headers.set(\"x-middleware-rewrite\", String(rewriteUrl));\n            }\n        }\n        /**\n     * When the request is a data request we must show if there was a rewrite\n     * with an internal header so the client knows which component to load\n     * from the data request.\n     */ const relativizedRewrite = relativizeURL(String(rewriteUrl), String(requestUrl));\n        if (isNextDataRequest && // if the rewrite is external and external rewrite\n        // resolving config is enabled don't add this header\n        // so the upstream app can set it instead\n        !(process.env.__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE && relativizedRewrite.match(/http(s)?:\\/\\//))) {\n            response.headers.set(\"x-nextjs-rewrite\", relativizedRewrite);\n        }\n    }\n    /**\n   * For redirects we will not include the locale in case when it is the\n   * default and we must also make sure the outgoing URL is a data one if\n   * the incoming request was a data request.\n   */ const redirect = response == null ? void 0 : response.headers.get(\"Location\");\n    if (response && redirect && !isEdgeRendering) {\n        const redirectURL = new NextURL(redirect, {\n            forceLocale: false,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        /**\n     * Responses created from redirects have immutable headers so we have\n     * to clone the response to be able to modify it.\n     */ response = new Response(response.body, response);\n        if (!process.env.__NEXT_NO_MIDDLEWARE_URL_NORMALIZE) {\n            if (redirectURL.host === request.nextUrl.host) {\n                redirectURL.buildId = buildId || redirectURL.buildId;\n                response.headers.set(\"Location\", String(redirectURL));\n            }\n        }\n        /**\n     * When the request is a data request we can't use the location header as\n     * it may end up with CORS error. Instead we map to an internal header so\n     * the client knows the destination.\n     */ if (isNextDataRequest) {\n            response.headers.delete(\"Location\");\n            response.headers.set(\"x-nextjs-redirect\", relativizeURL(String(redirectURL), String(requestUrl)));\n        }\n    }\n    const finalResponse = response ? response : NextResponse.next();\n    // Flight headers are not overridable / removable so they are applied at the end.\n    const middlewareOverrideHeaders = finalResponse.headers.get(\"x-middleware-override-headers\");\n    const overwrittenHeaders = [];\n    if (middlewareOverrideHeaders) {\n        for (const [key, value] of flightHeaders){\n            finalResponse.headers.set(`x-middleware-request-${key}`, value);\n            overwrittenHeaders.push(key);\n        }\n        if (overwrittenHeaders.length > 0) {\n            finalResponse.headers.set(\"x-middleware-override-headers\", middlewareOverrideHeaders + \",\" + overwrittenHeaders.join(\",\"));\n        }\n    }\n    return {\n        response: finalResponse,\n        waitUntil: Promise.all(event[waitUntilSymbol]),\n        fetchMetrics: request.fetchMetrics\n    };\n}\n\n//# sourceMappingURL=adapter.js.map","import parseua from \"next/dist/compiled/ua-parser-js\";\nexport function isBot(input) {\n    return /Googlebot|Mediapartners-Google|AdsBot-Google|googleweblight|Storebot-Google|Google-PageRenderer|Google-InspectionTool|Bingbot|BingPreview|Slurp|DuckDuckBot|baiduspider|yandex|sogou|LinkedInBot|bitlybot|tumblr|vkShare|quora link preview|facebookexternalhit|facebookcatalog|Twitterbot|applebot|redditbot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|ia_archiver/i.test(input);\n}\nexport function userAgentFromString(input) {\n    return {\n        ...parseua(input),\n        isBot: input === undefined ? false : isBot(input)\n    };\n}\nexport function userAgent({ headers }) {\n    return userAgentFromString(headers.get(\"user-agent\") || undefined);\n}\n\n//# sourceMappingURL=user-agent.js.map","const GlobalURLPattern = // @ts-expect-error: URLPattern is not available in Node.js\ntypeof URLPattern === \"undefined\" ? undefined : URLPattern;\nexport { GlobalURLPattern as URLPattern };\n\n//# sourceMappingURL=url-pattern.js.map","// Alias index file of next/server for edge runtime for tree-shaking purpose\nexport { ImageResponse } from \"../spec-extension/image-response\";\nexport { NextRequest } from \"../spec-extension/request\";\nexport { NextResponse } from \"../spec-extension/response\";\nexport { userAgent, userAgentFromString } from \"../spec-extension/user-agent\";\nexport { URLPattern } from \"../spec-extension/url-pattern\";\n\n//# sourceMappingURL=index.js.map","export * from \"../server/web/exports/index\";\n\n//# sourceMappingURL=server.js.map","import { MongoClient, Db } from 'mongodb'\n\nconst uri = process.env.MONGODB_URI\nconst options = {}\n\nlet client: MongoClient | null = null\nlet clientPromise: Promise<MongoClient> | null = null\n\nfunction getClientPromise(): Promise<MongoClient> {\n  if (!uri) {\n    throw new Error('Please define the MONGODB_URI environment variable')\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    let globalWithMongo = global as typeof globalThis & {\n      _mongoClientPromise?: Promise<MongoClient>\n    }\n\n    if (!globalWithMongo._mongoClientPromise) {\n      client = new MongoClient(uri, options)\n      globalWithMongo._mongoClientPromise = client.connect()\n    }\n    return globalWithMongo._mongoClientPromise\n  } else {\n    if (!clientPromise) {\n      client = new MongoClient(uri, options)\n      clientPromise = client.connect()\n    }\n    return clientPromise\n  }\n}\n\nexport async function getDatabase(): Promise<Db> {\n  const client = await getClientPromise()\n  return client.db('kayo')\n}","import { getDatabase } from '@db/lib/mongodb'\nimport { Admin } from '@db/models/Admin'\nimport bcrypt from 'bcryptjs'\nimport jwt, { type Secret, type SignOptions, type JwtPayload } from 'jsonwebtoken'\nimport { ObjectId } from 'mongodb'\n\ntype DbAdmin = Omit<Admin, '_id'> & { _id: ObjectId }\n\nconst JWT_SECRET: Secret = (process.env.JWT_SECRET || 'dev-secret-key') as Secret\n\nexport async function validateAdmin(email: string, password: string): Promise<Admin | null> {\n  const db = await getDatabase()\n  const collection = db.collection<DbAdmin>('admins')\n  const admin = await collection.findOne({ email })\n  \n  if (!admin) return null\n  \n  const isValid = await bcrypt.compare(password, admin.password)\n  if (!isValid) return null\n  \n  return { ...admin, _id: admin._id.toString() }\n}\n\nexport function generateToken(adminId: string): string {\n  const options: SignOptions = { expiresIn: (process.env.JWT_EXPIRES_IN || '7d') as any }\n  return jwt.sign({ adminId }, JWT_SECRET, options)\n}\n\nexport function verifyToken(token: string): { adminId: string } | null {\n  try {\n    const payload = jwt.verify(token, JWT_SECRET) as JwtPayload & { adminId: string }\n    return { adminId: payload.adminId }\n  } catch {\n    return null\n  }\n}\n\nexport async function createAdmin(email: string, password: string, name: string): Promise<Admin> {\n  const db = await getDatabase()\n  const hashedPassword = await bcrypt.hash(password, 12)\n  \n  const adminData = {\n    email,\n    password: hashedPassword,\n    name,\n    role: 'admin' as const,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  }\n  \n  const result = await db.collection('admins').insertOne(adminData)\n  return { ...adminData, _id: result.insertedId.toString() }\n}","import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { verifyToken } from '@/lib/services/auth'\n\nexport function middleware(request: NextRequest) {\n  // Check if the request is for admin routes\n  if (request.nextUrl.pathname.startsWith('/admin')) {\n    // Allow login page\n    if (request.nextUrl.pathname === '/admin/login') {\n      return NextResponse.next()\n    }\n\n    // Check for auth token\n    const token = request.cookies.get('auth-token')?.value\n\n    if (!token) {\n      return NextResponse.redirect(new URL('/admin/login', request.url))\n    }\n\n    // Verify token\n    const payload = verifyToken(token)\n    if (!payload) {\n      return NextResponse.redirect(new URL('/admin/login', request.url))\n    }\n  }\n\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: '/admin/:path*'\n}","import \"next/dist/server/web/globals\";\nimport { adapter } from \"next/dist/server/web/adapter\";\n// Import the userland code.\nimport * as _mod from \"private-next-root-dir/middleware.ts\";\nconst mod = {\n    ..._mod\n};\nconst handler = mod.middleware || mod.default;\nconst page = \"/middleware\";\nif (typeof handler !== \"function\") {\n    throw new Error(`The Middleware \"${page}\" must export a \\`middleware\\` or a \\`default\\` function`);\n}\nexport default function nHandler(opts) {\n    return adapter({\n        ...opts,\n        page,\n        handler\n    });\n}\n\n//# sourceMappingURL=middleware.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst index_1 = __importDefault(require(\"./index\"));\nconst memory_code_points_1 = require(\"./memory-code-points\");\nconst code_points_data_browser_1 = __importDefault(require(\"./code-points-data-browser\"));\nconst codePoints = (0, memory_code_points_1.createMemoryCodePoints)(code_points_data_browser_1.default);\nconst saslprep = index_1.default.bind(null, codePoints);\nObject.assign(saslprep, { saslprep, default: saslprep });\nmodule.exports = saslprep;\n//# sourceMappingURL=browser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst data = Buffer.from('AAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAP////AAAAAAAAAAAAAAADAAAAAAAAAAH//wAAAAAAAAAAAAD//wAA893wFAAAIAAAAAABAAAAAAH/AAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAEAAAAAAz8AAP////+AAAAAAYCAAAAAAJ+AACAAACAH/wAAAB8H///3/+6AAAAfAAAD/wAAAAAAAAAAAAAAAAAAAAAAAwABAAIAAAAHAAAAH////////wAAAAAAAD///////////////////////////////////////////////////////4gAAAAAAAAwAAMHAAAAf/+IBmAAAEBcNAZj/vIMAAAf2B5gAABASTQeY/+F/AAH/4gKIAAAQEgwAiN//3wA//+IBmAAAEBMMA5j/PI8AH//yBxDlOccAjwcQ/7//gAf/4gEQAAAQAg8BEP5/zwA///IBEAAAEAIPARD+f08AP//yARAAABAADwMQ/7/PAD//8gAAcAAACALAd4FAP//x/+AAAAAAAAAHgAAAA//////llvwgIrIACMFAwAz/////wAAAAAAAAAAAIAAAAAfgAAADwCAAAAABAAG////////AAAAACCQHD8AAAA///////////8AAAAAA/8AAAAAAG8AAAAAAAAAAAAAAD4AAAAAAAAAAB8AAAAAAAAAAAAAPwEAAAAAAAAAAUMBQwAAAAABQwAAAAFDAUMBAQAAAQAAAAFDAQAAAAABAAAfgAAAB/////8AAAAAAAAAAAAAB/+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/wAAAAcAAAAAAAAAAAAAf/8ABAf/AAAB/wAAD/8ABE//AAAAAAAAAAAAAAAHAD///wABAD8AAAAAAAAAAAAAAP8AAAAAAD///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAAAAAAAAAAAA/AAADAwAAAAADAwCqAAAAAwAAAAAAAAQABAAMCAAAxAEAAAAAAAAAAAAAHv4PwDAAAAH//wAAP////wAAAB///wAAAAAAAAAYAA/gAAAAAAAP/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////wAAAAAB////AB///wAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyAAAAAAAAAAAAAAAADAD///////////////////4QwAAAAgAAAAAodAYAAAAAAAAcAAACAAf//AAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wAAACAAAAAAAAAAAAAAD/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///8ADwAAAAAAAAAAgAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAA+AAAAAAHgAAAAAAAAAAAAAABAAAAAAD/////////AAAAAAAHAAAAAA//gAAAAAAOAAAAAAAAAAAADwAAAAAAAQAAAAAAAAAAAAAAAAAAAewcwwAAAAAAAAAAwAAAAAAAAP8AAAAAAAcAAP//D/8AAAGAEAABDwQAAAAAAAAAAAAAAAAAAAAABoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcDAwMcBAf+A////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAAAAQ//AAAAH/////////////////////////////8AAAAAAwwAAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////////////////////////////////////////////////wAAAAAAAAAAAAAEAAAAAAAAAAAE2YQAKEgAAAAAAAAAAhgEBAAAACEFwwfzzzy/////AAAAAAAAAAAAAAAA/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAAAAAggwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfwgwwwwwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKQAP///+D4AAAAABF////g/+AAAAAHf////////////////AQGAAA+//y////4AAAAAAAAAAAAAP/////8AEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF/7/++tv/////////////////wAAAAB////////////////////////////////////////////////////////////wAAP//////////P////////wAAAAAA//gAAAAAAAAAAAAAAAAAAPv/////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAAAAAAAAAAf///4H///+AAAAAAACAEIP///v////7/////////////////////////////////////////////////v//wAAAA///////////////8/5/AAMAA+AIAAAAAAAAAAAAAAAAAAAAAACAC6///3//////+//////wA/////////////////////+A///////////7//////MD//wAAAAB//////n9//////0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABf////////HgHiA/8//gAA3+Z///7+jw4GYAQ3D/8/gB+Gf//+/tsOAAAB6A/84ABf13///v7fHgFiAAIP/AAA3+Z///7+zxoGYAQ3D/4AAF+O8axjj/cNjuAEAAf/gAHf7v///v/fAeAAAAMP/AAA3+7///7/3wvmwBgLD/wAAN/u///+//8ODuAEAw/8AADf//j///9/0/gHA/wAAOAB///////+wAP4B//AAAAAAaaQPf3U3sAT6AP/MAAAAAP///z////qD/3/////gAAEE8AAAAAAAA/35AAAAAAAA/////99oQID///8AAAAAAAAAAAD//////AD//////5D//////////////8H//////////+D/////////////wP7//////////rz+vP/////+vP////68/rz+/v///v////68/v/////+///gf///+AAAAAD/////////////+AB////////////////////////////////////////////////////////////////////////////////////////////////////////+AH///+D/////////////gAD/+8AA///GAP//wAD/+4AA/////////gP9gA/o/8AAAAAA/8D//////////////wD//////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////w///////////////A///8/P/////8/P9V/////P////////v6O/jz8P/4O/gAAgAAAAAAAAAAAAAAAEABAAAAAAAAAAAAAAAAAAAAACE/9HwKvd/HB8AAAP/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////gAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAB/wHz4f/////////////4Hf//////////////vB//////4f//////////////+//////8AAAAAAAAA///////4//////AAAAD////x////////gAD/8P///////v///////////////////h////////////////zggf///4AP//////////////j8/PzgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////vAA////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////P/////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////////////8AP/////+P/////////4/4AAYD////8P///////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////7///////////7Jnv/17f//////////efgwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////w=', 'base64');\nexports.default = data;\n//# sourceMappingURL=code-points-data-browser.js.map","\"use strict\";\nconst getCodePoint = (character) => character.codePointAt(0);\nconst first = (x) => x[0];\nconst last = (x) => x[x.length - 1];\nfunction toCodePoints(input) {\n    const codepoints = [];\n    const size = input.length;\n    for (let i = 0; i < size; i += 1) {\n        const before = input.charCodeAt(i);\n        if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n            const next = input.charCodeAt(i + 1);\n            if (next >= 0xdc00 && next <= 0xdfff) {\n                codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n                i += 1;\n                continue;\n            }\n        }\n        codepoints.push(before);\n    }\n    return codepoints;\n}\nfunction saslprep({ unassigned_code_points, commonly_mapped_to_nothing, non_ASCII_space_characters, prohibited_characters, bidirectional_r_al, bidirectional_l, }, input, opts = {}) {\n    const mapping2space = non_ASCII_space_characters;\n    const mapping2nothing = commonly_mapped_to_nothing;\n    if (typeof input !== 'string') {\n        throw new TypeError('Expected string.');\n    }\n    if (input.length === 0) {\n        return '';\n    }\n    const mapped_input = toCodePoints(input)\n        .map((character) => (mapping2space.get(character) ? 0x20 : character))\n        .filter((character) => !mapping2nothing.get(character));\n    const normalized_input = String.fromCodePoint\n        .apply(null, mapped_input)\n        .normalize('NFKC');\n    const normalized_map = toCodePoints(normalized_input);\n    const hasProhibited = normalized_map.some((character) => prohibited_characters.get(character));\n    if (hasProhibited) {\n        throw new Error('Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3');\n    }\n    if (opts.allowUnassigned !== true) {\n        const hasUnassigned = normalized_map.some((character) => unassigned_code_points.get(character));\n        if (hasUnassigned) {\n            throw new Error('Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5');\n        }\n    }\n    const hasBidiRAL = normalized_map.some((character) => bidirectional_r_al.get(character));\n    const hasBidiL = normalized_map.some((character) => bidirectional_l.get(character));\n    if (hasBidiRAL && hasBidiL) {\n        throw new Error('String must not contain RandALCat and LCat at the same time,' +\n            ' see https://tools.ietf.org/html/rfc3454#section-6');\n    }\n    const isFirstBidiRAL = bidirectional_r_al.get(getCodePoint(first(normalized_input)));\n    const isLastBidiRAL = bidirectional_r_al.get(getCodePoint(last(normalized_input)));\n    if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n        throw new Error('Bidirectional RandALCat character must be the first and the last' +\n            ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6');\n    }\n    return normalized_input;\n}\nsaslprep.saslprep = saslprep;\nsaslprep.default = saslprep;\nmodule.exports = saslprep;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMemoryCodePoints = createMemoryCodePoints;\nconst sparse_bitfield_1 = __importDefault(require(\"sparse-bitfield\"));\nfunction createMemoryCodePoints(data) {\n    let offset = 0;\n    function read() {\n        const size = data.readUInt32BE(offset);\n        offset += 4;\n        const codepoints = data.slice(offset, offset + size);\n        offset += size;\n        return (0, sparse_bitfield_1.default)({ buffer: codepoints });\n    }\n    const unassigned_code_points = read();\n    const commonly_mapped_to_nothing = read();\n    const non_ASCII_space_characters = read();\n    const prohibited_characters = read();\n    const bidirectional_r_al = read();\n    const bidirectional_l = read();\n    return {\n        unassigned_code_points,\n        commonly_mapped_to_nothing,\n        non_ASCII_space_characters,\n        prohibited_characters,\n        bidirectional_r_al,\n        bidirectional_l,\n    };\n}\n//# sourceMappingURL=memory-code-points.js.map","/*\r\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\r\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\r\n Copyright (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions\r\n are met:\r\n 1. Redistributions of source code must retain the above copyright\r\n notice, this list of conditions and the following disclaimer.\r\n 2. Redistributions in binary form must reproduce the above copyright\r\n notice, this list of conditions and the following disclaimer in the\r\n documentation and/or other materials provided with the distribution.\r\n 3. The name of the author may not be used to endorse or promote products\r\n derived from this software without specific prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\r\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @license bcrypt.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/bcrypt.js for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\r\n        define([], factory);\r\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\r\n        module[\"exports\"] = factory();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"bcrypt\"] = factory();\r\n\r\n}(this, function() {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * bcrypt namespace.\r\n     * @type {Object.<string,*>}\r\n     */\r\n    var bcrypt = {};\r\n\r\n    /**\r\n     * The random implementation to use as a fallback.\r\n     * @type {?function(number):!Array.<number>}\r\n     * @inner\r\n     */\r\n    var randomFallback = null;\r\n\r\n    /**\r\n     * Generates cryptographically secure random bytes.\r\n     * @function\r\n     * @param {number} len Bytes length\r\n     * @returns {!Array.<number>} Random bytes\r\n     * @throws {Error} If no random implementation is available\r\n     * @inner\r\n     */\r\n    function random(len) {\r\n        /* node */ if (typeof module !== 'undefined' && module && module['exports'])\r\n            try {\r\n                return require(\"crypto\")['randomBytes'](len);\r\n            } catch (e) {}\r\n        /* WCA */ try {\r\n            var a; (self['crypto']||self['msCrypto'])['getRandomValues'](a = new Uint32Array(len));\r\n            return Array.prototype.slice.call(a);\r\n        } catch (e) {}\r\n        /* fallback */ if (!randomFallback)\r\n            throw Error(\"Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative\");\r\n        return randomFallback(len);\r\n    }\r\n\r\n    // Test if any secure randomness source is available\r\n    var randomAvailable = false;\r\n    try {\r\n        random(1);\r\n        randomAvailable = true;\r\n    } catch (e) {}\r\n\r\n    // Default fallback, if any\r\n    randomFallback = null;\r\n    /**\r\n     * Sets the pseudo random number generator to use as a fallback if neither node's `crypto` module nor the Web Crypto\r\n     *  API is available. Please note: It is highly important that the PRNG used is cryptographically secure and that it\r\n     *  is seeded properly!\r\n     * @param {?function(number):!Array.<number>} random Function taking the number of bytes to generate as its\r\n     *  sole argument, returning the corresponding array of cryptographically secure random byte values.\r\n     * @see http://nodejs.org/api/crypto.html\r\n     * @see http://www.w3.org/TR/WebCryptoAPI/\r\n     */\r\n    bcrypt.setRandomFallback = function(random) {\r\n        randomFallback = random;\r\n    };\r\n\r\n    /**\r\n     * Synchronously generates a salt.\r\n     * @param {number=} rounds Number of rounds to use, defaults to 10 if omitted\r\n     * @param {number=} seed_length Not supported.\r\n     * @returns {string} Resulting salt\r\n     * @throws {Error} If a random fallback is required but not set\r\n     * @expose\r\n     */\r\n    bcrypt.genSaltSync = function(rounds, seed_length) {\r\n        rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;\r\n        if (typeof rounds !== 'number')\r\n            throw Error(\"Illegal arguments: \"+(typeof rounds)+\", \"+(typeof seed_length));\r\n        if (rounds < 4)\r\n            rounds = 4;\r\n        else if (rounds > 31)\r\n            rounds = 31;\r\n        var salt = [];\r\n        salt.push(\"$2a$\");\r\n        if (rounds < 10)\r\n            salt.push(\"0\");\r\n        salt.push(rounds.toString());\r\n        salt.push('$');\r\n        salt.push(base64_encode(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)); // May throw\r\n        return salt.join('');\r\n    };\r\n\r\n    /**\r\n     * Asynchronously generates a salt.\r\n     * @param {(number|function(Error, string=))=} rounds Number of rounds to use, defaults to 10 if omitted\r\n     * @param {(number|function(Error, string=))=} seed_length Not supported.\r\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting salt\r\n     * @returns {!Promise} If `callback` has been omitted\r\n     * @throws {Error} If `callback` is present but not a function\r\n     * @expose\r\n     */\r\n    bcrypt.genSalt = function(rounds, seed_length, callback) {\r\n        if (typeof seed_length === 'function')\r\n            callback = seed_length,\r\n            seed_length = undefined; // Not supported.\r\n        if (typeof rounds === 'function')\r\n            callback = rounds,\r\n            rounds = undefined;\r\n        if (typeof rounds === 'undefined')\r\n            rounds = GENSALT_DEFAULT_LOG2_ROUNDS;\r\n        else if (typeof rounds !== 'number')\r\n            throw Error(\"illegal arguments: \"+(typeof rounds));\r\n\r\n        function _async(callback) {\r\n            nextTick(function() { // Pretty thin, but salting is fast enough\r\n                try {\r\n                    callback(null, bcrypt.genSaltSync(rounds));\r\n                } catch (err) {\r\n                    callback(err);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (callback) {\r\n            if (typeof callback !== 'function')\r\n                throw Error(\"Illegal callback: \"+typeof(callback));\r\n            _async(callback);\r\n        } else\r\n            return new Promise(function(resolve, reject) {\r\n                _async(function(err, res) {\r\n                    if (err) {\r\n                        reject(err);\r\n                        return;\r\n                    }\r\n                    resolve(res);\r\n                });\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Synchronously generates a hash for the given string.\r\n     * @param {string} s String to hash\r\n     * @param {(number|string)=} salt Salt length to generate or salt to use, default to 10\r\n     * @returns {string} Resulting hash\r\n     * @expose\r\n     */\r\n    bcrypt.hashSync = function(s, salt) {\r\n        if (typeof salt === 'undefined')\r\n            salt = GENSALT_DEFAULT_LOG2_ROUNDS;\r\n        if (typeof salt === 'number')\r\n            salt = bcrypt.genSaltSync(salt);\r\n        if (typeof s !== 'string' || typeof salt !== 'string')\r\n            throw Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof salt));\r\n        return _hash(s, salt);\r\n    };\r\n\r\n    /**\r\n     * Asynchronously generates a hash for the given string.\r\n     * @param {string} s String to hash\r\n     * @param {number|string} salt Salt length to generate or salt to use\r\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash\r\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\r\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\r\n     * @returns {!Promise} If `callback` has been omitted\r\n     * @throws {Error} If `callback` is present but not a function\r\n     * @expose\r\n     */\r\n    bcrypt.hash = function(s, salt, callback, progressCallback) {\r\n\r\n        function _async(callback) {\r\n            if (typeof s === 'string' && typeof salt === 'number')\r\n                bcrypt.genSalt(salt, function(err, salt) {\r\n                    _hash(s, salt, callback, progressCallback);\r\n                });\r\n            else if (typeof s === 'string' && typeof salt === 'string')\r\n                _hash(s, salt, callback, progressCallback);\r\n            else\r\n                nextTick(callback.bind(this, Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof salt))));\r\n        }\r\n\r\n        if (callback) {\r\n            if (typeof callback !== 'function')\r\n                throw Error(\"Illegal callback: \"+typeof(callback));\r\n            _async(callback);\r\n        } else\r\n            return new Promise(function(resolve, reject) {\r\n                _async(function(err, res) {\r\n                    if (err) {\r\n                        reject(err);\r\n                        return;\r\n                    }\r\n                    resolve(res);\r\n                });\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Compares two strings of the same length in constant time.\r\n     * @param {string} known Must be of the correct length\r\n     * @param {string} unknown Must be the same length as `known`\r\n     * @returns {boolean}\r\n     * @inner\r\n     */\r\n    function safeStringCompare(known, unknown) {\r\n        var right = 0,\r\n            wrong = 0;\r\n        for (var i=0, k=known.length; i<k; ++i) {\r\n            if (known.charCodeAt(i) === unknown.charCodeAt(i))\r\n                ++right;\r\n            else\r\n                ++wrong;\r\n        }\r\n        // Prevent removal of unused variables (never true, actually)\r\n        if (right < 0)\r\n            return false;\r\n        return wrong === 0;\r\n    }\r\n\r\n    /**\r\n     * Synchronously tests a string against a hash.\r\n     * @param {string} s String to compare\r\n     * @param {string} hash Hash to test against\r\n     * @returns {boolean} true if matching, otherwise false\r\n     * @throws {Error} If an argument is illegal\r\n     * @expose\r\n     */\r\n    bcrypt.compareSync = function(s, hash) {\r\n        if (typeof s !== \"string\" || typeof hash !== \"string\")\r\n            throw Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof hash));\r\n        if (hash.length !== 60)\r\n            return false;\r\n        return safeStringCompare(bcrypt.hashSync(s, hash.substr(0, hash.length-31)), hash);\r\n    };\r\n\r\n    /**\r\n     * Asynchronously compares the given data against the given hash.\r\n     * @param {string} s Data to compare\r\n     * @param {string} hash Data to be compared to\r\n     * @param {function(Error, boolean)=} callback Callback receiving the error, if any, otherwise the result\r\n     * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\r\n     *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\r\n     * @returns {!Promise} If `callback` has been omitted\r\n     * @throws {Error} If `callback` is present but not a function\r\n     * @expose\r\n     */\r\n    bcrypt.compare = function(s, hash, callback, progressCallback) {\r\n\r\n        function _async(callback) {\r\n            if (typeof s !== \"string\" || typeof hash !== \"string\") {\r\n                nextTick(callback.bind(this, Error(\"Illegal arguments: \"+(typeof s)+', '+(typeof hash))));\r\n                return;\r\n            }\r\n            if (hash.length !== 60) {\r\n                nextTick(callback.bind(this, null, false));\r\n                return;\r\n            }\r\n            bcrypt.hash(s, hash.substr(0, 29), function(err, comp) {\r\n                if (err)\r\n                    callback(err);\r\n                else\r\n                    callback(null, safeStringCompare(comp, hash));\r\n            }, progressCallback);\r\n        }\r\n\r\n        if (callback) {\r\n            if (typeof callback !== 'function')\r\n                throw Error(\"Illegal callback: \"+typeof(callback));\r\n            _async(callback);\r\n        } else\r\n            return new Promise(function(resolve, reject) {\r\n                _async(function(err, res) {\r\n                    if (err) {\r\n                        reject(err);\r\n                        return;\r\n                    }\r\n                    resolve(res);\r\n                });\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Gets the number of rounds used to encrypt the specified hash.\r\n     * @param {string} hash Hash to extract the used number of rounds from\r\n     * @returns {number} Number of rounds used\r\n     * @throws {Error} If `hash` is not a string\r\n     * @expose\r\n     */\r\n    bcrypt.getRounds = function(hash) {\r\n        if (typeof hash !== \"string\")\r\n            throw Error(\"Illegal arguments: \"+(typeof hash));\r\n        return parseInt(hash.split(\"$\")[2], 10);\r\n    };\r\n\r\n    /**\r\n     * Gets the salt portion from a hash. Does not validate the hash.\r\n     * @param {string} hash Hash to extract the salt from\r\n     * @returns {string} Extracted salt part\r\n     * @throws {Error} If `hash` is not a string or otherwise invalid\r\n     * @expose\r\n     */\r\n    bcrypt.getSalt = function(hash) {\r\n        if (typeof hash !== 'string')\r\n            throw Error(\"Illegal arguments: \"+(typeof hash));\r\n        if (hash.length !== 60)\r\n            throw Error(\"Illegal hash length: \"+hash.length+\" != 60\");\r\n        return hash.substring(0, 29);\r\n    };\r\n\r\n    /**\r\n     * Continues with the callback on the next tick.\r\n     * @function\r\n     * @param {function(...[*])} callback Callback to execute\r\n     * @inner\r\n     */\r\n    var nextTick = typeof process !== 'undefined' && process && typeof process.nextTick === 'function'\r\n        ? (typeof setImmediate === 'function' ? setImmediate : process.nextTick)\r\n        : setTimeout;\r\n\r\n    /**\r\n     * Converts a JavaScript string to UTF8 bytes.\r\n     * @param {string} str String\r\n     * @returns {!Array.<number>} UTF8 bytes\r\n     * @inner\r\n     */\r\n    function stringToBytes(str) {\r\n        var out = [],\r\n            i = 0;\r\n        utfx.encodeUTF16toUTF8(function() {\r\n            if (i >= str.length) return null;\r\n            return str.charCodeAt(i++);\r\n        }, function(b) {\r\n            out.push(b);\r\n        });\r\n        return out;\r\n    }\r\n\r\n    // A base64 implementation for the bcrypt algorithm. This is partly non-standard.\r\n\r\n    /**\r\n     * bcrypt's own non-standard base64 dictionary.\r\n     * @type {!Array.<string>}\r\n     * @const\r\n     * @inner\r\n     **/\r\n    var BASE64_CODE = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split('');\r\n\r\n    /**\r\n     * @type {!Array.<number>}\r\n     * @const\r\n     * @inner\r\n     **/\r\n    var BASE64_INDEX = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,\r\n        1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1,\r\n        -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\r\n        20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30,\r\n        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\r\n        48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1];\r\n\r\n    /**\r\n     * @type {!function(...number):string}\r\n     * @inner\r\n     */\r\n    var stringFromCharCode = String.fromCharCode;\r\n\r\n    /**\r\n     * Encodes a byte array to base64 with up to len bytes of input.\r\n     * @param {!Array.<number>} b Byte array\r\n     * @param {number} len Maximum input length\r\n     * @returns {string}\r\n     * @inner\r\n     */\r\n    function base64_encode(b, len) {\r\n        var off = 0,\r\n            rs = [],\r\n            c1, c2;\r\n        if (len <= 0 || len > b.length)\r\n            throw Error(\"Illegal len: \"+len);\r\n        while (off < len) {\r\n            c1 = b[off++] & 0xff;\r\n            rs.push(BASE64_CODE[(c1 >> 2) & 0x3f]);\r\n            c1 = (c1 & 0x03) << 4;\r\n            if (off >= len) {\r\n                rs.push(BASE64_CODE[c1 & 0x3f]);\r\n                break;\r\n            }\r\n            c2 = b[off++] & 0xff;\r\n            c1 |= (c2 >> 4) & 0x0f;\r\n            rs.push(BASE64_CODE[c1 & 0x3f]);\r\n            c1 = (c2 & 0x0f) << 2;\r\n            if (off >= len) {\r\n                rs.push(BASE64_CODE[c1 & 0x3f]);\r\n                break;\r\n            }\r\n            c2 = b[off++] & 0xff;\r\n            c1 |= (c2 >> 6) & 0x03;\r\n            rs.push(BASE64_CODE[c1 & 0x3f]);\r\n            rs.push(BASE64_CODE[c2 & 0x3f]);\r\n        }\r\n        return rs.join('');\r\n    }\r\n\r\n    /**\r\n     * Decodes a base64 encoded string to up to len bytes of output.\r\n     * @param {string} s String to decode\r\n     * @param {number} len Maximum output length\r\n     * @returns {!Array.<number>}\r\n     * @inner\r\n     */\r\n    function base64_decode(s, len) {\r\n        var off = 0,\r\n            slen = s.length,\r\n            olen = 0,\r\n            rs = [],\r\n            c1, c2, c3, c4, o, code;\r\n        if (len <= 0)\r\n            throw Error(\"Illegal len: \"+len);\r\n        while (off < slen - 1 && olen < len) {\r\n            code = s.charCodeAt(off++);\r\n            c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\r\n            code = s.charCodeAt(off++);\r\n            c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\r\n            if (c1 == -1 || c2 == -1)\r\n                break;\r\n            o = (c1 << 2) >>> 0;\r\n            o |= (c2 & 0x30) >> 4;\r\n            rs.push(stringFromCharCode(o));\r\n            if (++olen >= len || off >= slen)\r\n                break;\r\n            code = s.charCodeAt(off++);\r\n            c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\r\n            if (c3 == -1)\r\n                break;\r\n            o = ((c2 & 0x0f) << 4) >>> 0;\r\n            o |= (c3 & 0x3c) >> 2;\r\n            rs.push(stringFromCharCode(o));\r\n            if (++olen >= len || off >= slen)\r\n                break;\r\n            code = s.charCodeAt(off++);\r\n            c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\r\n            o = ((c3 & 0x03) << 6) >>> 0;\r\n            o |= c4;\r\n            rs.push(stringFromCharCode(o));\r\n            ++olen;\r\n        }\r\n        var res = [];\r\n        for (off = 0; off<olen; off++)\r\n            res.push(rs[off].charCodeAt(0));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n     * Released under the Apache License, Version 2.0\r\n     * see: https://github.com/dcodeIO/utfx for details\r\n     */\r\n    var utfx = function() {\r\n        \"use strict\";\r\n\r\n        /**\r\n         * utfx namespace.\r\n         * @inner\r\n         * @type {!Object.<string,*>}\r\n         */\r\n        var utfx = {};\r\n\r\n        /**\r\n         * Maximum valid code point.\r\n         * @type {number}\r\n         * @const\r\n         */\r\n        utfx.MAX_CODEPOINT = 0x10FFFF;\r\n\r\n        /**\r\n         * Encodes UTF8 code points to UTF8 bytes.\r\n         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n         *  respectively `null` if there are no more code points left or a single numeric code point.\r\n         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\r\n         */\r\n        utfx.encodeUTF8 = function(src, dst) {\r\n            var cp = null;\r\n            if (typeof src === 'number')\r\n                cp = src,\r\n                src = function() { return null; };\r\n            while (cp !== null || (cp = src()) !== null) {\r\n                if (cp < 0x80)\r\n                    dst(cp&0x7F);\r\n                else if (cp < 0x800)\r\n                    dst(((cp>>6)&0x1F)|0xC0),\r\n                    dst((cp&0x3F)|0x80);\r\n                else if (cp < 0x10000)\r\n                    dst(((cp>>12)&0x0F)|0xE0),\r\n                    dst(((cp>>6)&0x3F)|0x80),\r\n                    dst((cp&0x3F)|0x80);\r\n                else\r\n                    dst(((cp>>18)&0x07)|0xF0),\r\n                    dst(((cp>>12)&0x3F)|0x80),\r\n                    dst(((cp>>6)&0x3F)|0x80),\r\n                    dst((cp&0x3F)|0x80);\r\n                cp = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Decodes UTF8 bytes to UTF8 code points.\r\n         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n         *  are no more bytes left.\r\n         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.\r\n         * @throws {RangeError} If a starting byte is invalid in UTF8\r\n         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\r\n         *  remaining bytes.\r\n         */\r\n        utfx.decodeUTF8 = function(src, dst) {\r\n            var a, b, c, d, fail = function(b) {\r\n                b = b.slice(0, b.indexOf(null));\r\n                var err = Error(b.toString());\r\n                err.name = \"TruncatedError\";\r\n                err['bytes'] = b;\r\n                throw err;\r\n            };\r\n            while ((a = src()) !== null) {\r\n                if ((a&0x80) === 0)\r\n                    dst(a);\r\n                else if ((a&0xE0) === 0xC0)\r\n                    ((b = src()) === null) && fail([a, b]),\r\n                    dst(((a&0x1F)<<6) | (b&0x3F));\r\n                else if ((a&0xF0) === 0xE0)\r\n                    ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),\r\n                    dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));\r\n                else if ((a&0xF8) === 0xF0)\r\n                    ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),\r\n                    dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));\r\n                else throw RangeError(\"Illegal starting byte: \"+a);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Converts UTF16 characters to UTF8 code points.\r\n         * @param {!function():number|null} src Characters source as a function returning the next char code respectively\r\n         *  `null` if there are no more characters left.\r\n         * @param {!function(number)} dst Code points destination as a function successively called with each converted code\r\n         *  point.\r\n         */\r\n        utfx.UTF16toUTF8 = function(src, dst) {\r\n            var c1, c2 = null;\r\n            while (true) {\r\n                if ((c1 = c2 !== null ? c2 : src()) === null)\r\n                    break;\r\n                if (c1 >= 0xD800 && c1 <= 0xDFFF) {\r\n                    if ((c2 = src()) !== null) {\r\n                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {\r\n                            dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);\r\n                            c2 = null; continue;\r\n                        }\r\n                    }\r\n                }\r\n                dst(c1);\r\n            }\r\n            if (c2 !== null) dst(c2);\r\n        };\r\n\r\n        /**\r\n         * Converts UTF8 code points to UTF16 characters.\r\n         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n         *  respectively `null` if there are no more code points left or a single numeric code point.\r\n         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n         * @throws {RangeError} If a code point is out of range\r\n         */\r\n        utfx.UTF8toUTF16 = function(src, dst) {\r\n            var cp = null;\r\n            if (typeof src === 'number')\r\n                cp = src, src = function() { return null; };\r\n            while (cp !== null || (cp = src()) !== null) {\r\n                if (cp <= 0xFFFF)\r\n                    dst(cp);\r\n                else\r\n                    cp -= 0x10000,\r\n                    dst((cp>>10)+0xD800),\r\n                    dst((cp%0x400)+0xDC00);\r\n                cp = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Converts and encodes UTF16 characters to UTF8 bytes.\r\n         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\r\n         *  if there are no more characters left.\r\n         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\r\n         */\r\n        utfx.encodeUTF16toUTF8 = function(src, dst) {\r\n            utfx.UTF16toUTF8(src, function(cp) {\r\n                utfx.encodeUTF8(cp, dst);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Decodes and converts UTF8 bytes to UTF16 characters.\r\n         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n         *  are no more bytes left.\r\n         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n         * @throws {RangeError} If a starting byte is invalid in UTF8\r\n         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\r\n         */\r\n        utfx.decodeUTF8toUTF16 = function(src, dst) {\r\n            utfx.decodeUTF8(src, function(cp) {\r\n                utfx.UTF8toUTF16(cp, dst);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Calculates the byte length of an UTF8 code point.\r\n         * @param {number} cp UTF8 code point\r\n         * @returns {number} Byte length\r\n         */\r\n        utfx.calculateCodePoint = function(cp) {\r\n            return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;\r\n        };\r\n\r\n        /**\r\n         * Calculates the number of UTF8 bytes required to store UTF8 code points.\r\n         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively\r\n         *  `null` if there are no more code points left.\r\n         * @returns {number} The number of UTF8 bytes required\r\n         */\r\n        utfx.calculateUTF8 = function(src) {\r\n            var cp, l=0;\r\n            while ((cp = src()) !== null)\r\n                l += utfx.calculateCodePoint(cp);\r\n            return l;\r\n        };\r\n\r\n        /**\r\n         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\r\n         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively\r\n         *  `null` if there are no more characters left.\r\n         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\r\n         */\r\n        utfx.calculateUTF16asUTF8 = function(src) {\r\n            var n=0, l=0;\r\n            utfx.UTF16toUTF8(src, function(cp) {\r\n                ++n; l += utfx.calculateCodePoint(cp);\r\n            });\r\n            return [n,l];\r\n        };\r\n\r\n        return utfx;\r\n    }();\r\n\r\n    Date.now = Date.now || function() { return +new Date; };\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var BCRYPT_SALT_LEN = 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var GENSALT_DEFAULT_LOG2_ROUNDS = 10;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var BLOWFISH_NUM_ROUNDS = 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var MAX_EXECUTION_TIME = 100;\r\n\r\n    /**\r\n     * @type {Array.<number>}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var P_ORIG = [\r\n        0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822,\r\n        0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377,\r\n        0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5,\r\n        0xb5470917, 0x9216d5d9, 0x8979fb1b\r\n    ];\r\n\r\n    /**\r\n     * @type {Array.<number>}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var S_ORIG = [\r\n        0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed,\r\n        0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,\r\n        0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3,\r\n        0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,\r\n        0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023,\r\n        0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\r\n        0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda,\r\n        0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,\r\n        0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af,\r\n        0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6,\r\n        0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381,\r\n        0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\r\n        0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d,\r\n        0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5,\r\n        0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a,\r\n        0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,\r\n        0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c,\r\n        0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\r\n        0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3,\r\n        0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,\r\n        0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724,\r\n        0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b,\r\n        0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd,\r\n        0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\r\n        0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f,\r\n        0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd,\r\n        0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39,\r\n        0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,\r\n        0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df,\r\n        0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\r\n        0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e,\r\n        0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,\r\n        0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98,\r\n        0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565,\r\n        0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341,\r\n        0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\r\n        0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0,\r\n        0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64,\r\n        0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191,\r\n        0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,\r\n        0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0,\r\n        0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\r\n        0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5,\r\n        0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,\r\n        0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b,\r\n        0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f,\r\n        0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968,\r\n        0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\r\n        0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5,\r\n        0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6,\r\n        0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799,\r\n        0x6e85076a, 0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,\r\n        0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71,\r\n        0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,\r\n        0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6,\r\n        0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\r\n        0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f,\r\n        0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286,\r\n        0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec,\r\n        0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\r\n        0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9,\r\n        0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,\r\n        0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e,\r\n        0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,\r\n        0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290,\r\n        0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,\r\n        0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6,\r\n        0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\r\n        0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847,\r\n        0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451,\r\n        0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6,\r\n        0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\r\n        0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570,\r\n        0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,\r\n        0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978,\r\n        0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,\r\n        0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708,\r\n        0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,\r\n        0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185,\r\n        0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\r\n        0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830,\r\n        0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239,\r\n        0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab,\r\n        0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\r\n        0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19,\r\n        0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,\r\n        0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1,\r\n        0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,\r\n        0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef,\r\n        0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,\r\n        0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15,\r\n        0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\r\n        0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2,\r\n        0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492,\r\n        0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174,\r\n        0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\r\n        0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759,\r\n        0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,\r\n        0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc,\r\n        0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,\r\n        0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465,\r\n        0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,\r\n        0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c,\r\n        0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,\r\n        0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e,\r\n        0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,\r\n        0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0,\r\n        0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\r\n        0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462,\r\n        0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c,\r\n        0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399,\r\n        0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\r\n        0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74,\r\n        0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,\r\n        0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7,\r\n        0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,\r\n        0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802,\r\n        0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,\r\n        0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4,\r\n        0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\r\n        0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2,\r\n        0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1,\r\n        0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c,\r\n        0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\r\n        0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341,\r\n        0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,\r\n        0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b,\r\n        0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,\r\n        0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88,\r\n        0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,\r\n        0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc,\r\n        0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\r\n        0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659,\r\n        0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f,\r\n        0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8,\r\n        0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\r\n        0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be,\r\n        0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,\r\n        0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255,\r\n        0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,\r\n        0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1,\r\n        0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,\r\n        0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025,\r\n        0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\r\n        0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01,\r\n        0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641,\r\n        0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa,\r\n        0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\r\n        0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409,\r\n        0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,\r\n        0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3,\r\n        0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,\r\n        0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234,\r\n        0x92638212, 0x670efa8e, 0x406000e0, 0x3a39ce37, 0xd3faf5cf,\r\n        0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740,\r\n        0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\r\n        0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f,\r\n        0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d,\r\n        0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8,\r\n        0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,\r\n        0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba,\r\n        0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\r\n        0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69,\r\n        0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,\r\n        0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a,\r\n        0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b,\r\n        0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd,\r\n        0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\r\n        0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4,\r\n        0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,\r\n        0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb,\r\n        0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,\r\n        0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751,\r\n        0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\r\n        0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369,\r\n        0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,\r\n        0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd,\r\n        0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45,\r\n        0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae,\r\n        0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\r\n        0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08,\r\n        0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d,\r\n        0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b,\r\n        0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,\r\n        0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e,\r\n        0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\r\n        0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c,\r\n        0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,\r\n        0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361,\r\n        0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c,\r\n        0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be,\r\n        0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\r\n        0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d,\r\n        0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891,\r\n        0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5,\r\n        0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,\r\n        0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292,\r\n        0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\r\n        0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2,\r\n        0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,\r\n        0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c,\r\n        0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8,\r\n        0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4,\r\n        0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\r\n        0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6\r\n    ];\r\n\r\n    /**\r\n     * @type {Array.<number>}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var C_ORIG = [\r\n        0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944,\r\n        0x6f756274\r\n    ];\r\n\r\n    /**\r\n     * @param {Array.<number>} lr\r\n     * @param {number} off\r\n     * @param {Array.<number>} P\r\n     * @param {Array.<number>} S\r\n     * @returns {Array.<number>}\r\n     * @inner\r\n     */\r\n    function _encipher(lr, off, P, S) { // This is our bottleneck: 1714/1905 ticks / 90% - see profile.txt\r\n        var n,\r\n            l = lr[off],\r\n            r = lr[off + 1];\r\n\r\n        l ^= P[0];\r\n\r\n        /*\r\n        for (var i=0, k=BLOWFISH_NUM_ROUNDS-2; i<=k;)\r\n            // Feistel substitution on left word\r\n            n  = S[l >>> 24],\r\n            n += S[0x100 | ((l >> 16) & 0xff)],\r\n            n ^= S[0x200 | ((l >> 8) & 0xff)],\r\n            n += S[0x300 | (l & 0xff)],\r\n            r ^= n ^ P[++i],\r\n            // Feistel substitution on right word\r\n            n  = S[r >>> 24],\r\n            n += S[0x100 | ((r >> 16) & 0xff)],\r\n            n ^= S[0x200 | ((r >> 8) & 0xff)],\r\n            n += S[0x300 | (r & 0xff)],\r\n            l ^= n ^ P[++i];\r\n        */\r\n\r\n        //The following is an unrolled version of the above loop.\r\n        //Iteration 0\r\n        n  = S[l >>> 24];\r\n        n += S[0x100 | ((l >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\r\n        n += S[0x300 | (l & 0xff)];\r\n        r ^= n ^ P[1];\r\n        n  = S[r >>> 24];\r\n        n += S[0x100 | ((r >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\r\n        n += S[0x300 | (r & 0xff)];\r\n        l ^= n ^ P[2];\r\n        //Iteration 1\r\n        n  = S[l >>> 24];\r\n        n += S[0x100 | ((l >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\r\n        n += S[0x300 | (l & 0xff)];\r\n        r ^= n ^ P[3];\r\n        n  = S[r >>> 24];\r\n        n += S[0x100 | ((r >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\r\n        n += S[0x300 | (r & 0xff)];\r\n        l ^= n ^ P[4];\r\n        //Iteration 2\r\n        n  = S[l >>> 24];\r\n        n += S[0x100 | ((l >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\r\n        n += S[0x300 | (l & 0xff)];\r\n        r ^= n ^ P[5];\r\n        n  = S[r >>> 24];\r\n        n += S[0x100 | ((r >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\r\n        n += S[0x300 | (r & 0xff)];\r\n        l ^= n ^ P[6];\r\n        //Iteration 3\r\n        n  = S[l >>> 24];\r\n        n += S[0x100 | ((l >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\r\n        n += S[0x300 | (l & 0xff)];\r\n        r ^= n ^ P[7];\r\n        n  = S[r >>> 24];\r\n        n += S[0x100 | ((r >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\r\n        n += S[0x300 | (r & 0xff)];\r\n        l ^= n ^ P[8];\r\n        //Iteration 4\r\n        n  = S[l >>> 24];\r\n        n += S[0x100 | ((l >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\r\n        n += S[0x300 | (l & 0xff)];\r\n        r ^= n ^ P[9];\r\n        n  = S[r >>> 24];\r\n        n += S[0x100 | ((r >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\r\n        n += S[0x300 | (r & 0xff)];\r\n        l ^= n ^ P[10];\r\n        //Iteration 5\r\n        n  = S[l >>> 24];\r\n        n += S[0x100 | ((l >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\r\n        n += S[0x300 | (l & 0xff)];\r\n        r ^= n ^ P[11];\r\n        n  = S[r >>> 24];\r\n        n += S[0x100 | ((r >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\r\n        n += S[0x300 | (r & 0xff)];\r\n        l ^= n ^ P[12];\r\n        //Iteration 6\r\n        n  = S[l >>> 24];\r\n        n += S[0x100 | ((l >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\r\n        n += S[0x300 | (l & 0xff)];\r\n        r ^= n ^ P[13];\r\n        n  = S[r >>> 24];\r\n        n += S[0x100 | ((r >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\r\n        n += S[0x300 | (r & 0xff)];\r\n        l ^= n ^ P[14];\r\n        //Iteration 7\r\n        n  = S[l >>> 24];\r\n        n += S[0x100 | ((l >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((l >> 8) & 0xff)];\r\n        n += S[0x300 | (l & 0xff)];\r\n        r ^= n ^ P[15];\r\n        n  = S[r >>> 24];\r\n        n += S[0x100 | ((r >> 16) & 0xff)];\r\n        n ^= S[0x200 | ((r >> 8) & 0xff)];\r\n        n += S[0x300 | (r & 0xff)];\r\n        l ^= n ^ P[16];\r\n\r\n        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\r\n        lr[off + 1] = l;\r\n        return lr;\r\n    }\r\n\r\n    /**\r\n     * @param {Array.<number>} data\r\n     * @param {number} offp\r\n     * @returns {{key: number, offp: number}}\r\n     * @inner\r\n     */\r\n    function _streamtoword(data, offp) {\r\n        for (var i = 0, word = 0; i < 4; ++i)\r\n            word = (word << 8) | (data[offp] & 0xff),\r\n            offp = (offp + 1) % data.length;\r\n        return { key: word, offp: offp };\r\n    }\r\n\r\n    /**\r\n     * @param {Array.<number>} key\r\n     * @param {Array.<number>} P\r\n     * @param {Array.<number>} S\r\n     * @inner\r\n     */\r\n    function _key(key, P, S) {\r\n        var offset = 0,\r\n            lr = [0, 0],\r\n            plen = P.length,\r\n            slen = S.length,\r\n            sw;\r\n        for (var i = 0; i < plen; i++)\r\n            sw = _streamtoword(key, offset),\r\n            offset = sw.offp,\r\n            P[i] = P[i] ^ sw.key;\r\n        for (i = 0; i < plen; i += 2)\r\n            lr = _encipher(lr, 0, P, S),\r\n            P[i] = lr[0],\r\n            P[i + 1] = lr[1];\r\n        for (i = 0; i < slen; i += 2)\r\n            lr = _encipher(lr, 0, P, S),\r\n            S[i] = lr[0],\r\n            S[i + 1] = lr[1];\r\n    }\r\n\r\n    /**\r\n     * Expensive key schedule Blowfish.\r\n     * @param {Array.<number>} data\r\n     * @param {Array.<number>} key\r\n     * @param {Array.<number>} P\r\n     * @param {Array.<number>} S\r\n     * @inner\r\n     */\r\n    function _ekskey(data, key, P, S) {\r\n        var offp = 0,\r\n            lr = [0, 0],\r\n            plen = P.length,\r\n            slen = S.length,\r\n            sw;\r\n        for (var i = 0; i < plen; i++)\r\n            sw = _streamtoword(key, offp),\r\n            offp = sw.offp,\r\n            P[i] = P[i] ^ sw.key;\r\n        offp = 0;\r\n        for (i = 0; i < plen; i += 2)\r\n            sw = _streamtoword(data, offp),\r\n            offp = sw.offp,\r\n            lr[0] ^= sw.key,\r\n            sw = _streamtoword(data, offp),\r\n            offp = sw.offp,\r\n            lr[1] ^= sw.key,\r\n            lr = _encipher(lr, 0, P, S),\r\n            P[i] = lr[0],\r\n            P[i + 1] = lr[1];\r\n        for (i = 0; i < slen; i += 2)\r\n            sw = _streamtoword(data, offp),\r\n            offp = sw.offp,\r\n            lr[0] ^= sw.key,\r\n            sw = _streamtoword(data, offp),\r\n            offp = sw.offp,\r\n            lr[1] ^= sw.key,\r\n            lr = _encipher(lr, 0, P, S),\r\n            S[i] = lr[0],\r\n            S[i + 1] = lr[1];\r\n    }\r\n\r\n    /**\r\n     * Internaly crypts a string.\r\n     * @param {Array.<number>} b Bytes to crypt\r\n     * @param {Array.<number>} salt Salt bytes to use\r\n     * @param {number} rounds Number of rounds\r\n     * @param {function(Error, Array.<number>=)=} callback Callback receiving the error, if any, and the resulting bytes. If\r\n     *  omitted, the operation will be performed synchronously.\r\n     *  @param {function(number)=} progressCallback Callback called with the current progress\r\n     * @returns {!Array.<number>|undefined} Resulting bytes if callback has been omitted, otherwise `undefined`\r\n     * @inner\r\n     */\r\n    function _crypt(b, salt, rounds, callback, progressCallback) {\r\n        var cdata = C_ORIG.slice(),\r\n            clen = cdata.length,\r\n            err;\r\n\r\n        // Validate\r\n        if (rounds < 4 || rounds > 31) {\r\n            err = Error(\"Illegal number of rounds (4-31): \"+rounds);\r\n            if (callback) {\r\n                nextTick(callback.bind(this, err));\r\n                return;\r\n            } else\r\n                throw err;\r\n        }\r\n        if (salt.length !== BCRYPT_SALT_LEN) {\r\n            err =Error(\"Illegal salt length: \"+salt.length+\" != \"+BCRYPT_SALT_LEN);\r\n            if (callback) {\r\n                nextTick(callback.bind(this, err));\r\n                return;\r\n            } else\r\n                throw err;\r\n        }\r\n        rounds = (1 << rounds) >>> 0;\r\n\r\n        var P, S, i = 0, j;\r\n\r\n        //Use typed arrays when available - huge speedup!\r\n        if (Int32Array) {\r\n            P = new Int32Array(P_ORIG);\r\n            S = new Int32Array(S_ORIG);\r\n        } else {\r\n            P = P_ORIG.slice();\r\n            S = S_ORIG.slice();\r\n        }\r\n\r\n        _ekskey(salt, b, P, S);\r\n\r\n        /**\r\n         * Calcualtes the next round.\r\n         * @returns {Array.<number>|undefined} Resulting array if callback has been omitted, otherwise `undefined`\r\n         * @inner\r\n         */\r\n        function next() {\r\n            if (progressCallback)\r\n                progressCallback(i / rounds);\r\n            if (i < rounds) {\r\n                var start = Date.now();\r\n                for (; i < rounds;) {\r\n                    i = i + 1;\r\n                    _key(b, P, S);\r\n                    _key(salt, P, S);\r\n                    if (Date.now() - start > MAX_EXECUTION_TIME)\r\n                        break;\r\n                }\r\n            } else {\r\n                for (i = 0; i < 64; i++)\r\n                    for (j = 0; j < (clen >> 1); j++)\r\n                        _encipher(cdata, j << 1, P, S);\r\n                var ret = [];\r\n                for (i = 0; i < clen; i++)\r\n                    ret.push(((cdata[i] >> 24) & 0xff) >>> 0),\r\n                    ret.push(((cdata[i] >> 16) & 0xff) >>> 0),\r\n                    ret.push(((cdata[i] >> 8) & 0xff) >>> 0),\r\n                    ret.push((cdata[i] & 0xff) >>> 0);\r\n                if (callback) {\r\n                    callback(null, ret);\r\n                    return;\r\n                } else\r\n                    return ret;\r\n            }\r\n            if (callback)\r\n                nextTick(next);\r\n        }\r\n\r\n        // Async\r\n        if (typeof callback !== 'undefined') {\r\n            next();\r\n\r\n            // Sync\r\n        } else {\r\n            var res;\r\n            while (true)\r\n                if (typeof(res = next()) !== 'undefined')\r\n                    return res || [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internally hashes a string.\r\n     * @param {string} s String to hash\r\n     * @param {?string} salt Salt to use, actually never null\r\n     * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,\r\n     *  hashing is perormed synchronously.\r\n     *  @param {function(number)=} progressCallback Callback called with the current progress\r\n     * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`\r\n     * @inner\r\n     */\r\n    function _hash(s, salt, callback, progressCallback) {\r\n        var err;\r\n        if (typeof s !== 'string' || typeof salt !== 'string') {\r\n            err = Error(\"Invalid string / salt: Not a string\");\r\n            if (callback) {\r\n                nextTick(callback.bind(this, err));\r\n                return;\r\n            }\r\n            else\r\n                throw err;\r\n        }\r\n\r\n        // Validate the salt\r\n        var minor, offset;\r\n        if (salt.charAt(0) !== '$' || salt.charAt(1) !== '2') {\r\n            err = Error(\"Invalid salt version: \"+salt.substring(0,2));\r\n            if (callback) {\r\n                nextTick(callback.bind(this, err));\r\n                return;\r\n            }\r\n            else\r\n                throw err;\r\n        }\r\n        if (salt.charAt(2) === '$')\r\n            minor = String.fromCharCode(0),\r\n            offset = 3;\r\n        else {\r\n            minor = salt.charAt(2);\r\n            if ((minor !== 'a' && minor !== 'b' && minor !== 'y') || salt.charAt(3) !== '$') {\r\n                err = Error(\"Invalid salt revision: \"+salt.substring(2,4));\r\n                if (callback) {\r\n                    nextTick(callback.bind(this, err));\r\n                    return;\r\n                } else\r\n                    throw err;\r\n            }\r\n            offset = 4;\r\n        }\r\n\r\n        // Extract number of rounds\r\n        if (salt.charAt(offset + 2) > '$') {\r\n            err = Error(\"Missing salt rounds\");\r\n            if (callback) {\r\n                nextTick(callback.bind(this, err));\r\n                return;\r\n            } else\r\n                throw err;\r\n        }\r\n        var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10,\r\n            r2 = parseInt(salt.substring(offset + 1, offset + 2), 10),\r\n            rounds = r1 + r2,\r\n            real_salt = salt.substring(offset + 3, offset + 25);\r\n        s += minor >= 'a' ? \"\\x00\" : \"\";\r\n\r\n        var passwordb = stringToBytes(s),\r\n            saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);\r\n\r\n        /**\r\n         * Finishes hashing.\r\n         * @param {Array.<number>} bytes Byte array\r\n         * @returns {string}\r\n         * @inner\r\n         */\r\n        function finish(bytes) {\r\n            var res = [];\r\n            res.push(\"$2\");\r\n            if (minor >= 'a')\r\n                res.push(minor);\r\n            res.push(\"$\");\r\n            if (rounds < 10)\r\n                res.push(\"0\");\r\n            res.push(rounds.toString());\r\n            res.push(\"$\");\r\n            res.push(base64_encode(saltb, saltb.length));\r\n            res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));\r\n            return res.join('');\r\n        }\r\n\r\n        // Sync\r\n        if (typeof callback == 'undefined')\r\n            return finish(_crypt(passwordb, saltb, rounds));\r\n\r\n        // Async\r\n        else {\r\n            _crypt(passwordb, saltb, rounds, function(err, bytes) {\r\n                if (err)\r\n                    callback(err, null);\r\n                else\r\n                    callback(null, finish(bytes));\r\n            }, progressCallback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encodes a byte array to base64 with up to len bytes of input, using the custom bcrypt alphabet.\r\n     * @function\r\n     * @param {!Array.<number>} b Byte array\r\n     * @param {number} len Maximum input length\r\n     * @returns {string}\r\n     * @expose\r\n     */\r\n    bcrypt.encodeBase64 = base64_encode;\r\n\r\n    /**\r\n     * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.\r\n     * @function\r\n     * @param {string} s String to decode\r\n     * @param {number} len Maximum output length\r\n     * @returns {!Array.<number>}\r\n     * @expose\r\n     */\r\n    bcrypt.decodeBase64 = base64_decode;\r\n\r\n    return bcrypt;\r\n}));\r\n","/*jshint node:true */\n'use strict';\nvar Buffer = require('buffer').Buffer; // browserify\nvar SlowBuffer = require('buffer').SlowBuffer;\n\nmodule.exports = bufferEq;\n\nfunction bufferEq(a, b) {\n\n  // shortcutting on type is necessary for correctness\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    return false;\n  }\n\n  // buffer sizes should be well-known information, so despite this\n  // shortcutting, it doesn't leak any information about the *contents* of the\n  // buffers.\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var c = 0;\n  for (var i = 0; i < a.length; i++) {\n    /*jshint bitwise:false */\n    c |= a[i] ^ b[i]; // XOR\n  }\n  return c === 0;\n}\n\nbufferEq.install = function() {\n  Buffer.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {\n    return bufferEq(this, that);\n  };\n};\n\nvar origBufEqual = Buffer.prototype.equal;\nvar origSlowBufEqual = SlowBuffer.prototype.equal;\nbufferEq.restore = function() {\n  Buffer.prototype.equal = origBufEqual;\n  SlowBuffer.prototype.equal = origSlowBufEqual;\n};\n","'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar getParamBytesForAlg = require('./param-bytes-for-alg');\n\nvar MAX_OCTET = 0x80,\n\tCLASS_UNIVERSAL = 0,\n\tPRIMITIVE_BIT = 0x20,\n\tTAG_SEQ = 0x10,\n\tTAG_INT = 0x02,\n\tENCODED_TAG_SEQ = (TAG_SEQ | PRIMITIVE_BIT) | (CLASS_UNIVERSAL << 6),\n\tENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);\n\nfunction base64Url(base64) {\n\treturn base64\n\t\t.replace(/=/g, '')\n\t\t.replace(/\\+/g, '-')\n\t\t.replace(/\\//g, '_');\n}\n\nfunction signatureAsBuffer(signature) {\n\tif (Buffer.isBuffer(signature)) {\n\t\treturn signature;\n\t} else if ('string' === typeof signature) {\n\t\treturn Buffer.from(signature, 'base64');\n\t}\n\n\tthrow new TypeError('ECDSA signature must be a Base64 string or a Buffer');\n}\n\nfunction derToJose(signature, alg) {\n\tsignature = signatureAsBuffer(signature);\n\tvar paramBytes = getParamBytesForAlg(alg);\n\n\t// the DER encoded param should at most be the param size, plus a padding\n\t// zero, since due to being a signed integer\n\tvar maxEncodedParamLength = paramBytes + 1;\n\n\tvar inputLength = signature.length;\n\n\tvar offset = 0;\n\tif (signature[offset++] !== ENCODED_TAG_SEQ) {\n\t\tthrow new Error('Could not find expected \"seq\"');\n\t}\n\n\tvar seqLength = signature[offset++];\n\tif (seqLength === (MAX_OCTET | 1)) {\n\t\tseqLength = signature[offset++];\n\t}\n\n\tif (inputLength - offset < seqLength) {\n\t\tthrow new Error('\"seq\" specified length of \"' + seqLength + '\", only \"' + (inputLength - offset) + '\" remaining');\n\t}\n\n\tif (signature[offset++] !== ENCODED_TAG_INT) {\n\t\tthrow new Error('Could not find expected \"int\" for \"r\"');\n\t}\n\n\tvar rLength = signature[offset++];\n\n\tif (inputLength - offset - 2 < rLength) {\n\t\tthrow new Error('\"r\" specified length of \"' + rLength + '\", only \"' + (inputLength - offset - 2) + '\" available');\n\t}\n\n\tif (maxEncodedParamLength < rLength) {\n\t\tthrow new Error('\"r\" specified length of \"' + rLength + '\", max of \"' + maxEncodedParamLength + '\" is acceptable');\n\t}\n\n\tvar rOffset = offset;\n\toffset += rLength;\n\n\tif (signature[offset++] !== ENCODED_TAG_INT) {\n\t\tthrow new Error('Could not find expected \"int\" for \"s\"');\n\t}\n\n\tvar sLength = signature[offset++];\n\n\tif (inputLength - offset !== sLength) {\n\t\tthrow new Error('\"s\" specified length of \"' + sLength + '\", expected \"' + (inputLength - offset) + '\"');\n\t}\n\n\tif (maxEncodedParamLength < sLength) {\n\t\tthrow new Error('\"s\" specified length of \"' + sLength + '\", max of \"' + maxEncodedParamLength + '\" is acceptable');\n\t}\n\n\tvar sOffset = offset;\n\toffset += sLength;\n\n\tif (offset !== inputLength) {\n\t\tthrow new Error('Expected to consume entire buffer, but \"' + (inputLength - offset) + '\" bytes remain');\n\t}\n\n\tvar rPadding = paramBytes - rLength,\n\t\tsPadding = paramBytes - sLength;\n\n\tvar dst = Buffer.allocUnsafe(rPadding + rLength + sPadding + sLength);\n\n\tfor (offset = 0; offset < rPadding; ++offset) {\n\t\tdst[offset] = 0;\n\t}\n\tsignature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);\n\n\toffset = paramBytes;\n\n\tfor (var o = offset; offset < o + sPadding; ++offset) {\n\t\tdst[offset] = 0;\n\t}\n\tsignature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);\n\n\tdst = dst.toString('base64');\n\tdst = base64Url(dst);\n\n\treturn dst;\n}\n\nfunction countPadding(buf, start, stop) {\n\tvar padding = 0;\n\twhile (start + padding < stop && buf[start + padding] === 0) {\n\t\t++padding;\n\t}\n\n\tvar needsSign = buf[start + padding] >= MAX_OCTET;\n\tif (needsSign) {\n\t\t--padding;\n\t}\n\n\treturn padding;\n}\n\nfunction joseToDer(signature, alg) {\n\tsignature = signatureAsBuffer(signature);\n\tvar paramBytes = getParamBytesForAlg(alg);\n\n\tvar signatureBytes = signature.length;\n\tif (signatureBytes !== paramBytes * 2) {\n\t\tthrow new TypeError('\"' + alg + '\" signatures must be \"' + paramBytes * 2 + '\" bytes, saw \"' + signatureBytes + '\"');\n\t}\n\n\tvar rPadding = countPadding(signature, 0, paramBytes);\n\tvar sPadding = countPadding(signature, paramBytes, signature.length);\n\tvar rLength = paramBytes - rPadding;\n\tvar sLength = paramBytes - sPadding;\n\n\tvar rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;\n\n\tvar shortLength = rsBytes < MAX_OCTET;\n\n\tvar dst = Buffer.allocUnsafe((shortLength ? 2 : 3) + rsBytes);\n\n\tvar offset = 0;\n\tdst[offset++] = ENCODED_TAG_SEQ;\n\tif (shortLength) {\n\t\t// Bit 8 has value \"0\"\n\t\t// bits 7-1 give the length.\n\t\tdst[offset++] = rsBytes;\n\t} else {\n\t\t// Bit 8 of first octet has value \"1\"\n\t\t// bits 7-1 give the number of additional length octets.\n\t\tdst[offset++] = MAX_OCTET\t| 1;\n\t\t// length, base 256\n\t\tdst[offset++] = rsBytes & 0xff;\n\t}\n\tdst[offset++] = ENCODED_TAG_INT;\n\tdst[offset++] = rLength;\n\tif (rPadding < 0) {\n\t\tdst[offset++] = 0;\n\t\toffset += signature.copy(dst, offset, 0, paramBytes);\n\t} else {\n\t\toffset += signature.copy(dst, offset, rPadding, paramBytes);\n\t}\n\tdst[offset++] = ENCODED_TAG_INT;\n\tdst[offset++] = sLength;\n\tif (sPadding < 0) {\n\t\tdst[offset++] = 0;\n\t\tsignature.copy(dst, offset, paramBytes);\n\t} else {\n\t\tsignature.copy(dst, offset, paramBytes + sPadding);\n\t}\n\n\treturn dst;\n}\n\nmodule.exports = {\n\tderToJose: derToJose,\n\tjoseToDer: joseToDer\n};\n","'use strict';\n\nfunction getParamSize(keySize) {\n\tvar result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);\n\treturn result;\n}\n\nvar paramBytesForAlg = {\n\tES256: getParamSize(256),\n\tES384: getParamSize(384),\n\tES512: getParamSize(521)\n};\n\nfunction getParamBytesForAlg(alg) {\n\tvar paramBytes = paramBytesForAlg[alg];\n\tif (paramBytes) {\n\t\treturn paramBytes;\n\t}\n\n\tthrow new Error('Unknown algorithm \"' + alg + '\"');\n}\n\nmodule.exports = getParamBytesForAlg;\n","var jws = require('jws');\n\nmodule.exports = function (jwt, options) {\n  options = options || {};\n  var decoded = jws.decode(jwt, options);\n  if (!decoded) { return null; }\n  var payload = decoded.payload;\n\n  //try parse the payload\n  if(typeof payload === 'string') {\n    try {\n      var obj = JSON.parse(payload);\n      if(obj !== null && typeof obj === 'object') {\n        payload = obj;\n      }\n    } catch (e) { }\n  }\n\n  //return header if `complete` option is enabled.  header includes claims\n  //such as `kid` and `alg` used to select the key within a JWKS needed to\n  //verify the signature\n  if (options.complete === true) {\n    return {\n      header: decoded.header,\n      payload: payload,\n      signature: decoded.signature\n    };\n  }\n  return payload;\n};\n","module.exports = {\n  decode: require('./decode'),\n  verify: require('./verify'),\n  sign: require('./sign'),\n  JsonWebTokenError: require('./lib/JsonWebTokenError'),\n  NotBeforeError: require('./lib/NotBeforeError'),\n  TokenExpiredError: require('./lib/TokenExpiredError'),\n};\n","var JsonWebTokenError = function (message, error) {\n  Error.call(this, message);\n  if(Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  }\n  this.name = 'JsonWebTokenError';\n  this.message = message;\n  if (error) this.inner = error;\n};\n\nJsonWebTokenError.prototype = Object.create(Error.prototype);\nJsonWebTokenError.prototype.constructor = JsonWebTokenError;\n\nmodule.exports = JsonWebTokenError;\n","var JsonWebTokenError = require('./JsonWebTokenError');\n\nvar NotBeforeError = function (message, date) {\n  JsonWebTokenError.call(this, message);\n  this.name = 'NotBeforeError';\n  this.date = date;\n};\n\nNotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);\n\nNotBeforeError.prototype.constructor = NotBeforeError;\n\nmodule.exports = NotBeforeError;","var JsonWebTokenError = require('./JsonWebTokenError');\n\nvar TokenExpiredError = function (message, expiredAt) {\n  JsonWebTokenError.call(this, message);\n  this.name = 'TokenExpiredError';\n  this.expiredAt = expiredAt;\n};\n\nTokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);\n\nTokenExpiredError.prototype.constructor = TokenExpiredError;\n\nmodule.exports = TokenExpiredError;","const semver = require('semver');\n\nmodule.exports = semver.satisfies(process.version, '>=15.7.0');\n","var semver = require('semver');\n\nmodule.exports = semver.satisfies(process.version, '^6.12.0 || >=8.0.0');\n","const semver = require('semver');\n\nmodule.exports = semver.satisfies(process.version, '>=16.9.0');\n","var ms = require('ms');\n\nmodule.exports = function (time, iat) {\n  var timestamp = iat || Math.floor(Date.now() / 1000);\n\n  if (typeof time === 'string') {\n    var milliseconds = ms(time);\n    if (typeof milliseconds === 'undefined') {\n      return;\n    }\n    return Math.floor(timestamp + milliseconds / 1000);\n  } else if (typeof time === 'number') {\n    return timestamp + time;\n  } else {\n    return;\n  }\n\n};","const ASYMMETRIC_KEY_DETAILS_SUPPORTED = require('./asymmetricKeyDetailsSupported');\nconst RSA_PSS_KEY_DETAILS_SUPPORTED = require('./rsaPssKeyDetailsSupported');\n\nconst allowedAlgorithmsForKeys = {\n  'ec': ['ES256', 'ES384', 'ES512'],\n  'rsa': ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],\n  'rsa-pss': ['PS256', 'PS384', 'PS512']\n};\n\nconst allowedCurves = {\n  ES256: 'prime256v1',\n  ES384: 'secp384r1',\n  ES512: 'secp521r1',\n};\n\nmodule.exports = function(algorithm, key) {\n  if (!algorithm || !key) return;\n\n  const keyType = key.asymmetricKeyType;\n  if (!keyType) return;\n\n  const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];\n\n  if (!allowedAlgorithms) {\n    throw new Error(`Unknown key type \"${keyType}\".`);\n  }\n\n  if (!allowedAlgorithms.includes(algorithm)) {\n    throw new Error(`\"alg\" parameter for \"${keyType}\" key type must be one of: ${allowedAlgorithms.join(', ')}.`)\n  }\n\n  /*\n   * Ignore the next block from test coverage because it gets executed\n   * conditionally depending on the Node version. Not ignoring it would\n   * prevent us from reaching the target % of coverage for versions of\n   * Node under 15.7.0.\n   */\n  /* istanbul ignore next */\n  if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {\n    switch (keyType) {\n    case 'ec':\n      const keyCurve = key.asymmetricKeyDetails.namedCurve;\n      const allowedCurve = allowedCurves[algorithm];\n\n      if (keyCurve !== allowedCurve) {\n        throw new Error(`\"alg\" parameter \"${algorithm}\" requires curve \"${allowedCurve}\".`);\n      }\n      break;\n\n    case 'rsa-pss':\n      if (RSA_PSS_KEY_DETAILS_SUPPORTED) {\n        const length = parseInt(algorithm.slice(-3), 10);\n        const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;\n\n        if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \"alg\" ${algorithm}.`);\n        }\n\n        if (saltLength !== undefined && saltLength > length >> 3) {\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \"alg\" ${algorithm}.`)\n        }\n      }\n      break;\n    }\n  }\n}\n","const timespan = require('./lib/timespan');\nconst PS_SUPPORTED = require('./lib/psSupported');\nconst validateAsymmetricKey = require('./lib/validateAsymmetricKey');\nconst jws = require('jws');\nconst includes = require('lodash.includes');\nconst isBoolean = require('lodash.isboolean');\nconst isInteger = require('lodash.isinteger');\nconst isNumber = require('lodash.isnumber');\nconst isPlainObject = require('lodash.isplainobject');\nconst isString = require('lodash.isstring');\nconst once = require('lodash.once');\nconst { KeyObject, createSecretKey, createPrivateKey } = require('crypto')\n\nconst SUPPORTED_ALGS = ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512', 'HS256', 'HS384', 'HS512', 'none'];\nif (PS_SUPPORTED) {\n  SUPPORTED_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');\n}\n\nconst sign_options_schema = {\n  expiresIn: { isValid: function(value) { return isInteger(value) || (isString(value) && value); }, message: '\"expiresIn\" should be a number of seconds or string representing a timespan' },\n  notBefore: { isValid: function(value) { return isInteger(value) || (isString(value) && value); }, message: '\"notBefore\" should be a number of seconds or string representing a timespan' },\n  audience: { isValid: function(value) { return isString(value) || Array.isArray(value); }, message: '\"audience\" must be a string or array' },\n  algorithm: { isValid: includes.bind(null, SUPPORTED_ALGS), message: '\"algorithm\" must be a valid string enum value' },\n  header: { isValid: isPlainObject, message: '\"header\" must be an object' },\n  encoding: { isValid: isString, message: '\"encoding\" must be a string' },\n  issuer: { isValid: isString, message: '\"issuer\" must be a string' },\n  subject: { isValid: isString, message: '\"subject\" must be a string' },\n  jwtid: { isValid: isString, message: '\"jwtid\" must be a string' },\n  noTimestamp: { isValid: isBoolean, message: '\"noTimestamp\" must be a boolean' },\n  keyid: { isValid: isString, message: '\"keyid\" must be a string' },\n  mutatePayload: { isValid: isBoolean, message: '\"mutatePayload\" must be a boolean' },\n  allowInsecureKeySizes: { isValid: isBoolean, message: '\"allowInsecureKeySizes\" must be a boolean'},\n  allowInvalidAsymmetricKeyTypes: { isValid: isBoolean, message: '\"allowInvalidAsymmetricKeyTypes\" must be a boolean'}\n};\n\nconst registered_claims_schema = {\n  iat: { isValid: isNumber, message: '\"iat\" should be a number of seconds' },\n  exp: { isValid: isNumber, message: '\"exp\" should be a number of seconds' },\n  nbf: { isValid: isNumber, message: '\"nbf\" should be a number of seconds' }\n};\n\nfunction validate(schema, allowUnknown, object, parameterName) {\n  if (!isPlainObject(object)) {\n    throw new Error('Expected \"' + parameterName + '\" to be a plain object.');\n  }\n  Object.keys(object)\n    .forEach(function(key) {\n      const validator = schema[key];\n      if (!validator) {\n        if (!allowUnknown) {\n          throw new Error('\"' + key + '\" is not allowed in \"' + parameterName + '\"');\n        }\n        return;\n      }\n      if (!validator.isValid(object[key])) {\n        throw new Error(validator.message);\n      }\n    });\n}\n\nfunction validateOptions(options) {\n  return validate(sign_options_schema, false, options, 'options');\n}\n\nfunction validatePayload(payload) {\n  return validate(registered_claims_schema, true, payload, 'payload');\n}\n\nconst options_to_payload = {\n  'audience': 'aud',\n  'issuer': 'iss',\n  'subject': 'sub',\n  'jwtid': 'jti'\n};\n\nconst options_for_objects = [\n  'expiresIn',\n  'notBefore',\n  'noTimestamp',\n  'audience',\n  'issuer',\n  'subject',\n  'jwtid',\n];\n\nmodule.exports = function (payload, secretOrPrivateKey, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else {\n    options = options || {};\n  }\n\n  const isObjectPayload = typeof payload === 'object' &&\n                        !Buffer.isBuffer(payload);\n\n  const header = Object.assign({\n    alg: options.algorithm || 'HS256',\n    typ: isObjectPayload ? 'JWT' : undefined,\n    kid: options.keyid\n  }, options.header);\n\n  function failure(err) {\n    if (callback) {\n      return callback(err);\n    }\n    throw err;\n  }\n\n  if (!secretOrPrivateKey && options.algorithm !== 'none') {\n    return failure(new Error('secretOrPrivateKey must have a value'));\n  }\n\n  if (secretOrPrivateKey != null && !(secretOrPrivateKey instanceof KeyObject)) {\n    try {\n      secretOrPrivateKey = createPrivateKey(secretOrPrivateKey)\n    } catch (_) {\n      try {\n        secretOrPrivateKey = createSecretKey(typeof secretOrPrivateKey === 'string' ? Buffer.from(secretOrPrivateKey) : secretOrPrivateKey)\n      } catch (_) {\n        return failure(new Error('secretOrPrivateKey is not valid key material'));\n      }\n    }\n  }\n\n  if (header.alg.startsWith('HS') && secretOrPrivateKey.type !== 'secret') {\n    return failure(new Error((`secretOrPrivateKey must be a symmetric key when using ${header.alg}`)))\n  } else if (/^(?:RS|PS|ES)/.test(header.alg)) {\n    if (secretOrPrivateKey.type !== 'private') {\n      return failure(new Error((`secretOrPrivateKey must be an asymmetric key when using ${header.alg}`)))\n    }\n    if (!options.allowInsecureKeySizes &&\n      !header.alg.startsWith('ES') &&\n      secretOrPrivateKey.asymmetricKeyDetails !== undefined && //KeyObject.asymmetricKeyDetails is supported in Node 15+\n      secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048) {\n      return failure(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));\n    }\n  }\n\n  if (typeof payload === 'undefined') {\n    return failure(new Error('payload is required'));\n  } else if (isObjectPayload) {\n    try {\n      validatePayload(payload);\n    }\n    catch (error) {\n      return failure(error);\n    }\n    if (!options.mutatePayload) {\n      payload = Object.assign({},payload);\n    }\n  } else {\n    const invalid_options = options_for_objects.filter(function (opt) {\n      return typeof options[opt] !== 'undefined';\n    });\n\n    if (invalid_options.length > 0) {\n      return failure(new Error('invalid ' + invalid_options.join(',') + ' option for ' + (typeof payload ) + ' payload'));\n    }\n  }\n\n  if (typeof payload.exp !== 'undefined' && typeof options.expiresIn !== 'undefined') {\n    return failure(new Error('Bad \"options.expiresIn\" option the payload already has an \"exp\" property.'));\n  }\n\n  if (typeof payload.nbf !== 'undefined' && typeof options.notBefore !== 'undefined') {\n    return failure(new Error('Bad \"options.notBefore\" option the payload already has an \"nbf\" property.'));\n  }\n\n  try {\n    validateOptions(options);\n  }\n  catch (error) {\n    return failure(error);\n  }\n\n  if (!options.allowInvalidAsymmetricKeyTypes) {\n    try {\n      validateAsymmetricKey(header.alg, secretOrPrivateKey);\n    } catch (error) {\n      return failure(error);\n    }\n  }\n\n  const timestamp = payload.iat || Math.floor(Date.now() / 1000);\n\n  if (options.noTimestamp) {\n    delete payload.iat;\n  } else if (isObjectPayload) {\n    payload.iat = timestamp;\n  }\n\n  if (typeof options.notBefore !== 'undefined') {\n    try {\n      payload.nbf = timespan(options.notBefore, timestamp);\n    }\n    catch (err) {\n      return failure(err);\n    }\n    if (typeof payload.nbf === 'undefined') {\n      return failure(new Error('\"notBefore\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n    }\n  }\n\n  if (typeof options.expiresIn !== 'undefined' && typeof payload === 'object') {\n    try {\n      payload.exp = timespan(options.expiresIn, timestamp);\n    }\n    catch (err) {\n      return failure(err);\n    }\n    if (typeof payload.exp === 'undefined') {\n      return failure(new Error('\"expiresIn\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n    }\n  }\n\n  Object.keys(options_to_payload).forEach(function (key) {\n    const claim = options_to_payload[key];\n    if (typeof options[key] !== 'undefined') {\n      if (typeof payload[claim] !== 'undefined') {\n        return failure(new Error('Bad \"options.' + key + '\" option. The payload already has an \"' + claim + '\" property.'));\n      }\n      payload[claim] = options[key];\n    }\n  });\n\n  const encoding = options.encoding || 'utf8';\n\n  if (typeof callback === 'function') {\n    callback = callback && once(callback);\n\n    jws.createSign({\n      header: header,\n      privateKey: secretOrPrivateKey,\n      payload: payload,\n      encoding: encoding\n    }).once('error', callback)\n      .once('done', function (signature) {\n        // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version\n        if(!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {\n          return callback(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`))\n        }\n        callback(null, signature);\n      });\n  } else {\n    let signature = jws.sign({header: header, payload: payload, secret: secretOrPrivateKey, encoding: encoding});\n    // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version\n    if(!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {\n      throw new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`)\n    }\n    return signature\n  }\n};\n","const JsonWebTokenError = require('./lib/JsonWebTokenError');\nconst NotBeforeError = require('./lib/NotBeforeError');\nconst TokenExpiredError = require('./lib/TokenExpiredError');\nconst decode = require('./decode');\nconst timespan = require('./lib/timespan');\nconst validateAsymmetricKey = require('./lib/validateAsymmetricKey');\nconst PS_SUPPORTED = require('./lib/psSupported');\nconst jws = require('jws');\nconst {KeyObject, createSecretKey, createPublicKey} = require(\"crypto\");\n\nconst PUB_KEY_ALGS = ['RS256', 'RS384', 'RS512'];\nconst EC_KEY_ALGS = ['ES256', 'ES384', 'ES512'];\nconst RSA_KEY_ALGS = ['RS256', 'RS384', 'RS512'];\nconst HS_ALGS = ['HS256', 'HS384', 'HS512'];\n\nif (PS_SUPPORTED) {\n  PUB_KEY_ALGS.splice(PUB_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');\n  RSA_KEY_ALGS.splice(RSA_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');\n}\n\nmodule.exports = function (jwtString, secretOrPublicKey, options, callback) {\n  if ((typeof options === 'function') && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  //clone this object since we are going to mutate it.\n  options = Object.assign({}, options);\n\n  let done;\n\n  if (callback) {\n    done = callback;\n  } else {\n    done = function(err, data) {\n      if (err) throw err;\n      return data;\n    };\n  }\n\n  if (options.clockTimestamp && typeof options.clockTimestamp !== 'number') {\n    return done(new JsonWebTokenError('clockTimestamp must be a number'));\n  }\n\n  if (options.nonce !== undefined && (typeof options.nonce !== 'string' || options.nonce.trim() === '')) {\n    return done(new JsonWebTokenError('nonce must be a non-empty string'));\n  }\n\n  if (options.allowInvalidAsymmetricKeyTypes !== undefined && typeof options.allowInvalidAsymmetricKeyTypes !== 'boolean') {\n    return done(new JsonWebTokenError('allowInvalidAsymmetricKeyTypes must be a boolean'));\n  }\n\n  const clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1000);\n\n  if (!jwtString){\n    return done(new JsonWebTokenError('jwt must be provided'));\n  }\n\n  if (typeof jwtString !== 'string') {\n    return done(new JsonWebTokenError('jwt must be a string'));\n  }\n\n  const parts = jwtString.split('.');\n\n  if (parts.length !== 3){\n    return done(new JsonWebTokenError('jwt malformed'));\n  }\n\n  let decodedToken;\n\n  try {\n    decodedToken = decode(jwtString, { complete: true });\n  } catch(err) {\n    return done(err);\n  }\n\n  if (!decodedToken) {\n    return done(new JsonWebTokenError('invalid token'));\n  }\n\n  const header = decodedToken.header;\n  let getSecret;\n\n  if(typeof secretOrPublicKey === 'function') {\n    if(!callback) {\n      return done(new JsonWebTokenError('verify must be called asynchronous if secret or public key is provided as a callback'));\n    }\n\n    getSecret = secretOrPublicKey;\n  }\n  else {\n    getSecret = function(header, secretCallback) {\n      return secretCallback(null, secretOrPublicKey);\n    };\n  }\n\n  return getSecret(header, function(err, secretOrPublicKey) {\n    if(err) {\n      return done(new JsonWebTokenError('error in secret or public key callback: ' + err.message));\n    }\n\n    const hasSignature = parts[2].trim() !== '';\n\n    if (!hasSignature && secretOrPublicKey){\n      return done(new JsonWebTokenError('jwt signature is required'));\n    }\n\n    if (hasSignature && !secretOrPublicKey) {\n      return done(new JsonWebTokenError('secret or public key must be provided'));\n    }\n\n    if (!hasSignature && !options.algorithms) {\n      return done(new JsonWebTokenError('please specify \"none\" in \"algorithms\" to verify unsigned tokens'));\n    }\n\n    if (secretOrPublicKey != null && !(secretOrPublicKey instanceof KeyObject)) {\n      try {\n        secretOrPublicKey = createPublicKey(secretOrPublicKey);\n      } catch (_) {\n        try {\n          secretOrPublicKey = createSecretKey(typeof secretOrPublicKey === 'string' ? Buffer.from(secretOrPublicKey) : secretOrPublicKey);\n        } catch (_) {\n          return done(new JsonWebTokenError('secretOrPublicKey is not valid key material'))\n        }\n      }\n    }\n\n    if (!options.algorithms) {\n      if (secretOrPublicKey.type === 'secret') {\n        options.algorithms = HS_ALGS;\n      } else if (['rsa', 'rsa-pss'].includes(secretOrPublicKey.asymmetricKeyType)) {\n        options.algorithms = RSA_KEY_ALGS\n      } else if (secretOrPublicKey.asymmetricKeyType === 'ec') {\n        options.algorithms = EC_KEY_ALGS\n      } else {\n        options.algorithms = PUB_KEY_ALGS\n      }\n    }\n\n    if (options.algorithms.indexOf(decodedToken.header.alg) === -1) {\n      return done(new JsonWebTokenError('invalid algorithm'));\n    }\n\n    if (header.alg.startsWith('HS') && secretOrPublicKey.type !== 'secret') {\n      return done(new JsonWebTokenError((`secretOrPublicKey must be a symmetric key when using ${header.alg}`)))\n    } else if (/^(?:RS|PS|ES)/.test(header.alg) && secretOrPublicKey.type !== 'public') {\n      return done(new JsonWebTokenError((`secretOrPublicKey must be an asymmetric key when using ${header.alg}`)))\n    }\n\n    if (!options.allowInvalidAsymmetricKeyTypes) {\n      try {\n        validateAsymmetricKey(header.alg, secretOrPublicKey);\n      } catch (e) {\n        return done(e);\n      }\n    }\n\n    let valid;\n\n    try {\n      valid = jws.verify(jwtString, decodedToken.header.alg, secretOrPublicKey);\n    } catch (e) {\n      return done(e);\n    }\n\n    if (!valid) {\n      return done(new JsonWebTokenError('invalid signature'));\n    }\n\n    const payload = decodedToken.payload;\n\n    if (typeof payload.nbf !== 'undefined' && !options.ignoreNotBefore) {\n      if (typeof payload.nbf !== 'number') {\n        return done(new JsonWebTokenError('invalid nbf value'));\n      }\n      if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {\n        return done(new NotBeforeError('jwt not active', new Date(payload.nbf * 1000)));\n      }\n    }\n\n    if (typeof payload.exp !== 'undefined' && !options.ignoreExpiration) {\n      if (typeof payload.exp !== 'number') {\n        return done(new JsonWebTokenError('invalid exp value'));\n      }\n      if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {\n        return done(new TokenExpiredError('jwt expired', new Date(payload.exp * 1000)));\n      }\n    }\n\n    if (options.audience) {\n      const audiences = Array.isArray(options.audience) ? options.audience : [options.audience];\n      const target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];\n\n      const match = target.some(function (targetAudience) {\n        return audiences.some(function (audience) {\n          return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;\n        });\n      });\n\n      if (!match) {\n        return done(new JsonWebTokenError('jwt audience invalid. expected: ' + audiences.join(' or ')));\n      }\n    }\n\n    if (options.issuer) {\n      const invalid_issuer =\n              (typeof options.issuer === 'string' && payload.iss !== options.issuer) ||\n              (Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1);\n\n      if (invalid_issuer) {\n        return done(new JsonWebTokenError('jwt issuer invalid. expected: ' + options.issuer));\n      }\n    }\n\n    if (options.subject) {\n      if (payload.sub !== options.subject) {\n        return done(new JsonWebTokenError('jwt subject invalid. expected: ' + options.subject));\n      }\n    }\n\n    if (options.jwtid) {\n      if (payload.jti !== options.jwtid) {\n        return done(new JsonWebTokenError('jwt jwtid invalid. expected: ' + options.jwtid));\n      }\n    }\n\n    if (options.nonce) {\n      if (payload.nonce !== options.nonce) {\n        return done(new JsonWebTokenError('jwt nonce invalid. expected: ' + options.nonce));\n      }\n    }\n\n    if (options.maxAge) {\n      if (typeof payload.iat !== 'number') {\n        return done(new JsonWebTokenError('iat required when maxAge is specified'));\n      }\n\n      const maxAgeTimestamp = timespan(options.maxAge, payload.iat);\n      if (typeof maxAgeTimestamp === 'undefined') {\n        return done(new JsonWebTokenError('\"maxAge\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n      }\n      if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {\n        return done(new TokenExpiredError('maxAge exceeded', new Date(maxAgeTimestamp * 1000)));\n      }\n    }\n\n    if (options.complete === true) {\n      const signature = decodedToken.signature;\n\n      return done(null, {\n        header: header,\n        payload: payload,\n        signature: signature\n      });\n    }\n\n    return done(null, payload);\n  });\n};\n","var Buffer = require('safe-buffer').Buffer;\nvar crypto = require('crypto');\nvar formatEcdsa = require('ecdsa-sig-formatter');\nvar util = require('util');\n\nvar MSG_INVALID_ALGORITHM = '\"%s\" is not a valid algorithm.\\n  Supported algorithms are:\\n  \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\", \"ES256\", \"ES384\", \"ES512\" and \"none\".'\nvar MSG_INVALID_SECRET = 'secret must be a string or buffer';\nvar MSG_INVALID_VERIFIER_KEY = 'key must be a string or a buffer';\nvar MSG_INVALID_SIGNER_KEY = 'key must be a string, a buffer or an object';\n\nvar supportsKeyObjects = typeof crypto.createPublicKey === 'function';\nif (supportsKeyObjects) {\n  MSG_INVALID_VERIFIER_KEY += ' or a KeyObject';\n  MSG_INVALID_SECRET += 'or a KeyObject';\n}\n\nfunction checkIsPublicKey(key) {\n  if (Buffer.isBuffer(key)) {\n    return;\n  }\n\n  if (typeof key === 'string') {\n    return;\n  }\n\n  if (!supportsKeyObjects) {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key !== 'object') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key.type !== 'string') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key.asymmetricKeyType !== 'string') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key.export !== 'function') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n};\n\nfunction checkIsPrivateKey(key) {\n  if (Buffer.isBuffer(key)) {\n    return;\n  }\n\n  if (typeof key === 'string') {\n    return;\n  }\n\n  if (typeof key === 'object') {\n    return;\n  }\n\n  throw typeError(MSG_INVALID_SIGNER_KEY);\n};\n\nfunction checkIsSecretKey(key) {\n  if (Buffer.isBuffer(key)) {\n    return;\n  }\n\n  if (typeof key === 'string') {\n    return key;\n  }\n\n  if (!supportsKeyObjects) {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n\n  if (typeof key !== 'object') {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n\n  if (key.type !== 'secret') {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n\n  if (typeof key.export !== 'function') {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n}\n\nfunction fromBase64(base64) {\n  return base64\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n\nfunction toBase64(base64url) {\n  base64url = base64url.toString();\n\n  var padding = 4 - base64url.length % 4;\n  if (padding !== 4) {\n    for (var i = 0; i < padding; ++i) {\n      base64url += '=';\n    }\n  }\n\n  return base64url\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n}\n\nfunction typeError(template) {\n  var args = [].slice.call(arguments, 1);\n  var errMsg = util.format.bind(util, template).apply(null, args);\n  return new TypeError(errMsg);\n}\n\nfunction bufferOrString(obj) {\n  return Buffer.isBuffer(obj) || typeof obj === 'string';\n}\n\nfunction normalizeInput(thing) {\n  if (!bufferOrString(thing))\n    thing = JSON.stringify(thing);\n  return thing;\n}\n\nfunction createHmacSigner(bits) {\n  return function sign(thing, secret) {\n    checkIsSecretKey(secret);\n    thing = normalizeInput(thing);\n    var hmac = crypto.createHmac('sha' + bits, secret);\n    var sig = (hmac.update(thing), hmac.digest('base64'))\n    return fromBase64(sig);\n  }\n}\n\nvar bufferEqual;\nvar timingSafeEqual = 'timingSafeEqual' in crypto ? function timingSafeEqual(a, b) {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n\n  return crypto.timingSafeEqual(a, b)\n} : function timingSafeEqual(a, b) {\n  if (!bufferEqual) {\n    bufferEqual = require('buffer-equal-constant-time');\n  }\n\n  return bufferEqual(a, b)\n}\n\nfunction createHmacVerifier(bits) {\n  return function verify(thing, signature, secret) {\n    var computedSig = createHmacSigner(bits)(thing, secret);\n    return timingSafeEqual(Buffer.from(signature), Buffer.from(computedSig));\n  }\n}\n\nfunction createKeySigner(bits) {\n return function sign(thing, privateKey) {\n    checkIsPrivateKey(privateKey);\n    thing = normalizeInput(thing);\n    // Even though we are specifying \"RSA\" here, this works with ECDSA\n    // keys as well.\n    var signer = crypto.createSign('RSA-SHA' + bits);\n    var sig = (signer.update(thing), signer.sign(privateKey, 'base64'));\n    return fromBase64(sig);\n  }\n}\n\nfunction createKeyVerifier(bits) {\n  return function verify(thing, signature, publicKey) {\n    checkIsPublicKey(publicKey);\n    thing = normalizeInput(thing);\n    signature = toBase64(signature);\n    var verifier = crypto.createVerify('RSA-SHA' + bits);\n    verifier.update(thing);\n    return verifier.verify(publicKey, signature, 'base64');\n  }\n}\n\nfunction createPSSKeySigner(bits) {\n  return function sign(thing, privateKey) {\n    checkIsPrivateKey(privateKey);\n    thing = normalizeInput(thing);\n    var signer = crypto.createSign('RSA-SHA' + bits);\n    var sig = (signer.update(thing), signer.sign({\n      key: privateKey,\n      padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n      saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n    }, 'base64'));\n    return fromBase64(sig);\n  }\n}\n\nfunction createPSSKeyVerifier(bits) {\n  return function verify(thing, signature, publicKey) {\n    checkIsPublicKey(publicKey);\n    thing = normalizeInput(thing);\n    signature = toBase64(signature);\n    var verifier = crypto.createVerify('RSA-SHA' + bits);\n    verifier.update(thing);\n    return verifier.verify({\n      key: publicKey,\n      padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n      saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n    }, signature, 'base64');\n  }\n}\n\nfunction createECDSASigner(bits) {\n  var inner = createKeySigner(bits);\n  return function sign() {\n    var signature = inner.apply(null, arguments);\n    signature = formatEcdsa.derToJose(signature, 'ES' + bits);\n    return signature;\n  };\n}\n\nfunction createECDSAVerifer(bits) {\n  var inner = createKeyVerifier(bits);\n  return function verify(thing, signature, publicKey) {\n    signature = formatEcdsa.joseToDer(signature, 'ES' + bits).toString('base64');\n    var result = inner(thing, signature, publicKey);\n    return result;\n  };\n}\n\nfunction createNoneSigner() {\n  return function sign() {\n    return '';\n  }\n}\n\nfunction createNoneVerifier() {\n  return function verify(thing, signature) {\n    return signature === '';\n  }\n}\n\nmodule.exports = function jwa(algorithm) {\n  var signerFactories = {\n    hs: createHmacSigner,\n    rs: createKeySigner,\n    ps: createPSSKeySigner,\n    es: createECDSASigner,\n    none: createNoneSigner,\n  }\n  var verifierFactories = {\n    hs: createHmacVerifier,\n    rs: createKeyVerifier,\n    ps: createPSSKeyVerifier,\n    es: createECDSAVerifer,\n    none: createNoneVerifier,\n  }\n  var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);\n  if (!match)\n    throw typeError(MSG_INVALID_ALGORITHM, algorithm);\n  var algo = (match[1] || match[3]).toLowerCase();\n  var bits = match[2];\n\n  return {\n    sign: signerFactories[algo](bits),\n    verify: verifierFactories[algo](bits),\n  }\n};\n","/*global exports*/\nvar SignStream = require('./lib/sign-stream');\nvar VerifyStream = require('./lib/verify-stream');\n\nvar ALGORITHMS = [\n  'HS256', 'HS384', 'HS512',\n  'RS256', 'RS384', 'RS512',\n  'PS256', 'PS384', 'PS512',\n  'ES256', 'ES384', 'ES512'\n];\n\nexports.ALGORITHMS = ALGORITHMS;\nexports.sign = SignStream.sign;\nexports.verify = VerifyStream.verify;\nexports.decode = VerifyStream.decode;\nexports.isValid = VerifyStream.isValid;\nexports.createSign = function createSign(opts) {\n  return new SignStream(opts);\n};\nexports.createVerify = function createVerify(opts) {\n  return new VerifyStream(opts);\n};\n","/*global module, process*/\nvar Buffer = require('safe-buffer').Buffer;\nvar Stream = require('stream');\nvar util = require('util');\n\nfunction DataStream(data) {\n  this.buffer = null;\n  this.writable = true;\n  this.readable = true;\n\n  // No input\n  if (!data) {\n    this.buffer = Buffer.alloc(0);\n    return this;\n  }\n\n  // Stream\n  if (typeof data.pipe === 'function') {\n    this.buffer = Buffer.alloc(0);\n    data.pipe(this);\n    return this;\n  }\n\n  // Buffer or String\n  // or Object (assumedly a passworded key)\n  if (data.length || typeof data === 'object') {\n    this.buffer = data;\n    this.writable = false;\n    process.nextTick(function () {\n      this.emit('end', data);\n      this.readable = false;\n      this.emit('close');\n    }.bind(this));\n    return this;\n  }\n\n  throw new TypeError('Unexpected data type ('+ typeof data + ')');\n}\nutil.inherits(DataStream, Stream);\n\nDataStream.prototype.write = function write(data) {\n  this.buffer = Buffer.concat([this.buffer, Buffer.from(data)]);\n  this.emit('data', data);\n};\n\nDataStream.prototype.end = function end(data) {\n  if (data)\n    this.write(data);\n  this.emit('end', data);\n  this.emit('close');\n  this.writable = false;\n  this.readable = false;\n};\n\nmodule.exports = DataStream;\n","/*global module*/\nvar Buffer = require('safe-buffer').Buffer;\nvar DataStream = require('./data-stream');\nvar jwa = require('jwa');\nvar Stream = require('stream');\nvar toString = require('./tostring');\nvar util = require('util');\n\nfunction base64url(string, encoding) {\n  return Buffer\n    .from(string, encoding)\n    .toString('base64')\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n\nfunction jwsSecuredInput(header, payload, encoding) {\n  encoding = encoding || 'utf8';\n  var encodedHeader = base64url(toString(header), 'binary');\n  var encodedPayload = base64url(toString(payload), encoding);\n  return util.format('%s.%s', encodedHeader, encodedPayload);\n}\n\nfunction jwsSign(opts) {\n  var header = opts.header;\n  var payload = opts.payload;\n  var secretOrKey = opts.secret || opts.privateKey;\n  var encoding = opts.encoding;\n  var algo = jwa(header.alg);\n  var securedInput = jwsSecuredInput(header, payload, encoding);\n  var signature = algo.sign(securedInput, secretOrKey);\n  return util.format('%s.%s', securedInput, signature);\n}\n\nfunction SignStream(opts) {\n  var secret = opts.secret||opts.privateKey||opts.key;\n  var secretStream = new DataStream(secret);\n  this.readable = true;\n  this.header = opts.header;\n  this.encoding = opts.encoding;\n  this.secret = this.privateKey = this.key = secretStream;\n  this.payload = new DataStream(opts.payload);\n  this.secret.once('close', function () {\n    if (!this.payload.writable && this.readable)\n      this.sign();\n  }.bind(this));\n\n  this.payload.once('close', function () {\n    if (!this.secret.writable && this.readable)\n      this.sign();\n  }.bind(this));\n}\nutil.inherits(SignStream, Stream);\n\nSignStream.prototype.sign = function sign() {\n  try {\n    var signature = jwsSign({\n      header: this.header,\n      payload: this.payload.buffer,\n      secret: this.secret.buffer,\n      encoding: this.encoding\n    });\n    this.emit('done', signature);\n    this.emit('data', signature);\n    this.emit('end');\n    this.readable = false;\n    return signature;\n  } catch (e) {\n    this.readable = false;\n    this.emit('error', e);\n    this.emit('close');\n  }\n};\n\nSignStream.sign = jwsSign;\n\nmodule.exports = SignStream;\n","/*global module*/\nvar Buffer = require('buffer').Buffer;\n\nmodule.exports = function toString(obj) {\n  if (typeof obj === 'string')\n    return obj;\n  if (typeof obj === 'number' || Buffer.isBuffer(obj))\n    return obj.toString();\n  return JSON.stringify(obj);\n};\n","/*global module*/\nvar Buffer = require('safe-buffer').Buffer;\nvar DataStream = require('./data-stream');\nvar jwa = require('jwa');\nvar Stream = require('stream');\nvar toString = require('./tostring');\nvar util = require('util');\nvar JWS_REGEX = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\n\nfunction isObject(thing) {\n  return Object.prototype.toString.call(thing) === '[object Object]';\n}\n\nfunction safeJsonParse(thing) {\n  if (isObject(thing))\n    return thing;\n  try { return JSON.parse(thing); }\n  catch (e) { return undefined; }\n}\n\nfunction headerFromJWS(jwsSig) {\n  var encodedHeader = jwsSig.split('.', 1)[0];\n  return safeJsonParse(Buffer.from(encodedHeader, 'base64').toString('binary'));\n}\n\nfunction securedInputFromJWS(jwsSig) {\n  return jwsSig.split('.', 2).join('.');\n}\n\nfunction signatureFromJWS(jwsSig) {\n  return jwsSig.split('.')[2];\n}\n\nfunction payloadFromJWS(jwsSig, encoding) {\n  encoding = encoding || 'utf8';\n  var payload = jwsSig.split('.')[1];\n  return Buffer.from(payload, 'base64').toString(encoding);\n}\n\nfunction isValidJws(string) {\n  return JWS_REGEX.test(string) && !!headerFromJWS(string);\n}\n\nfunction jwsVerify(jwsSig, algorithm, secretOrKey) {\n  if (!algorithm) {\n    var err = new Error(\"Missing algorithm parameter for jws.verify\");\n    err.code = \"MISSING_ALGORITHM\";\n    throw err;\n  }\n  jwsSig = toString(jwsSig);\n  var signature = signatureFromJWS(jwsSig);\n  var securedInput = securedInputFromJWS(jwsSig);\n  var algo = jwa(algorithm);\n  return algo.verify(securedInput, signature, secretOrKey);\n}\n\nfunction jwsDecode(jwsSig, opts) {\n  opts = opts || {};\n  jwsSig = toString(jwsSig);\n\n  if (!isValidJws(jwsSig))\n    return null;\n\n  var header = headerFromJWS(jwsSig);\n\n  if (!header)\n    return null;\n\n  var payload = payloadFromJWS(jwsSig);\n  if (header.typ === 'JWT' || opts.json)\n    payload = JSON.parse(payload, opts.encoding);\n\n  return {\n    header: header,\n    payload: payload,\n    signature: signatureFromJWS(jwsSig)\n  };\n}\n\nfunction VerifyStream(opts) {\n  opts = opts || {};\n  var secretOrKey = opts.secret||opts.publicKey||opts.key;\n  var secretStream = new DataStream(secretOrKey);\n  this.readable = true;\n  this.algorithm = opts.algorithm;\n  this.encoding = opts.encoding;\n  this.secret = this.publicKey = this.key = secretStream;\n  this.signature = new DataStream(opts.signature);\n  this.secret.once('close', function () {\n    if (!this.signature.writable && this.readable)\n      this.verify();\n  }.bind(this));\n\n  this.signature.once('close', function () {\n    if (!this.secret.writable && this.readable)\n      this.verify();\n  }.bind(this));\n}\nutil.inherits(VerifyStream, Stream);\nVerifyStream.prototype.verify = function verify() {\n  try {\n    var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);\n    var obj = jwsDecode(this.signature.buffer, this.encoding);\n    this.emit('done', valid, obj);\n    this.emit('data', valid);\n    this.emit('end');\n    this.readable = false;\n    return valid;\n  } catch (e) {\n    this.readable = false;\n    this.emit('error', e);\n    this.emit('close');\n  }\n};\n\nVerifyStream.decode = jwsDecode;\nVerifyStream.isValid = isValidJws;\nVerifyStream.verify = jwsVerify;\n\nmodule.exports = VerifyStream;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object ? baseValues(object, keys(object)) : [];\n}\n\nmodule.exports = includes;\n","/**\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a boolean primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isBoolean(false);\n * // => true\n *\n * _.isBoolean(null);\n * // => false\n */\nfunction isBoolean(value) {\n  return value === true || value === false ||\n    (isObjectLike(value) && objectToString.call(value) == boolTag);\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = isBoolean;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is an integer.\n *\n * **Note:** This method is based on\n * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n * @example\n *\n * _.isInteger(3);\n * // => true\n *\n * _.isInteger(Number.MIN_VALUE);\n * // => false\n *\n * _.isInteger(Infinity);\n * // => false\n *\n * _.isInteger('3');\n * // => false\n */\nfunction isInteger(value) {\n  return typeof value == 'number' && value == toInteger(value);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = isInteger;\n","/**\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n * as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && objectToString.call(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) ||\n      objectToString.call(value) != objectTag || isHostObject(value)) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nmodule.exports = isPlainObject;\n","/**\n * lodash 4.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @type Function\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n}\n\nmodule.exports = isString;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Creates a function that invokes `func`, with the `this` binding and arguments\n * of the created function, while it's called less than `n` times. Subsequent\n * calls to the created function return the result of the last `func` invocation.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {number} n The number of calls at which `func` is no longer invoked.\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * jQuery(element).on('click', _.before(5, addContactToList));\n * // => Allows adding up to 4 contacts to the list.\n */\nfunction before(n, func) {\n  var result;\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  n = toInteger(n);\n  return function() {\n    if (--n > 0) {\n      result = func.apply(this, arguments);\n    }\n    if (n <= 1) {\n      func = undefined;\n    }\n    return result;\n  };\n}\n\n/**\n * Creates a function that is restricted to invoking `func` once. Repeat calls\n * to the function return the value of the first invocation. The `func` is\n * invoked with the `this` binding and arguments of the created function.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * var initialize = _.once(createApplication);\n * initialize();\n * initialize();\n * // => `createApplication` is invoked once\n */\nfunction once(func) {\n  return before(2, func);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = once;\n","module.exports = Pager\n\nfunction Pager (pageSize, opts) {\n  if (!(this instanceof Pager)) return new Pager(pageSize, opts)\n\n  this.length = 0\n  this.updates = []\n  this.path = new Uint16Array(4)\n  this.pages = new Array(32768)\n  this.maxPages = this.pages.length\n  this.level = 0\n  this.pageSize = pageSize || 1024\n  this.deduplicate = opts ? opts.deduplicate : null\n  this.zeros = this.deduplicate ? alloc(this.deduplicate.length) : null\n}\n\nPager.prototype.updated = function (page) {\n  while (this.deduplicate && page.buffer[page.deduplicate] === this.deduplicate[page.deduplicate]) {\n    page.deduplicate++\n    if (page.deduplicate === this.deduplicate.length) {\n      page.deduplicate = 0\n      if (page.buffer.equals && page.buffer.equals(this.deduplicate)) page.buffer = this.deduplicate\n      break\n    }\n  }\n  if (page.updated || !this.updates) return\n  page.updated = true\n  this.updates.push(page)\n}\n\nPager.prototype.lastUpdate = function () {\n  if (!this.updates || !this.updates.length) return null\n  var page = this.updates.pop()\n  page.updated = false\n  return page\n}\n\nPager.prototype._array = function (i, noAllocate) {\n  if (i >= this.maxPages) {\n    if (noAllocate) return\n    grow(this, i)\n  }\n\n  factor(i, this.path)\n\n  var arr = this.pages\n\n  for (var j = this.level; j > 0; j--) {\n    var p = this.path[j]\n    var next = arr[p]\n\n    if (!next) {\n      if (noAllocate) return\n      next = arr[p] = new Array(32768)\n    }\n\n    arr = next\n  }\n\n  return arr\n}\n\nPager.prototype.get = function (i, noAllocate) {\n  var arr = this._array(i, noAllocate)\n  var first = this.path[0]\n  var page = arr && arr[first]\n\n  if (!page && !noAllocate) {\n    page = arr[first] = new Page(i, alloc(this.pageSize))\n    if (i >= this.length) this.length = i + 1\n  }\n\n  if (page && page.buffer === this.deduplicate && this.deduplicate && !noAllocate) {\n    page.buffer = copy(page.buffer)\n    page.deduplicate = 0\n  }\n\n  return page\n}\n\nPager.prototype.set = function (i, buf) {\n  var arr = this._array(i, false)\n  var first = this.path[0]\n\n  if (i >= this.length) this.length = i + 1\n\n  if (!buf || (this.zeros && buf.equals && buf.equals(this.zeros))) {\n    arr[first] = undefined\n    return\n  }\n\n  if (this.deduplicate && buf.equals && buf.equals(this.deduplicate)) {\n    buf = this.deduplicate\n  }\n\n  var page = arr[first]\n  var b = truncate(buf, this.pageSize)\n\n  if (page) page.buffer = b\n  else arr[first] = new Page(i, b)\n}\n\nPager.prototype.toBuffer = function () {\n  var list = new Array(this.length)\n  var empty = alloc(this.pageSize)\n  var ptr = 0\n\n  while (ptr < list.length) {\n    var arr = this._array(ptr, true)\n    for (var i = 0; i < 32768 && ptr < list.length; i++) {\n      list[ptr++] = (arr && arr[i]) ? arr[i].buffer : empty\n    }\n  }\n\n  return Buffer.concat(list)\n}\n\nfunction grow (pager, index) {\n  while (pager.maxPages < index) {\n    var old = pager.pages\n    pager.pages = new Array(32768)\n    pager.pages[0] = old\n    pager.level++\n    pager.maxPages *= 32768\n  }\n}\n\nfunction truncate (buf, len) {\n  if (buf.length === len) return buf\n  if (buf.length > len) return buf.slice(0, len)\n  var cpy = alloc(len)\n  buf.copy(cpy)\n  return cpy\n}\n\nfunction alloc (size) {\n  if (Buffer.alloc) return Buffer.alloc(size)\n  var buf = new Buffer(size)\n  buf.fill(0)\n  return buf\n}\n\nfunction copy (buf) {\n  var cpy = Buffer.allocUnsafe ? Buffer.allocUnsafe(buf.length) : new Buffer(buf.length)\n  buf.copy(cpy)\n  return cpy\n}\n\nfunction Page (i, buf) {\n  this.offset = i * buf.length\n  this.buffer = buf\n  this.updated = false\n  this.deduplicate = 0\n}\n\nfunction factor (n, out) {\n  n = (n - (out[0] = (n & 32767))) / 32768\n  n = (n - (out[1] = (n & 32767))) / 32768\n  out[3] = ((n - (out[2] = (n & 32767))) / 32768) & 32767\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommaAndColonSeparatedRecord = exports.ConnectionString = exports.redactConnectionString = void 0;\nconst whatwg_url_1 = require(\"whatwg-url\");\nconst redact_1 = require(\"./redact\");\nObject.defineProperty(exports, \"redactConnectionString\", { enumerable: true, get: function () { return redact_1.redactConnectionString; } });\nconst DUMMY_HOSTNAME = '__this_is_a_placeholder__';\nfunction connectionStringHasValidScheme(connectionString) {\n    return (connectionString.startsWith('mongodb://') ||\n        connectionString.startsWith('mongodb+srv://'));\n}\nconst HOSTS_REGEX = /^(?<protocol>[^/]+):\\/\\/(?:(?<username>[^:@]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^/?@]*)(?<rest>.*)/;\nclass CaseInsensitiveMap extends Map {\n    delete(name) {\n        return super.delete(this._normalizeKey(name));\n    }\n    get(name) {\n        return super.get(this._normalizeKey(name));\n    }\n    has(name) {\n        return super.has(this._normalizeKey(name));\n    }\n    set(name, value) {\n        return super.set(this._normalizeKey(name), value);\n    }\n    _normalizeKey(name) {\n        name = `${name}`;\n        for (const key of this.keys()) {\n            if (key.toLowerCase() === name.toLowerCase()) {\n                name = key;\n                break;\n            }\n        }\n        return name;\n    }\n}\nfunction caseInsenstiveURLSearchParams(Ctor) {\n    return class CaseInsenstiveURLSearchParams extends Ctor {\n        append(name, value) {\n            return super.append(this._normalizeKey(name), value);\n        }\n        delete(name) {\n            return super.delete(this._normalizeKey(name));\n        }\n        get(name) {\n            return super.get(this._normalizeKey(name));\n        }\n        getAll(name) {\n            return super.getAll(this._normalizeKey(name));\n        }\n        has(name) {\n            return super.has(this._normalizeKey(name));\n        }\n        set(name, value) {\n            return super.set(this._normalizeKey(name), value);\n        }\n        keys() {\n            return super.keys();\n        }\n        values() {\n            return super.values();\n        }\n        entries() {\n            return super.entries();\n        }\n        [Symbol.iterator]() {\n            return super[Symbol.iterator]();\n        }\n        _normalizeKey(name) {\n            return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n        }\n    };\n}\nclass URLWithoutHost extends whatwg_url_1.URL {\n}\nclass MongoParseError extends Error {\n    get name() {\n        return 'MongoParseError';\n    }\n}\nclass ConnectionString extends URLWithoutHost {\n    constructor(uri, options = {}) {\n        var _a;\n        const { looseValidation } = options;\n        if (!looseValidation && !connectionStringHasValidScheme(uri)) {\n            throw new MongoParseError('Invalid scheme, expected connection string to start with \"mongodb://\" or \"mongodb+srv://\"');\n        }\n        const match = uri.match(HOSTS_REGEX);\n        if (!match) {\n            throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n        }\n        const { protocol, username, password, hosts, rest } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n        if (!looseValidation) {\n            if (!protocol || !hosts) {\n                throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n            }\n            try {\n                decodeURIComponent(username !== null && username !== void 0 ? username : '');\n                decodeURIComponent(password !== null && password !== void 0 ? password : '');\n            }\n            catch (err) {\n                throw new MongoParseError(err.message);\n            }\n            const illegalCharacters = /[:/?#[\\]@]/gi;\n            if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n                throw new MongoParseError(`Username contains unescaped characters ${username}`);\n            }\n            if (!username || !password) {\n                const uriWithoutProtocol = uri.replace(`${protocol}://`, '');\n                if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n                    throw new MongoParseError('URI contained empty userinfo section');\n                }\n            }\n            if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n                throw new MongoParseError('Password contains unescaped characters');\n            }\n        }\n        let authString = '';\n        if (typeof username === 'string')\n            authString += username;\n        if (typeof password === 'string')\n            authString += `:${password}`;\n        if (authString)\n            authString += '@';\n        try {\n            super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n        }\n        catch (err) {\n            if (looseValidation) {\n                new ConnectionString(uri, {\n                    ...options,\n                    looseValidation: false\n                });\n            }\n            if (typeof err.message === 'string') {\n                err.message = err.message.replace(DUMMY_HOSTNAME, hosts);\n            }\n            throw err;\n        }\n        this._hosts = hosts.split(',');\n        if (!looseValidation) {\n            if (this.isSRV && this.hosts.length !== 1) {\n                throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n            }\n            if (this.isSRV && this.hosts.some(host => host.includes(':'))) {\n                throw new MongoParseError('mongodb+srv URI cannot have port number');\n            }\n        }\n        if (!this.pathname) {\n            this.pathname = '/';\n        }\n        Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n    }\n    get host() { return DUMMY_HOSTNAME; }\n    set host(_ignored) { throw new Error('No single host for connection string'); }\n    get hostname() { return DUMMY_HOSTNAME; }\n    set hostname(_ignored) { throw new Error('No single host for connection string'); }\n    get port() { return ''; }\n    set port(_ignored) { throw new Error('No single host for connection string'); }\n    get href() { return this.toString(); }\n    set href(_ignored) { throw new Error('Cannot set href for connection strings'); }\n    get isSRV() {\n        return this.protocol.includes('srv');\n    }\n    get hosts() {\n        return this._hosts;\n    }\n    set hosts(list) {\n        this._hosts = list;\n    }\n    toString() {\n        return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(','));\n    }\n    clone() {\n        return new ConnectionString(this.toString(), {\n            looseValidation: true\n        });\n    }\n    redact(options) {\n        return (0, redact_1.redactValidConnectionString)(this, options);\n    }\n    typedSearchParams() {\n        const sametype = false && new (caseInsenstiveURLSearchParams(whatwg_url_1.URLSearchParams))();\n        return this.searchParams;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        const { href, origin, protocol, username, password, hosts, pathname, search, searchParams, hash } = this;\n        return { href, origin, protocol, username, password, hosts, pathname, search, searchParams, hash };\n    }\n}\nexports.ConnectionString = ConnectionString;\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n    constructor(from) {\n        super();\n        for (const entry of (from !== null && from !== void 0 ? from : '').split(',')) {\n            if (!entry)\n                continue;\n            const colonIndex = entry.indexOf(':');\n            if (colonIndex === -1) {\n                this.set(entry, '');\n            }\n            else {\n                this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n            }\n        }\n    }\n    toString() {\n        return [...this].map(entry => entry.join(':')).join(',');\n    }\n}\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;\nexports.default = ConnectionString;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.redactConnectionString = exports.redactValidConnectionString = void 0;\nconst index_1 = __importStar(require(\"./index\"));\nfunction redactValidConnectionString(inputUrl, options) {\n    var _a, _b;\n    const url = inputUrl.clone();\n    const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '_credentials_';\n    const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n    if ((url.username || url.password) && redactUsernames) {\n        url.username = replacementString;\n        url.password = '';\n    }\n    else if (url.password) {\n        url.password = replacementString;\n    }\n    if (url.searchParams.has('authMechanismProperties')) {\n        const props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get('authMechanismProperties'));\n        if (props.get('AWS_SESSION_TOKEN')) {\n            props.set('AWS_SESSION_TOKEN', replacementString);\n            url.searchParams.set('authMechanismProperties', props.toString());\n        }\n    }\n    if (url.searchParams.has('tlsCertificateKeyFilePassword')) {\n        url.searchParams.set('tlsCertificateKeyFilePassword', replacementString);\n    }\n    if (url.searchParams.has('proxyUsername') && redactUsernames) {\n        url.searchParams.set('proxyUsername', replacementString);\n    }\n    if (url.searchParams.has('proxyPassword')) {\n        url.searchParams.set('proxyPassword', replacementString);\n    }\n    return url;\n}\nexports.redactValidConnectionString = redactValidConnectionString;\nfunction redactConnectionString(uri, options) {\n    var _a, _b;\n    const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '<credentials>';\n    const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n    let parsed;\n    try {\n        parsed = new index_1.default(uri);\n    }\n    catch (_c) { }\n    if (parsed) {\n        options = { ...options, replacementString: '___credentials___' };\n        return parsed.redact(options).toString().replace(/___credentials___/g, replacementString);\n    }\n    const R = replacementString;\n    const replacements = [\n        uri => uri.replace(redactUsernames ? /(\\/\\/)(.*)(@)/g : /(\\/\\/[^@]*:)(.*)(@)/g, `$1${R}$3`),\n        uri => uri.replace(/(AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi, `$1${R}`),\n        uri => uri.replace(/(tlsCertificateKeyFilePassword=)([^&]+)/gi, `$1${R}`),\n        uri => redactUsernames ? uri.replace(/(proxyUsername=)([^&]+)/gi, `$1${R}`) : uri,\n        uri => uri.replace(/(proxyPassword=)([^&]+)/gi, `$1${R}`)\n    ];\n    for (const replacer of replacements) {\n        uri = replacer(uri);\n    }\n    return uri;\n}\nexports.redactConnectionString = redactConnectionString;\n//# sourceMappingURL=redact.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Admin = void 0;\nconst bson_1 = require(\"./bson\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference,\n            timeoutMS: options?.timeoutMS ?? this.s.db.timeoutMS\n        }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async buildInfo(options) {\n        return await this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverInfo(options) {\n        return await this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverStatus(options) {\n        return await this.command({ serverStatus: 1 }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    async ping(options) {\n        return await this.command({ ping: 1 }, options);\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    async validateCollection(collectionName, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    async listDatabases(options) {\n        return await (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, { timeoutMS: this.s.db.timeoutMS, ...options }));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    async replSetGetStatus(options) {\n        return await this.command({ replSetGetStatus: 1 }, options);\n    }\n}\nexports.Admin = Admin;\n//# sourceMappingURL=admin.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./index\"), exports);\n/**\n * @internal\n *\n * Since we don't bundle tslib helpers, we need to polyfill this method.\n *\n * This is used in the generated JS.  Adapted from https://github.com/microsoft/TypeScript/blob/aafdfe5b3f76f5c41abeec412ce73c86da94c75f/src/compiler/factory/emitHelpers.ts#L1202.\n */\nfunction __exportStar(mod) {\n    for (const key of Object.keys(mod)) {\n        Object.defineProperty(exports, key, {\n            enumerable: true,\n            get: function () {\n                return mod[key];\n            }\n        });\n    }\n}\n//# sourceMappingURL=beta.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toUTF8 = exports.getBigInt64LE = exports.getFloat64LE = exports.getInt32LE = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.EJSON = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSONError = exports.BSON = exports.Binary = void 0;\nexports.parseToElementsToArray = parseToElementsToArray;\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\nexports.resolveBSONOptions = resolveBSONOptions;\nexports.parseUtf8ValidationOption = parseUtf8ValidationOption;\n/* eslint-disable no-restricted-imports */\nconst bson_1 = require(\"bson\");\nvar bson_2 = require(\"bson\");\nObject.defineProperty(exports, \"Binary\", { enumerable: true, get: function () { return bson_2.Binary; } });\nObject.defineProperty(exports, \"BSON\", { enumerable: true, get: function () { return bson_2.BSON; } });\nObject.defineProperty(exports, \"BSONError\", { enumerable: true, get: function () { return bson_2.BSONError; } });\nObject.defineProperty(exports, \"BSONRegExp\", { enumerable: true, get: function () { return bson_2.BSONRegExp; } });\nObject.defineProperty(exports, \"BSONSymbol\", { enumerable: true, get: function () { return bson_2.BSONSymbol; } });\nObject.defineProperty(exports, \"BSONType\", { enumerable: true, get: function () { return bson_2.BSONType; } });\nObject.defineProperty(exports, \"calculateObjectSize\", { enumerable: true, get: function () { return bson_2.calculateObjectSize; } });\nObject.defineProperty(exports, \"Code\", { enumerable: true, get: function () { return bson_2.Code; } });\nObject.defineProperty(exports, \"DBRef\", { enumerable: true, get: function () { return bson_2.DBRef; } });\nObject.defineProperty(exports, \"Decimal128\", { enumerable: true, get: function () { return bson_2.Decimal128; } });\nObject.defineProperty(exports, \"deserialize\", { enumerable: true, get: function () { return bson_2.deserialize; } });\nObject.defineProperty(exports, \"Double\", { enumerable: true, get: function () { return bson_2.Double; } });\nObject.defineProperty(exports, \"EJSON\", { enumerable: true, get: function () { return bson_2.EJSON; } });\nObject.defineProperty(exports, \"Int32\", { enumerable: true, get: function () { return bson_2.Int32; } });\nObject.defineProperty(exports, \"Long\", { enumerable: true, get: function () { return bson_2.Long; } });\nObject.defineProperty(exports, \"MaxKey\", { enumerable: true, get: function () { return bson_2.MaxKey; } });\nObject.defineProperty(exports, \"MinKey\", { enumerable: true, get: function () { return bson_2.MinKey; } });\nObject.defineProperty(exports, \"ObjectId\", { enumerable: true, get: function () { return bson_2.ObjectId; } });\nObject.defineProperty(exports, \"serialize\", { enumerable: true, get: function () { return bson_2.serialize; } });\nObject.defineProperty(exports, \"Timestamp\", { enumerable: true, get: function () { return bson_2.Timestamp; } });\nObject.defineProperty(exports, \"UUID\", { enumerable: true, get: function () { return bson_2.UUID; } });\nfunction parseToElementsToArray(bytes, offset) {\n    const res = bson_1.BSON.onDemand.parseToElements(bytes, offset);\n    return Array.isArray(res) ? res : [...res];\n}\nexports.getInt32LE = bson_1.BSON.onDemand.NumberUtils.getInt32LE;\nexports.getFloat64LE = bson_1.BSON.onDemand.NumberUtils.getFloat64LE;\nexports.getBigInt64LE = bson_1.BSON.onDemand.NumberUtils.getBigInt64LE;\nexports.toUTF8 = bson_1.BSON.onDemand.ByteUtils.toUTF8;\nfunction pluckBSONSerializeOptions(options) {\n    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegExp, raw, enableUtf8Validation } = options;\n    return {\n        fieldsAsRaw,\n        useBigInt64,\n        promoteValues,\n        promoteBuffers,\n        promoteLongs,\n        serializeFunctions,\n        ignoreUndefined,\n        bsonRegExp,\n        raw,\n        enableUtf8Validation\n    };\n}\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n    const parentOptions = parent?.bsonOptions;\n    return {\n        raw: options?.raw ?? parentOptions?.raw ?? false,\n        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n        bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n    };\n}\n/** @internal */\nfunction parseUtf8ValidationOption(options) {\n    const enableUtf8Validation = options?.enableUtf8Validation;\n    if (enableUtf8Validation === false) {\n        return { utf8: false };\n    }\n    return { utf8: { writeErrors: false } };\n}\n//# sourceMappingURL=bson.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BulkOperationBase = exports.BulkWriteShimOperation = exports.FindOperators = exports.MongoBulkWriteError = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nexports.mergeBatchResults = mergeBatchResults;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst delete_1 = require(\"../operations/delete\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst insert_1 = require(\"../operations/insert\");\nconst operation_1 = require(\"../operations/operation\");\nconst update_1 = require(\"../operations/update\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\n/** @public */\nexports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n    constructor(batchType, originalZeroIndex) {\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids) {\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n    constructor(bulkResult, isOrdered) {\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n        Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok() {\n        return this.result.ok;\n    }\n    /**\n     * Returns document_ids that were actually inserted\n     * @internal\n     */\n    getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n        if (bulkResult.writeErrors.length === 0)\n            return bulkResult.insertedIds;\n        if (isOrdered) {\n            return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n        }\n        return bulkResult.insertedIds.filter(({ index }) => !bulkResult.writeErrors.some(writeError => index === writeError.index));\n    }\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n    getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors from the bulk operation */\n    getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n    getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n    getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        }\n        else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        }\n        else {\n            // Combine the errors\n            let errmsg = '';\n            for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0)\n                    errmsg = errmsg + ' and ';\n            }\n            return new WriteConcernError({ errmsg, code: error_1.MONGODB_ERROR_CODES.WriteConcernTimeout });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${bson_1.EJSON.stringify(this.result)})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n    constructor(error) {\n        this.serverError = error;\n    }\n    /** Write concern error code. */\n    get code() {\n        return this.serverError.code;\n    }\n    /** Write concern error message. */\n    get errmsg() {\n        return this.serverError.errmsg;\n    }\n    /** Write concern error info. */\n    get errInfo() {\n        return this.serverError.errInfo;\n    }\n    toJSON() {\n        return this.serverError;\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n    constructor(err) {\n        this.err = err;\n    }\n    /** WriteError code. */\n    get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n    get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */\n    get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */\n    get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n    getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    }\n    else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    }\n    else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for (let i = 0; i < result.upserted.length; i++) {\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    }\n    else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === 'number') {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        }\n        else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for (let i = 0; i < result.writeErrors.length; i++) {\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nasync function executeCommands(bulkOperation, options) {\n    if (bulkOperation.s.batches.length === 0) {\n        return new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n    }\n    for (const batch of bulkOperation.s.batches) {\n        const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n            ...options,\n            ordered: bulkOperation.isOrdered\n        });\n        if (finalOptions.bypassDocumentValidation !== true) {\n            delete finalOptions.bypassDocumentValidation;\n        }\n        // Is the bypassDocumentValidation options specific\n        if (bulkOperation.s.bypassDocumentValidation === true) {\n            finalOptions.bypassDocumentValidation = true;\n        }\n        // Is the checkKeys option disabled\n        if (bulkOperation.s.checkKeys === false) {\n            finalOptions.checkKeys = false;\n        }\n        if (finalOptions.retryWrites) {\n            if (isUpdateBatch(batch)) {\n                finalOptions.retryWrites =\n                    finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n            }\n            if (isDeleteBatch(batch)) {\n                finalOptions.retryWrites =\n                    finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n            }\n        }\n        const operation = isInsertBatch(batch)\n            ? new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n            : isUpdateBatch(batch)\n                ? new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                : isDeleteBatch(batch)\n                    ? new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                    : null;\n        if (operation == null)\n            throw new error_1.MongoRuntimeError(`Unknown batchType: ${batch.batchType}`);\n        let thrownError = null;\n        let result;\n        try {\n            result = await (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, operation, finalOptions.timeoutContext);\n        }\n        catch (error) {\n            thrownError = error;\n        }\n        if (thrownError != null) {\n            if (thrownError instanceof error_1.MongoWriteConcernError) {\n                mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n                const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n                throw new MongoBulkWriteError({\n                    message: thrownError.result.writeConcernError.errmsg,\n                    code: thrownError.result.writeConcernError.code\n                }, writeResult);\n            }\n            else {\n                // Error is a driver related error not a bulk op error, return early\n                throw new MongoBulkWriteError(thrownError, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n            }\n        }\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n        bulkOperation.handleWriteError(writeResult);\n    }\n    bulkOperation.s.batches.length = 0;\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n    bulkOperation.handleWriteError(writeResult);\n    return writeResult;\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(error, result) {\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError)\n            this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */\n    constructor(bulkOperation) {\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument, this.bulkOperation.bsonOptions)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp, multi: false }));\n    }\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp, multi: false }));\n    }\n    /** Add a delete one operation to the bulk operation */\n    deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 1 }));\n    }\n    /** Add a delete many operation to the bulk operation */\n    delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 0 }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */\n    collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */\n    hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options) {\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    async execute(_server, session, timeoutContext) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return await executeCommands(this.bulkOperation, { ...this.options, timeoutContext });\n    }\n}\nexports.BulkWriteShimOperation = BulkWriteShimOperation;\n/** @public */\nclass BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */\n    constructor(collection, options, isOrdered) {\n        this.collection = collection;\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document) {\n        (0, utils_1.maybeAddIdToDocuments)(this.collection, document, {\n            forceServerObjectId: this.shouldForceServerObjectId()\n        });\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op) {\n        if (op == null || typeof op !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n        }\n        if ('insertOne' in op) {\n            const forceServerObjectId = this.shouldForceServerObjectId();\n            const document = op.insertOne && op.insertOne.document == null\n                ? // TODO(NODE-6003): remove support for omitting the `documents` subdocument in bulk inserts\n                    op.insertOne\n                : op.insertOne.document;\n            (0, utils_1.maybeAddIdToDocuments)(this.collection, document, { forceServerObjectId });\n            return this.addToOperationsList(exports.BatchType.INSERT, document);\n        }\n        if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n            if ('replaceOne' in op) {\n                if ('q' in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne, multi: false });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateOne' in op) {\n                if ('q' in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u, this.bsonOptions)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateMany' in op) {\n                if ('q' in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u, this.bsonOptions)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if ('deleteOne' in op) {\n            if ('q' in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne, limit: 1 }));\n        }\n        if ('deleteMany' in op) {\n            if ('q' in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany, limit: 0 }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n    get length() {\n        return this.s.currentIndex;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [...this.s.batches];\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                this.s.batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n        }\n        this.s.executed = true;\n        const finalOptions = { ...this.s.options, ...options };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return await (0, execute_operation_1.executeOperation)(this.s.collection.client, operation, finalOptions.timeoutContext);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n    handleWriteError(writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg\n                ? this.s.bulkResult.writeErrors[0].errmsg\n                : 'write operation failed';\n            throw new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult);\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            throw new MongoBulkWriteError(writeConcernError, writeResult);\n        }\n    }\n    shouldForceServerObjectId() {\n        return (this.s.options.forceServerObjectId === true ||\n            this.s.collection.s.db.options?.forceServerObjectId === true);\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp)\n        currentOp = {};\n    return currentOp;\n}\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrderedBulkOperation = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst common_1 = require(\"./common\");\n/** @public */\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize)\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatchSize > 0 &&\n                this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation;\n//# sourceMappingURL=ordered.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnorderedBulkOperation = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst common_1 = require(\"./common\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, false);\n    }\n    handleWriteError(writeResult) {\n        if (this.s.batches.length) {\n            return;\n        }\n        return super.handleWriteError(writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatch.size > 0 &&\n                this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;\n//# sourceMappingURL=unordered.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeStream = void 0;\nconst collection_1 = require(\"./collection\");\nconst constants_1 = require(\"./constants\");\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst resource_management_1 = require(\"./resource_management\");\nconst timeout_1 = require(\"./timeout\");\nconst utils_1 = require(\"./utils\");\nconst CHANGE_STREAM_OPTIONS = [\n    'resumeAfter',\n    'startAfter',\n    'startAtOperationTime',\n    'fullDocument',\n    'fullDocumentBeforeChange',\n    'showExpandedEvents'\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    async asyncDispose() {\n        await this.close();\n    }\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = { ...options };\n        let serverSelectionTimeoutMS;\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n            serverSelectionTimeoutMS = parent.s.db.client.options.serverSelectionTimeoutMS;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n            serverSelectionTimeoutMS = parent.client.options.serverSelectionTimeoutMS;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n            serverSelectionTimeoutMS = parent.options.serverSelectionTimeoutMS;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.contextOwner = Symbol();\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this.isClosed = false;\n        this.mode = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                this.cursorStream?.removeAllListeners('data');\n            }\n        });\n        if (this.options.timeoutMS != null) {\n            this.timeoutContext = new timeout_1.CSOTTimeoutContext({\n                timeoutMS: this.options.timeoutMS,\n                serverSelectionTimeoutMS\n            });\n        }\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        this.timeoutContext?.refresh();\n        try {\n            while (true) {\n                try {\n                    const hasNext = await this.cursor.hasNext();\n                    return hasNext;\n                }\n                catch (error) {\n                    try {\n                        await this._processErrorIteratorMode(error, this.cursor.id != null);\n                    }\n                    catch (error) {\n                        if (error instanceof error_1.MongoOperationTimeoutError && this.cursor.id == null) {\n                            throw error;\n                        }\n                        try {\n                            await this.close();\n                        }\n                        catch (error) {\n                            (0, utils_1.squashError)(error);\n                        }\n                        throw error;\n                    }\n                }\n            }\n        }\n        finally {\n            this.timeoutContext?.clear();\n        }\n    }\n    /** Get the next available document from the Change Stream. */\n    async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        this.timeoutContext?.refresh();\n        try {\n            while (true) {\n                try {\n                    const change = await this.cursor.next();\n                    const processedChange = this._processChange(change ?? null);\n                    return processedChange;\n                }\n                catch (error) {\n                    try {\n                        await this._processErrorIteratorMode(error, this.cursor.id != null);\n                    }\n                    catch (error) {\n                        if (error instanceof error_1.MongoOperationTimeoutError && this.cursor.id == null) {\n                            throw error;\n                        }\n                        try {\n                            await this.close();\n                        }\n                        catch (error) {\n                            (0, utils_1.squashError)(error);\n                        }\n                        throw error;\n                    }\n                }\n            }\n        }\n        finally {\n            this.timeoutContext?.clear();\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        this.timeoutContext?.refresh();\n        try {\n            while (true) {\n                try {\n                    const change = await this.cursor.tryNext();\n                    return change ?? null;\n                }\n                catch (error) {\n                    try {\n                        await this._processErrorIteratorMode(error, this.cursor.id != null);\n                    }\n                    catch (error) {\n                        if (error instanceof error_1.MongoOperationTimeoutError && this.cursor.id == null)\n                            throw error;\n                        try {\n                            await this.close();\n                        }\n                        catch (error) {\n                            (0, utils_1.squashError)(error);\n                        }\n                        throw error;\n                    }\n                }\n            }\n        }\n        finally {\n            this.timeoutContext?.clear();\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while (true) {\n                yield await this.next();\n            }\n        }\n        finally {\n            try {\n                await this.close();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n        }\n    }\n    /** Is the cursor closed */\n    get closed() {\n        return this.isClosed || this.cursor.closed;\n    }\n    /**\n     * Frees the internal resources used by the change stream.\n     */\n    async close() {\n        this.timeoutContext?.clear();\n        this.timeoutContext = undefined;\n        this.isClosed = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        }\n        finally {\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */\n    _setIsEmitter() {\n        if (this.mode === 'iterator') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n        }\n        this.mode = 'emitter';\n    }\n    /** @internal */\n    _setIsIterator() {\n        if (this.mode === 'emitter') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n        }\n        this.mode = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n    _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n            ? this.parent\n            : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n                ? this.parent.client\n                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n                    ? this.parent.client\n                    : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, {\n            ...options,\n            timeoutContext: this.timeoutContext\n                ? new abstract_cursor_1.CursorTimeoutContext(this.timeoutContext, this.contextOwner)\n                : undefined\n        });\n        for (const event of CHANGE_STREAM_EVENTS) {\n            changeStreamCursor.on(event, e => this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */\n    _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().then(undefined, utils_1.squashError);\n    }\n    /** @internal */\n    _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this.cursorStream ?? cursor.stream();\n        this.cursorStream = stream;\n        stream.on('data', change => {\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            }\n            catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n            this.timeoutContext?.refresh();\n        });\n        stream.on('error', error => this._processErrorStreamMode(error, this.cursor.id != null));\n    }\n    /** @internal */\n    _endStream() {\n        this.cursorStream?.removeAllListeners('data');\n        this.cursorStream?.removeAllListeners('close');\n        this.cursorStream?.removeAllListeners('end');\n        this.cursorStream?.destroy();\n        this.cursorStream = undefined;\n    }\n    /** @internal */\n    _processChange(change) {\n        if (this.isClosed) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */\n    _processErrorStreamMode(changeStreamError, cursorInitialized) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this.isClosed)\n            return;\n        if (cursorInitialized &&\n            ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion) ||\n                changeStreamError instanceof error_1.MongoOperationTimeoutError)) {\n            this._endStream();\n            this.cursor\n                .close()\n                .then(() => this._resume(changeStreamError), e => {\n                (0, utils_1.squashError)(e);\n                return this._resume(changeStreamError);\n            })\n                .then(() => {\n                if (changeStreamError instanceof error_1.MongoOperationTimeoutError)\n                    this.emit(ChangeStream.ERROR, changeStreamError);\n            }, () => this._closeEmitterModeWithError(changeStreamError));\n        }\n        else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */\n    async _processErrorIteratorMode(changeStreamError, cursorInitialized) {\n        if (this.isClosed) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (cursorInitialized &&\n            ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion) ||\n                changeStreamError instanceof error_1.MongoOperationTimeoutError)) {\n            try {\n                await this.cursor.close();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n            await this._resume(changeStreamError);\n            if (changeStreamError instanceof error_1.MongoOperationTimeoutError)\n                throw changeStreamError;\n        }\n        else {\n            try {\n                await this.close();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n            throw changeStreamError;\n        }\n    }\n    async _resume(changeStreamError) {\n        this.timeoutContext?.refresh();\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServer(this.cursor.readPreference, {\n                operationName: 'reconnect topology in change stream',\n                timeoutContext: this.timeoutContext\n            });\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        }\n        catch {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\n(0, resource_management_1.configureResourceManagement)(ChangeStream.prototype);\n//# sourceMappingURL=change_stream.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientEncryption = void 0;\nexports.autoSelectSocketOptions = autoSelectSocketOptions;\nconst bson_1 = require(\"../bson\");\nconst deps_1 = require(\"../deps\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst cryptoCallbacks = require(\"./crypto_callbacks\");\nconst errors_1 = require(\"./errors\");\nconst index_1 = require(\"./providers/index\");\nconst state_machine_1 = require(\"./state_machine\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nclass ClientEncryption {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    constructor(client, options) {\n        this._client = client;\n        this._proxyOptions = options.proxyOptions ?? {};\n        this._tlsOptions = options.tlsOptions ?? {};\n        this._kmsProviders = options.kmsProviders || {};\n        const { timeoutMS } = (0, utils_1.resolveTimeoutOptions)(client, options);\n        this._timeoutMS = timeoutMS;\n        this._credentialProviders = options.credentialProviders;\n        if (options.credentialProviders?.aws && !(0, index_1.isEmptyCredentials)('aws', this._kmsProviders)) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Can only provide a custom AWS credential provider when the state machine is configured for automatic AWS credential fetching');\n        }\n        if (options.keyVaultNamespace == null) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n        }\n        const mongoCryptOptions = {\n            ...options,\n            cryptoCallbacks,\n            kmsProviders: !Buffer.isBuffer(this._kmsProviders)\n                ? (0, bson_1.serialize)(this._kmsProviders)\n                : this._kmsProviders\n        };\n        this._keyVaultNamespace = options.keyVaultNamespace;\n        this._keyVaultClient = options.keyVaultClient || client;\n        const MongoCrypt = ClientEncryption.getMongoCrypt();\n        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n    }\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */\n    async createDataKey(provider, options = {}) {\n        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n            throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`);\n        }\n        let keyAltNames = undefined;\n        if (options.keyAltNames && options.keyAltNames.length > 0) {\n            keyAltNames = options.keyAltNames.map((keyAltName, i) => {\n                if (typeof keyAltName !== 'string') {\n                    throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`);\n                }\n                return (0, bson_1.serialize)({ keyAltName });\n            });\n        }\n        let keyMaterial = undefined;\n        if (options.keyMaterial) {\n            keyMaterial = (0, bson_1.serialize)({ keyMaterial: options.keyMaterial });\n        }\n        const dataKeyBson = (0, bson_1.serialize)({\n            provider,\n            ...options.masterKey\n        });\n        const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n            keyAltNames,\n            keyMaterial\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.s.options)\n        });\n        const timeoutContext = options?.timeoutContext ??\n            timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }));\n        const dataKey = (0, bson_1.deserialize)(await stateMachine.execute(this, context, { timeoutContext }));\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const { insertedId } = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .insertOne(dataKey, {\n            writeConcern: { w: 'majority' },\n            timeoutMS: timeoutContext?.csotEnabled()\n                ? timeoutContext?.getRemainingTimeMSOrThrow()\n                : undefined\n        });\n        return insertedId;\n    }\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */\n    async rewrapManyDataKey(filter, options) {\n        let keyEncryptionKeyBson = undefined;\n        if (options) {\n            const keyEncryptionKey = Object.assign({ provider: options.provider }, options.masterKey);\n            keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n        }\n        const filterBson = (0, bson_1.serialize)(filter);\n        const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.s.options)\n        });\n        const timeoutContext = timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }));\n        const { v: dataKeys } = (0, bson_1.deserialize)(await stateMachine.execute(this, context, { timeoutContext }));\n        if (dataKeys.length === 0) {\n            return {};\n        }\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const replacements = dataKeys.map((key) => ({\n            updateOne: {\n                filter: { _id: key._id },\n                update: {\n                    $set: {\n                        masterKey: key.masterKey,\n                        keyMaterial: key.keyMaterial\n                    },\n                    $currentDate: {\n                        updateDate: true\n                    }\n                }\n            }\n        }));\n        const result = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .bulkWrite(replacements, {\n            writeConcern: { w: 'majority' },\n            timeoutMS: timeoutContext.csotEnabled() ? timeoutContext?.remainingTimeMS : undefined\n        });\n        return { bulkWriteResult: result };\n    }\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */\n    async deleteKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .deleteOne({ _id }, { writeConcern: { w: 'majority' }, timeoutMS: this._timeoutMS });\n    }\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */\n    getKeys() {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .find({}, { readConcern: { level: 'majority' }, timeoutMS: this._timeoutMS });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */\n    async getKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ _id }, { readConcern: { level: 'majority' }, timeoutMS: this._timeoutMS });\n    }\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */\n    async getKeyByAltName(keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ keyAltNames: keyAltName }, { readConcern: { level: 'majority' }, timeoutMS: this._timeoutMS });\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async addKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, { $addToSet: { keyAltNames: keyAltName } }, { writeConcern: { w: 'majority' }, returnDocument: 'before', timeoutMS: this._timeoutMS });\n        return value;\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async removeKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const pipeline = [\n            {\n                $set: {\n                    keyAltNames: {\n                        $cond: [\n                            {\n                                $eq: ['$keyAltNames', [keyAltName]]\n                            },\n                            '$$REMOVE',\n                            {\n                                $filter: {\n                                    input: '$keyAltNames',\n                                    cond: {\n                                        $ne: ['$$this', keyAltName]\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        ];\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, pipeline, {\n            writeConcern: { w: 'majority' },\n            returnDocument: 'before',\n            timeoutMS: this._timeoutMS\n        });\n        return value;\n    }\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */\n    async createEncryptedCollection(db, name, options) {\n        const { provider, masterKey, createCollectionOptions: { encryptedFields: { ...encryptedFields }, ...createCollectionOptions } } = options;\n        const timeoutContext = this._timeoutMS != null\n            ? timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }))\n            : undefined;\n        if (Array.isArray(encryptedFields.fields)) {\n            const createDataKeyPromises = encryptedFields.fields.map(async (field) => field == null || typeof field !== 'object' || field.keyId != null\n                ? field\n                : {\n                    ...field,\n                    keyId: await this.createDataKey(provider, {\n                        masterKey,\n                        // clone the timeoutContext\n                        // in order to avoid sharing the same timeout for server selection and connection checkout across different concurrent operations\n                        timeoutContext: timeoutContext?.csotEnabled() ? timeoutContext?.clone() : undefined\n                    })\n                });\n            const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n            encryptedFields.fields = createDataKeyResolutions.map((resolution, index) => resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index]);\n            const rejection = createDataKeyResolutions.find((result) => result.status === 'rejected');\n            if (rejection != null) {\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, { cause: rejection.reason });\n            }\n        }\n        try {\n            const collection = await db.createCollection(name, {\n                ...createCollectionOptions,\n                encryptedFields,\n                timeoutMS: timeoutContext?.csotEnabled()\n                    ? timeoutContext?.getRemainingTimeMSOrThrow()\n                    : undefined\n            });\n            return { collection, encryptedFields };\n        }\n        catch (cause) {\n            throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, { cause });\n        }\n    }\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */\n    async encrypt(value, options) {\n        return await this._encrypt(value, false, options);\n    }\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"range\" and algorithm is \"Range\".\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */\n    async encryptExpression(expression, options) {\n        return await this._encrypt(expression, true, options);\n    }\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */\n    async decrypt(value) {\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.s.options)\n        });\n        const timeoutContext = this._timeoutMS != null\n            ? timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }))\n            : undefined;\n        const { v } = (0, bson_1.deserialize)(await stateMachine.execute(this, context, { timeoutContext }));\n        return v;\n    }\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return await (0, index_1.refreshKMSCredentials)(this._kmsProviders, this._credentialProviders);\n    }\n    static get libmongocryptVersion() {\n        return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */\n    async _encrypt(value, expressionMode, options) {\n        const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n        const contextOptions = {\n            expressionMode,\n            algorithm\n        };\n        if (keyId) {\n            contextOptions.keyId = keyId.buffer;\n        }\n        if (keyAltName) {\n            if (keyId) {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options\" cannot contain both \"keyId\" and \"keyAltName\"`);\n            }\n            if (typeof keyAltName !== 'string') {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`);\n            }\n            contextOptions.keyAltName = (0, bson_1.serialize)({ keyAltName });\n        }\n        if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n            contextOptions.contentionFactor = contentionFactor;\n        }\n        if (typeof queryType === 'string') {\n            contextOptions.queryType = queryType;\n        }\n        if (typeof rangeOptions === 'object') {\n            contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n        }\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions,\n            socketOptions: autoSelectSocketOptions(this._client.s.options)\n        });\n        const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n        const timeoutContext = this._timeoutMS != null\n            ? timeout_1.TimeoutContext.create((0, utils_1.resolveTimeoutOptions)(this._client, { timeoutMS: this._timeoutMS }))\n            : undefined;\n        const { v } = (0, bson_1.deserialize)(await stateMachine.execute(this, context, { timeoutContext }));\n        return v;\n    }\n}\nexports.ClientEncryption = ClientEncryption;\n/**\n * Get the socket options from the client.\n * @param baseOptions - The mongo client options.\n * @returns ClientEncryptionSocketOptions\n */\nfunction autoSelectSocketOptions(baseOptions) {\n    const options = { autoSelectFamily: true };\n    if ('autoSelectFamily' in baseOptions) {\n        options.autoSelectFamily = baseOptions.autoSelectFamily;\n    }\n    if ('autoSelectFamilyAttemptTimeout' in baseOptions) {\n        options.autoSelectFamilyAttemptTimeout = baseOptions.autoSelectFamilyAttemptTimeout;\n    }\n    return options;\n}\n//# sourceMappingURL=client_encryption.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = void 0;\nexports.makeAES256Hook = makeAES256Hook;\nexports.randomHook = randomHook;\nexports.sha256Hook = sha256Hook;\nexports.makeHmacHook = makeHmacHook;\nexports.signRsaSha256Hook = signRsaSha256Hook;\nconst crypto = require(\"crypto\");\nfunction makeAES256Hook(method, mode) {\n    return function (key, iv, input, output) {\n        let result;\n        try {\n            const cipher = crypto[method](mode, key, iv);\n            cipher.setAutoPadding(false);\n            result = cipher.update(input);\n            const final = cipher.final();\n            if (final.length > 0) {\n                result = Buffer.concat([result, final]);\n            }\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nfunction randomHook(buffer, count) {\n    try {\n        crypto.randomFillSync(buffer, 0, count);\n    }\n    catch (e) {\n        return e;\n    }\n    return count;\n}\nfunction sha256Hook(input, output) {\n    let result;\n    try {\n        result = crypto.createHash('sha256').update(input).digest();\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nfunction makeHmacHook(algorithm) {\n    return (key, input, output) => {\n        let result;\n        try {\n            result = crypto.createHmac(algorithm, key).update(input).digest();\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nfunction signRsaSha256Hook(key, input, output) {\n    let result;\n    try {\n        const signer = crypto.createSign('sha256WithRSAEncryption');\n        const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString('base64')}\\n-----END PRIVATE KEY-----\\n`);\n        result = signer.update(input).end().sign(privateKey);\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.aes256CbcEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-cbc');\nexports.aes256CbcDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-cbc');\nexports.aes256CtrEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-ctr');\nexports.aes256CtrDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-ctr');\nexports.hmacSha512Hook = makeHmacHook('sha512');\nexports.hmacSha256Hook = makeHmacHook('sha256');\n//# sourceMappingURL=crypto_callbacks.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;\nconst error_1 = require(\"../error\");\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\nclass MongoCryptError extends error_1.MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoCryptError';\n    }\n}\nexports.MongoCryptError = MongoCryptError;\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */\nclass MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCryptInvalidArgumentError';\n    }\n}\nexports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */\nclass MongoCryptCreateDataKeyError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to complete creating data keys: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateDataKeyError';\n    }\n}\nexports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */\nclass MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to create collection: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateEncryptedCollectionError';\n    }\n}\nexports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */\nclass MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, body) {\n        super(message);\n        this.body = body;\n    }\n    get name() {\n        return 'MongoCryptAzureKMSRequestError';\n    }\n}\nexports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;\n/** @public */\nclass MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name() {\n        return 'MongoCryptKMSRequestNetworkTimeoutError';\n    }\n}\nexports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError;\n//# sourceMappingURL=errors.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongocryptdManager = void 0;\nconst error_1 = require(\"../error\");\n/**\n * @internal\n * An internal class that handles spawning a mongocryptd.\n */\nclass MongocryptdManager {\n    constructor(extraOptions = {}) {\n        this.spawnPath = '';\n        this.spawnArgs = [];\n        this.uri =\n            typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0\n                ? extraOptions.mongocryptdURI\n                : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n        if (Object.hasOwn(extraOptions, 'mongocryptdSpawnPath') && extraOptions.mongocryptdSpawnPath) {\n            this.spawnPath = extraOptions.mongocryptdSpawnPath;\n        }\n        if (Object.hasOwn(extraOptions, 'mongocryptdSpawnArgs') &&\n            Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n        }\n        if (this.spawnArgs\n            .filter(arg => typeof arg === 'string')\n            .every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)) {\n            this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');\n        }\n    }\n    /**\n     * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n     * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n     */\n    async spawn() {\n        const cmdName = this.spawnPath || 'mongocryptd';\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const { spawn } = require('child_process');\n        // Spawned with stdio: ignore and detached: true\n        // to ensure child can outlive parent.\n        this._child = spawn(cmdName, this.spawnArgs, {\n            stdio: 'ignore',\n            detached: true\n        });\n        this._child.on('error', () => {\n            // From the FLE spec:\n            // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n            // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n            // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n            // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n            // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n            // connect after spawning, the server selection error is propagated to the user.\"\n            // The AutoEncrypter and MongoCryptdManager should work together to spawn\n            // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n            // shuts down after 60s and gets respawned when necessary.  We rely on server\n            // selection timeouts when connecting to the `mongocryptd` to inform users that something\n            // has been configured incorrectly.  For those reasons, we suppress stderr from\n            // the `mongocryptd` process and immediately unref the process.\n        });\n        // unref child to remove handle from event loop\n        this._child.unref();\n    }\n    /**\n     * @returns the result of `fn` or rejects with an error.\n     */\n    async withRespawn(fn) {\n        try {\n            const result = await fn();\n            return result;\n        }\n        catch (err) {\n            // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n            const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n            if (!shouldSpawn) {\n                throw err;\n            }\n        }\n        await this.spawn();\n        const result = await fn();\n        return result;\n    }\n}\nexports.MongocryptdManager = MongocryptdManager;\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';\n//# sourceMappingURL=mongocryptd_manager.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadAWSCredentials = loadAWSCredentials;\nconst aws_temporary_credentials_1 = require(\"../../cmap/auth/aws_temporary_credentials\");\n/**\n * @internal\n */\nasync function loadAWSCredentials(kmsProviders, provider) {\n    const credentialProvider = new aws_temporary_credentials_1.AWSSDKCredentialProvider(provider);\n    // We shouldn't ever receive a response from the AWS SDK that doesn't have a `SecretAccessKey`\n    // or `AccessKeyId`.  However, TS says these fields are optional.  We provide empty strings\n    // and let libmongocrypt error if we're unable to fetch the required keys.\n    const { SecretAccessKey = '', AccessKeyId = '', Token } = await credentialProvider.getCredentials();\n    const aws = {\n        secretAccessKey: SecretAccessKey,\n        accessKeyId: AccessKeyId\n    };\n    // the AWS session token is only required for temporary credentials so only attach it to the\n    // result if it's present in the response from the aws sdk\n    Token != null && (aws.sessionToken = Token);\n    return { ...kmsProviders, aws };\n}\n//# sourceMappingURL=aws.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tokenCache = exports.AzureCredentialCache = exports.AZURE_BASE_URL = void 0;\nexports.addAzureParams = addAzureParams;\nexports.prepareRequest = prepareRequest;\nexports.fetchAzureKMSToken = fetchAzureKMSToken;\nexports.loadAzureCredentials = loadAzureCredentials;\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst errors_1 = require(\"../errors\");\nconst MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;\n/** Base URL for getting Azure tokens. */\nexports.AZURE_BASE_URL = 'http://169.254.169.254/metadata/identity/oauth2/token?';\n/**\n * @internal\n */\nclass AzureCredentialCache {\n    constructor() {\n        this.cachedToken = null;\n    }\n    async getToken() {\n        if (this.cachedToken == null || this.needsRefresh(this.cachedToken)) {\n            this.cachedToken = await this._getToken();\n        }\n        return { accessToken: this.cachedToken.accessToken };\n    }\n    needsRefresh(token) {\n        const timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();\n        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;\n    }\n    /**\n     * exposed for testing\n     */\n    resetCache() {\n        this.cachedToken = null;\n    }\n    /**\n     * exposed for testing\n     */\n    _getToken() {\n        return fetchAzureKMSToken();\n    }\n}\nexports.AzureCredentialCache = AzureCredentialCache;\n/** @internal */\nexports.tokenCache = new AzureCredentialCache();\n/** @internal */\nasync function parseResponse(response) {\n    const { status, body: rawBody } = response;\n    const body = (() => {\n        try {\n            return JSON.parse(rawBody);\n        }\n        catch {\n            throw new errors_1.MongoCryptAzureKMSRequestError('Malformed JSON body in GET request.');\n        }\n    })();\n    if (status !== 200) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Unable to complete request.', body);\n    }\n    if (!body.access_token) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `access_token`.');\n    }\n    if (!body.expires_in) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `expires_in`.');\n    }\n    const expiresInMS = Number(body.expires_in) * 1000;\n    if (Number.isNaN(expiresInMS)) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - unable to parse int from `expires_in` field.');\n    }\n    return {\n        accessToken: body.access_token,\n        expiresOnTimestamp: Date.now() + expiresInMS\n    };\n}\n/**\n * @internal\n * Get the Azure endpoint URL.\n */\nfunction addAzureParams(url, resource, username) {\n    url.searchParams.append('api-version', '2018-02-01');\n    url.searchParams.append('resource', resource);\n    if (username) {\n        url.searchParams.append('client_id', username);\n    }\n    return url;\n}\n/**\n * @internal\n *\n * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with\n * the default values for headers and the request url.\n */\nfunction prepareRequest(options) {\n    const url = new URL(options.url?.toString() ?? exports.AZURE_BASE_URL);\n    addAzureParams(url, 'https://vault.azure.net');\n    const headers = { ...options.headers, 'Content-Type': 'application/json', Metadata: true };\n    return { headers, url };\n}\n/**\n * @internal\n *\n * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms\n * servers.  This is required to simulate different server conditions.  No options are expected to\n * be set outside of tests.\n *\n * exposed for CSFLE\n * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)\n */\nasync function fetchAzureKMSToken(options = {}) {\n    const { headers, url } = prepareRequest(options);\n    try {\n        const response = await (0, utils_1.get)(url, { headers });\n        return await parseResponse(response);\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            throw new errors_1.MongoCryptAzureKMSRequestError(`[Azure KMS] ${error.message}`);\n        }\n        throw error;\n    }\n}\n/**\n * @internal\n *\n * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.\n */\nasync function loadAzureCredentials(kmsProviders) {\n    const azure = await exports.tokenCache.getToken();\n    return { ...kmsProviders, azure };\n}\n//# sourceMappingURL=azure.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadGCPCredentials = loadGCPCredentials;\nconst deps_1 = require(\"../../deps\");\n/** @internal */\nasync function loadGCPCredentials(kmsProviders) {\n    const gcpMetadata = (0, deps_1.getGcpMetadata)();\n    if ('kModuleError' in gcpMetadata) {\n        return kmsProviders;\n    }\n    const { access_token: accessToken } = await gcpMetadata.instance({\n        property: 'service-accounts/default/token'\n    });\n    return { ...kmsProviders, gcp: { accessToken } };\n}\n//# sourceMappingURL=gcp.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEmptyCredentials = isEmptyCredentials;\nexports.refreshKMSCredentials = refreshKMSCredentials;\nconst aws_1 = require(\"./aws\");\nconst azure_1 = require(\"./azure\");\nconst gcp_1 = require(\"./gcp\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */\nfunction isEmptyCredentials(providerName, kmsProviders) {\n    const provider = kmsProviders[providerName];\n    if (provider == null) {\n        return false;\n    }\n    return typeof provider === 'object' && Object.keys(provider).length === 0;\n}\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */\nasync function refreshKMSCredentials(kmsProviders, credentialProviders) {\n    let finalKMSProviders = kmsProviders;\n    if (isEmptyCredentials('aws', kmsProviders)) {\n        finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders, credentialProviders?.aws);\n    }\n    if (isEmptyCredentials('gcp', kmsProviders)) {\n        finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('azure', kmsProviders)) {\n        finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n    }\n    return finalKMSProviders;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StateMachine = void 0;\nconst fs = require(\"fs/promises\");\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst bson_1 = require(\"../bson\");\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\nconst deps_1 = require(\"../deps\");\nconst error_1 = require(\"../error\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst client_encryption_1 = require(\"./client_encryption\");\nconst errors_1 = require(\"./errors\");\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\n// libmongocrypt states\nconst MONGOCRYPT_CTX_ERROR = 0;\nconst MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;\nconst MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;\nconst MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;\nconst MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;\nconst MONGOCRYPT_CTX_NEED_KMS = 4;\nconst MONGOCRYPT_CTX_READY = 5;\nconst MONGOCRYPT_CTX_DONE = 6;\nconst HTTPS_PORT = 443;\nconst stateToString = new Map([\n    [MONGOCRYPT_CTX_ERROR, 'MONGOCRYPT_CTX_ERROR'],\n    [MONGOCRYPT_CTX_NEED_MONGO_COLLINFO, 'MONGOCRYPT_CTX_NEED_MONGO_COLLINFO'],\n    [MONGOCRYPT_CTX_NEED_MONGO_MARKINGS, 'MONGOCRYPT_CTX_NEED_MONGO_MARKINGS'],\n    [MONGOCRYPT_CTX_NEED_MONGO_KEYS, 'MONGOCRYPT_CTX_NEED_MONGO_KEYS'],\n    [MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS, 'MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS'],\n    [MONGOCRYPT_CTX_NEED_KMS, 'MONGOCRYPT_CTX_NEED_KMS'],\n    [MONGOCRYPT_CTX_READY, 'MONGOCRYPT_CTX_READY'],\n    [MONGOCRYPT_CTX_DONE, 'MONGOCRYPT_CTX_DONE']\n]);\nconst INSECURE_TLS_OPTIONS = [\n    'tlsInsecure',\n    'tlsAllowInvalidCertificates',\n    'tlsAllowInvalidHostnames'\n];\n/**\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param msg - Anything you want to be logged.\n */\nfunction debug(msg) {\n    if (process.env.MONGODB_CRYPT_DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error(msg);\n    }\n}\n/**\n * This is kind of a hack.  For `rewrapManyDataKey`, we have tests that\n * guarantee that when there are no matching keys, `rewrapManyDataKey` returns\n * nothing.  We also have tests for auto encryption that guarantee for `encrypt`\n * we return an error when there are no matching keys.  This error is generated in\n * subsequent iterations of the state machine.\n * Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)\n * do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`\n * will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but\n * otherwise we'll return `{ v: [] }`.\n */\nlet EMPTY_V;\n/**\n * @internal\n * An internal class that executes across a MongoCryptContext until either\n * a finishing state or an error is reached. Do not instantiate directly.\n */\n// TODO(DRIVERS-2671): clarify CSOT behavior for FLE APIs\nclass StateMachine {\n    constructor(options, bsonOptions = (0, bson_1.pluckBSONSerializeOptions)(options)) {\n        this.options = options;\n        this.bsonOptions = bsonOptions;\n    }\n    /**\n     * Executes the state machine according to the specification\n     */\n    async execute(executor, context, options) {\n        const keyVaultNamespace = executor._keyVaultNamespace;\n        const keyVaultClient = executor._keyVaultClient;\n        const metaDataClient = executor._metaDataClient;\n        const mongocryptdClient = executor._mongocryptdClient;\n        const mongocryptdManager = executor._mongocryptdManager;\n        let result = null;\n        // Typescript treats getters just like properties: Once you've tested it for equality\n        // it cannot change. Which is exactly the opposite of what we use state and status for.\n        // Every call to at least `addMongoOperationResponse` and `finalize` can change the state.\n        // These wrappers let us write code more naturally and not add compiler exceptions\n        // to conditions checks inside the state machine.\n        const getStatus = () => context.status;\n        const getState = () => context.state;\n        while (getState() !== MONGOCRYPT_CTX_DONE && getState() !== MONGOCRYPT_CTX_ERROR) {\n            options.signal?.throwIfAborted();\n            debug(`[context#${context.id}] ${stateToString.get(getState()) || getState()}`);\n            switch (getState()) {\n                case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO: {\n                    const filter = (0, bson_1.deserialize)(context.nextMongoOperation());\n                    if (!metaDataClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined');\n                    }\n                    const collInfoCursor = this.fetchCollectionInfo(metaDataClient, context.ns, filter, options);\n                    for await (const collInfo of collInfoCursor) {\n                        context.addMongoOperationResponse((0, bson_1.serialize)(collInfo));\n                        if (getState() === MONGOCRYPT_CTX_ERROR)\n                            break;\n                    }\n                    if (getState() === MONGOCRYPT_CTX_ERROR)\n                        break;\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS: {\n                    const command = context.nextMongoOperation();\n                    if (getState() === MONGOCRYPT_CTX_ERROR)\n                        break;\n                    if (!mongocryptdClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined');\n                    }\n                    // When we are using the shared library, we don't have a mongocryptd manager.\n                    const markedCommand = mongocryptdManager\n                        ? await mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command, options))\n                        : await this.markCommand(mongocryptdClient, context.ns, command, options);\n                    context.addMongoOperationResponse(markedCommand);\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_KEYS: {\n                    const filter = context.nextMongoOperation();\n                    const keys = await this.fetchKeys(keyVaultClient, keyVaultNamespace, filter, options);\n                    if (keys.length === 0) {\n                        // See docs on EMPTY_V\n                        result = EMPTY_V ??= (0, bson_1.serialize)({ v: [] });\n                    }\n                    for (const key of keys) {\n                        context.addMongoOperationResponse((0, bson_1.serialize)(key));\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS: {\n                    const kmsProviders = await executor.askForKMSCredentials();\n                    context.provideKMSProviders((0, bson_1.serialize)(kmsProviders));\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS: {\n                    await Promise.all(this.requests(context, options));\n                    context.finishKMSRequests();\n                    break;\n                }\n                case MONGOCRYPT_CTX_READY: {\n                    const finalizedContext = context.finalize();\n                    if (getState() === MONGOCRYPT_CTX_ERROR) {\n                        const message = getStatus().message || 'Finalization error';\n                        throw new errors_1.MongoCryptError(message);\n                    }\n                    result = finalizedContext;\n                    break;\n                }\n                default:\n                    throw new errors_1.MongoCryptError(`Unknown state: ${getState()}`);\n            }\n        }\n        if (getState() === MONGOCRYPT_CTX_ERROR || result == null) {\n            const message = getStatus().message;\n            if (!message) {\n                debug(`unidentifiable error in MongoCrypt - received an error status from \\`libmongocrypt\\` but received no error message.`);\n            }\n            throw new errors_1.MongoCryptError(message ??\n                'unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.');\n        }\n        return result;\n    }\n    /**\n     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.\n     * @param kmsContext - A C++ KMS context returned from the bindings\n     * @returns A promise that resolves when the KMS reply has be fully parsed\n     */\n    async kmsRequest(request, options) {\n        const parsedUrl = request.endpoint.split(':');\n        const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\n        const socketOptions = {\n            host: parsedUrl[0],\n            servername: parsedUrl[0],\n            port,\n            ...(0, client_encryption_1.autoSelectSocketOptions)(this.options.socketOptions || {})\n        };\n        const message = request.message;\n        const buffer = new utils_1.BufferPool();\n        let netSocket;\n        let socket;\n        function destroySockets() {\n            for (const sock of [socket, netSocket]) {\n                if (sock) {\n                    sock.destroy();\n                }\n            }\n        }\n        function onerror(cause) {\n            return new errors_1.MongoCryptError('KMS request failed', { cause });\n        }\n        function onclose() {\n            return new errors_1.MongoCryptError('KMS request closed');\n        }\n        const tlsOptions = this.options.tlsOptions;\n        if (tlsOptions) {\n            const kmsProvider = request.kmsProvider;\n            const providerTlsOptions = tlsOptions[kmsProvider];\n            if (providerTlsOptions) {\n                const error = this.validateTlsOptions(kmsProvider, providerTlsOptions);\n                if (error) {\n                    throw error;\n                }\n                try {\n                    await this.setTlsOptions(providerTlsOptions, socketOptions);\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n        }\n        let abortListener;\n        try {\n            if (this.options.proxyOptions && this.options.proxyOptions.proxyHost) {\n                netSocket = new net.Socket();\n                const { promise: willConnect, reject: rejectOnNetSocketError, resolve: resolveOnNetSocketConnect } = (0, utils_1.promiseWithResolvers)();\n                netSocket\n                    .once('error', err => rejectOnNetSocketError(onerror(err)))\n                    .once('close', () => rejectOnNetSocketError(onclose()))\n                    .once('connect', () => resolveOnNetSocketConnect());\n                const netSocketOptions = {\n                    ...socketOptions,\n                    host: this.options.proxyOptions.proxyHost,\n                    port: this.options.proxyOptions.proxyPort || 1080\n                };\n                netSocket.connect(netSocketOptions);\n                await willConnect;\n                try {\n                    socks ??= loadSocks();\n                    socketOptions.socket = (await socks.SocksClient.createConnection({\n                        existing_socket: netSocket,\n                        command: 'connect',\n                        destination: { host: socketOptions.host, port: socketOptions.port },\n                        proxy: {\n                            // host and port are ignored because we pass existing_socket\n                            host: 'iLoveJavaScript',\n                            port: 0,\n                            type: 5,\n                            userId: this.options.proxyOptions.proxyUsername,\n                            password: this.options.proxyOptions.proxyPassword\n                        }\n                    })).socket;\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n            socket = tls.connect(socketOptions, () => {\n                socket.write(message);\n            });\n            const { promise: willResolveKmsRequest, reject: rejectOnTlsSocketError, resolve } = (0, utils_1.promiseWithResolvers)();\n            abortListener = (0, utils_1.addAbortListener)(options?.signal, function () {\n                destroySockets();\n                rejectOnTlsSocketError(this.reason);\n            });\n            socket\n                .once('error', err => rejectOnTlsSocketError(onerror(err)))\n                .once('close', () => rejectOnTlsSocketError(onclose()))\n                .on('data', data => {\n                buffer.append(data);\n                while (request.bytesNeeded > 0 && buffer.length) {\n                    const bytesNeeded = Math.min(request.bytesNeeded, buffer.length);\n                    request.addResponse(buffer.read(bytesNeeded));\n                }\n                if (request.bytesNeeded <= 0) {\n                    resolve();\n                }\n            });\n            await (options?.timeoutContext?.csotEnabled()\n                ? Promise.all([\n                    willResolveKmsRequest,\n                    timeout_1.Timeout.expires(options.timeoutContext?.remainingTimeMS)\n                ])\n                : willResolveKmsRequest);\n        }\n        catch (error) {\n            if (error instanceof timeout_1.TimeoutError)\n                throw new error_1.MongoOperationTimeoutError('KMS request timed out');\n            throw error;\n        }\n        finally {\n            // There's no need for any more activity on this socket at this point.\n            destroySockets();\n            abortListener?.[utils_1.kDispose]();\n        }\n    }\n    *requests(context, options) {\n        for (let request = context.nextKMSRequest(); request != null; request = context.nextKMSRequest()) {\n            yield this.kmsRequest(request, options);\n        }\n    }\n    /**\n     * Validates the provided TLS options are secure.\n     *\n     * @param kmsProvider - The KMS provider name.\n     * @param tlsOptions - The client TLS options for the provider.\n     *\n     * @returns An error if any option is invalid.\n     */\n    validateTlsOptions(kmsProvider, tlsOptions) {\n        const tlsOptionNames = Object.keys(tlsOptions);\n        for (const option of INSECURE_TLS_OPTIONS) {\n            if (tlsOptionNames.includes(option)) {\n                return new errors_1.MongoCryptError(`Insecure TLS options prohibited for ${kmsProvider}: ${option}`);\n            }\n        }\n    }\n    /**\n     * Sets only the valid secure TLS options.\n     *\n     * @param tlsOptions - The client TLS options for the provider.\n     * @param options - The existing connection options.\n     */\n    async setTlsOptions(tlsOptions, options) {\n        if (tlsOptions.tlsCertificateKeyFile) {\n            const cert = await fs.readFile(tlsOptions.tlsCertificateKeyFile);\n            options.cert = options.key = cert;\n        }\n        if (tlsOptions.tlsCAFile) {\n            options.ca = await fs.readFile(tlsOptions.tlsCAFile);\n        }\n        if (tlsOptions.tlsCertificateKeyFilePassword) {\n            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;\n        }\n    }\n    /**\n     * Fetches collection info for a provided namespace, when libmongocrypt\n     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is\n     * used to inform libmongocrypt of the schema associated with this\n     * namespace. Exposed for testing purposes. Do not directly invoke.\n     *\n     * @param client - A MongoClient connected to the topology\n     * @param ns - The namespace to list collections from\n     * @param filter - A filter for the listCollections command\n     * @param callback - Invoked with the info of the requested collection, or with an error\n     */\n    fetchCollectionInfo(client, ns, filter, options) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const cursor = client.db(db).listCollections(filter, {\n            promoteLongs: false,\n            promoteValues: false,\n            timeoutContext: options?.timeoutContext && new abstract_cursor_1.CursorTimeoutContext(options?.timeoutContext, Symbol()),\n            signal: options?.signal,\n            nameOnly: false\n        });\n        return cursor;\n    }\n    /**\n     * Calls to the mongocryptd to provide markings for a command.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to a mongocryptd\n     * @param ns - The namespace (database.collection) the command is being executed on\n     * @param command - The command to execute.\n     * @param callback - Invoked with the serialized and marked bson command, or with an error\n     */\n    async markCommand(client, ns, command, options) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const bsonOptions = { promoteLongs: false, promoteValues: false };\n        const rawCommand = (0, bson_1.deserialize)(command, bsonOptions);\n        const commandOptions = {\n            timeoutMS: undefined,\n            signal: undefined\n        };\n        if (options?.timeoutContext?.csotEnabled()) {\n            commandOptions.timeoutMS = options.timeoutContext.remainingTimeMS;\n        }\n        if (options?.signal) {\n            commandOptions.signal = options.signal;\n        }\n        const response = await client.db(db).command(rawCommand, {\n            ...bsonOptions,\n            ...commandOptions\n        });\n        return (0, bson_1.serialize)(response, this.bsonOptions);\n    }\n    /**\n     * Requests keys from the keyVault collection on the topology.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to the topology\n     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection\n     * @param filter - The filter for the find query against the keyVault Collection\n     * @param callback - Invoked with the found keys, or with an error\n     */\n    fetchKeys(client, keyVaultNamespace, filter, options) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace);\n        const commandOptions = {\n            timeoutContext: undefined,\n            signal: undefined\n        };\n        if (options?.timeoutContext != null) {\n            commandOptions.timeoutContext = new abstract_cursor_1.CursorTimeoutContext(options.timeoutContext, Symbol());\n        }\n        if (options?.signal != null) {\n            commandOptions.signal = options.signal;\n        }\n        return client\n            .db(dbName)\n            .collection(collectionName, { readConcern: { level: 'majority' } })\n            .find((0, bson_1.deserialize)(filter), commandOptions)\n            .toArray();\n    }\n}\nexports.StateMachine = StateMachine;\n//# sourceMappingURL=state_machine.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = require(\"../../error\");\n/**\n * Context used during authentication\n * @internal\n */\nclass AuthContext {\n    constructor(connection, credentials, options) {\n        /** If the context is for reauthentication. */\n        this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\n/**\n * Provider used during authentication.\n * @internal\n */\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */\n    async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */\n    async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        }\n        finally {\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider;\n//# sourceMappingURL=auth_provider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LegacyAWSTemporaryCredentialProvider = exports.AWSSDKCredentialProvider = exports.AWSTemporaryCredentialProvider = void 0;\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\n/**\n * @internal\n *\n * Fetches temporary AWS credentials.\n */\nclass AWSTemporaryCredentialProvider {\n    static get awsSDK() {\n        AWSTemporaryCredentialProvider._awsSDK ??= (0, deps_1.getAwsCredentialProvider)();\n        return AWSTemporaryCredentialProvider._awsSDK;\n    }\n    static get isAWSSDKInstalled() {\n        return !('kModuleError' in AWSTemporaryCredentialProvider.awsSDK);\n    }\n}\nexports.AWSTemporaryCredentialProvider = AWSTemporaryCredentialProvider;\n/** @internal */\nclass AWSSDKCredentialProvider extends AWSTemporaryCredentialProvider {\n    /**\n     * Create the SDK credentials provider.\n     * @param credentialsProvider - The credentials provider.\n     */\n    constructor(credentialsProvider) {\n        super();\n        if (credentialsProvider) {\n            this._provider = credentialsProvider;\n        }\n    }\n    /**\n     * The AWS SDK caches credentials automatically and handles refresh when the credentials have expired.\n     * To ensure this occurs, we need to cache the `provider` returned by the AWS sdk and re-use it when fetching credentials.\n     */\n    get provider() {\n        if ('kModuleError' in AWSTemporaryCredentialProvider.awsSDK) {\n            throw AWSTemporaryCredentialProvider.awsSDK.kModuleError;\n        }\n        if (this._provider) {\n            return this._provider;\n        }\n        let { AWS_STS_REGIONAL_ENDPOINTS = '', AWS_REGION = '' } = process.env;\n        AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n        AWS_REGION = AWS_REGION.toLowerCase();\n        /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\n        const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n        /**\n         * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n         * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n         */\n        const LEGACY_REGIONS = new Set([\n            'ap-northeast-1',\n            'ap-south-1',\n            'ap-southeast-1',\n            'ap-southeast-2',\n            'aws-global',\n            'ca-central-1',\n            'eu-central-1',\n            'eu-north-1',\n            'eu-west-1',\n            'eu-west-2',\n            'eu-west-3',\n            'sa-east-1',\n            'us-east-1',\n            'us-east-2',\n            'us-west-1',\n            'us-west-2'\n        ]);\n        /**\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n         *\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n         * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n         * That is not our bug to fix here. We leave that up to the SDK.\n         */\n        const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||\n            (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));\n        this._provider =\n            awsRegionSettingsExist && useRegionalSts\n                ? AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain({\n                    clientConfig: { region: AWS_REGION }\n                })\n                : AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain();\n        return this._provider;\n    }\n    async getCredentials() {\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */\n        try {\n            const creds = await this.provider();\n            return {\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            };\n        }\n        catch (error) {\n            throw new error_1.MongoAWSError(error.message, { cause: error });\n        }\n    }\n}\nexports.AWSSDKCredentialProvider = AWSSDKCredentialProvider;\n/**\n * @internal\n * Fetches credentials manually (without the AWS SDK), as outlined in the [Obtaining Credentials](https://github.com/mongodb/specifications/blob/master/source/auth/auth.md#obtaining-credentials)\n * section of the Auth spec.\n */\nclass LegacyAWSTemporaryCredentialProvider extends AWSTemporaryCredentialProvider {\n    async getCredentials() {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`);\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n            method: 'PUT',\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n        });\n        // get role name\n        const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        // get temp credentials\n        const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        return creds;\n    }\n}\nexports.LegacyAWSTemporaryCredentialProvider = LegacyAWSTemporaryCredentialProvider;\n//# sourceMappingURL=aws_temporary_credentials.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nexports.resolveCname = resolveCname;\nconst dns = require(\"dns\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: 'none',\n    forward: 'forward',\n    forwardAndReverse: 'forwardAndReverse'\n});\nasync function externalCommand(connection, command) {\n    const response = await connection.command((0, utils_1.ns)('$external.$cmd'), command);\n    return response;\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (credentials == null) {\n            throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n        }\n        const { username } = credentials;\n        const client = await makeKerberosClient(authContext);\n        const payload = await client.step('');\n        const saslStartResponse = await externalCommand(connection, saslStart(payload));\n        const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n        const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n        const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n        await externalCommand(connection, {\n            saslContinue: 1,\n            conversationId: saslContinueResponse.conversationId,\n            payload: finalizePayload\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');\n    }\n    loadKrb();\n    if ('kModuleError' in krb) {\n        throw krb['kModuleError'];\n    }\n    const { initializeClient } = krb;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n    const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n    const initOptions = {};\n    if (password != null) {\n        // TODO(NODE-5139): These do not match the typescript options in initializeClient\n        Object.assign(initOptions, { user: username, password: password });\n    }\n    const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    return await initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nasync function negotiate(client, retries, payload) {\n    try {\n        const response = await client.step(payload);\n        return response || '';\n    }\n    catch (error) {\n        if (retries === 0) {\n            // Retries exhausted, raise error\n            throw error;\n        }\n        // Adjust number of retries and call step again\n        return await negotiate(client, retries - 1, payload);\n    }\n}\nasync function finalize(client, user, payload) {\n    // GSS Client Unwrap\n    const response = await client.unwrap(payload);\n    return await client.wrap(response || '', { user });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return host;\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on ||\n        mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        const { address } = await dns.promises.lookup(host);\n        try {\n            // Perform a reverse ptr lookup on the ip address.\n            const results = await dns.promises.resolvePtr(address);\n            // If the ptr did not error but had no results, return the host.\n            return results.length > 0 ? results[0] : host;\n        }\n        catch {\n            // This can error as ptr records may not exist for all ips. In this case\n            // fallback to a cname lookup as dns.lookup() does not return the\n            // cname.\n            return await resolveCname(host);\n        }\n    }\n    else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        return await resolveCname(host);\n    }\n}\nasync function resolveCname(host) {\n    // Attempt to resolve the host name\n    try {\n        const results = await dns.promises.resolveCname(host);\n        // Get the first resolved host id\n        return results.length > 0 ? results[0] : host;\n    }\n    catch {\n        return host;\n    }\n}\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n    if (!krb) {\n        krb = (0, deps_1.getKerberos)();\n    }\n}\n//# sourceMappingURL=gssapi.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = require(\"../../error\");\nconst gssapi_1 = require(\"./gssapi\");\nconst providers_1 = require(\"./providers\");\n/**\n * @see https://github.com/mongodb/specifications/blob/master/source/auth/auth.md\n */\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default auth mechanism for 4.0 and higher.\n    return providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n}\nconst ALLOWED_ENVIRONMENT_NAMES = [\n    'test',\n    'azure',\n    'gcp',\n    'k8s'\n];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = [\n    '*.mongodb.net',\n    '*.mongodb-qa.net',\n    '*.mongodb-dev.net',\n    '*.mongodbgov.net',\n    'localhost',\n    '127.0.0.1',\n    '::1'\n];\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure or gcp.';\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username ?? '';\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n                process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n            this.mechanismProperties = {\n                ...this.mechanismProperties,\n                ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n            };\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            if (this.username &&\n                this.mechanismProperties.ENVIRONMENT &&\n                this.mechanismProperties.ENVIRONMENT !== 'azure') {\n                throw new error_1.MongoInvalidArgumentError(`username and ENVIRONMENT '${this.mechanismProperties.ENVIRONMENT}' may not be used together for mechanism '${this.mechanism}'.`);\n            }\n            if (this.username && this.password) {\n                throw new error_1.MongoInvalidArgumentError(`No password is allowed in ENVIRONMENT '${this.mechanismProperties.ENVIRONMENT}' for '${this.mechanism}'.`);\n            }\n            if ((this.mechanismProperties.ENVIRONMENT === 'azure' ||\n                this.mechanismProperties.ENVIRONMENT === 'gcp') &&\n                !this.mechanismProperties.TOKEN_RESOURCE) {\n                throw new error_1.MongoInvalidArgumentError(TOKEN_RESOURCE_MISSING_ERROR);\n            }\n            if (this.mechanismProperties.ENVIRONMENT &&\n                !ALLOWED_ENVIRONMENT_NAMES.includes(this.mechanismProperties.ENVIRONMENT)) {\n                throw new error_1.MongoInvalidArgumentError(`Currently only a ENVIRONMENT in ${ALLOWED_ENVIRONMENT_NAMES.join(',')} is supported for mechanism '${this.mechanism}'.`);\n            }\n            if (!this.mechanismProperties.ENVIRONMENT &&\n                !this.mechanismProperties.OIDC_CALLBACK &&\n                !this.mechanismProperties.OIDC_HUMAN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`Either a ENVIRONMENT, OIDC_CALLBACK, or OIDC_HUMAN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.ALLOWED_HOSTS) {\n                const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n                if (!Array.isArray(hosts)) {\n                    throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                }\n                for (const host of hosts) {\n                    if (typeof host !== 'string') {\n                        throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                    }\n                }\n            }\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        return new MongoCredentials({\n            username: options.username ?? creds?.username ?? '',\n            password: options.password ?? creds?.password ?? '',\n            mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n            source: options.source ?? options.db ?? creds?.source ?? 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n//# sourceMappingURL=mongo_credentials.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBAWS = void 0;\nconst BSON = require(\"../../bson\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst aws_temporary_credentials_1 = require(\"./aws_temporary_credentials\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst providers_1 = require(\"./providers\");\nconst ASCII_N = 110;\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor(credentialProvider) {\n        super();\n        this.credentialProvider = credentialProvider;\n        this.credentialFetcher = aws_temporary_credentials_1.AWSTemporaryCredentialProvider.isAWSSDKInstalled\n            ? new aws_temporary_credentials_1.AWSSDKCredentialProvider(credentialProvider)\n            : new aws_temporary_credentials_1.LegacyAWSTemporaryCredentialProvider();\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            throw deps_1.aws4['kModuleError'];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials, this.credentialFetcher);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        // Allow the user to specify an AWS session token for authentication with temporary credentials.\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        const nonce = await (0, utils_1.randomBytes)(32);\n        // All messages between MongoDB clients and servers are sent as BSON objects\n        // in the payload field of saslStart and saslContinue.\n        const saslStart = {\n            saslStart: 1,\n            mechanism: 'MONGODB-AWS',\n            payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n        };\n        const saslStartResponse = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/master/source/auth/auth.md#conversation-5\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Content-Length': body.length,\n                'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n                'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: saslStartResponse.conversationId,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials, awsCredentialFetcher) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        // The AWS session token (creds.Token) may or may not be set.\n        if (!creds.AccessKeyId || !creds.SecretAccessKey) {\n            throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    const temporaryCredentials = await awsCredentialFetcher.getCredentials();\n    return makeMongoCredentialsFromAWSTemp(temporaryCredentials);\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\n//# sourceMappingURL=mongodb_aws.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = exports.OIDC_VERSION = void 0;\nconst error_1 = require(\"../../error\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst automated_callback_workflow_1 = require(\"./mongodb_oidc/automated_callback_workflow\");\nconst azure_machine_workflow_1 = require(\"./mongodb_oidc/azure_machine_workflow\");\nconst gcp_machine_workflow_1 = require(\"./mongodb_oidc/gcp_machine_workflow\");\nconst k8s_machine_workflow_1 = require(\"./mongodb_oidc/k8s_machine_workflow\");\nconst token_cache_1 = require(\"./mongodb_oidc/token_cache\");\nconst token_machine_workflow_1 = require(\"./mongodb_oidc/token_machine_workflow\");\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** The current version of OIDC implementation. */\nexports.OIDC_VERSION = 1;\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('test', () => new automated_callback_workflow_1.AutomatedCallbackWorkflow(new token_cache_1.TokenCache(), token_machine_workflow_1.callback));\nexports.OIDC_WORKFLOWS.set('azure', () => new automated_callback_workflow_1.AutomatedCallbackWorkflow(new token_cache_1.TokenCache(), azure_machine_workflow_1.callback));\nexports.OIDC_WORKFLOWS.set('gcp', () => new automated_callback_workflow_1.AutomatedCallbackWorkflow(new token_cache_1.TokenCache(), gcp_machine_workflow_1.callback));\nexports.OIDC_WORKFLOWS.set('k8s', () => new automated_callback_workflow_1.AutomatedCallbackWorkflow(new token_cache_1.TokenCache(), k8s_machine_workflow_1.callback));\n/**\n * OIDC auth provider.\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */\n    constructor(workflow) {\n        super();\n        if (!workflow) {\n            throw new error_1.MongoInvalidArgumentError('No workflow provided to the OIDC auth provider.');\n        }\n        this.workflow = workflow;\n    }\n    /**\n     * Authenticate using OIDC\n     */\n    async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate?.done && !reauthenticating) {\n            return;\n        }\n        const credentials = getCredentials(authContext);\n        if (reauthenticating) {\n            await this.workflow.reauthenticate(connection, credentials);\n        }\n        else {\n            await this.workflow.execute(connection, credentials, response);\n        }\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n    async prepare(handshakeDoc, authContext) {\n        const { connection } = authContext;\n        const credentials = getCredentials(authContext);\n        const result = await this.workflow.speculativeAuth(connection, credentials);\n        return { ...handshakeDoc, ...result };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n//# sourceMappingURL=mongodb_oidc.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AutomatedCallbackWorkflow = void 0;\nconst error_1 = require(\"../../../error\");\nconst timeout_1 = require(\"../../../timeout\");\nconst mongodb_oidc_1 = require(\"../mongodb_oidc\");\nconst callback_workflow_1 = require(\"./callback_workflow\");\n/**\n * Class implementing behaviour for the non human callback workflow.\n * @internal\n */\nclass AutomatedCallbackWorkflow extends callback_workflow_1.CallbackWorkflow {\n    /**\n     * Instantiate the human callback workflow.\n     */\n    constructor(cache, callback) {\n        super(cache, callback);\n    }\n    /**\n     * Execute the OIDC callback workflow.\n     */\n    async execute(connection, credentials) {\n        // If there is a cached access token, try to authenticate with it. If\n        // authentication fails with an Authentication error (18),\n        // invalidate the access token, fetch a new access token, and try\n        // to authenticate again.\n        // If the server fails for any other reason, do not clear the cache.\n        if (this.cache.hasAccessToken) {\n            const token = this.cache.getAccessToken();\n            if (!connection.accessToken) {\n                connection.accessToken = token;\n            }\n            try {\n                return await this.finishAuthentication(connection, credentials, token);\n            }\n            catch (error) {\n                if (error instanceof error_1.MongoError &&\n                    error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {\n                    this.cache.removeAccessToken();\n                    return await this.execute(connection, credentials);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        const response = await this.fetchAccessToken(credentials);\n        this.cache.put(response);\n        connection.accessToken = response.accessToken;\n        await this.finishAuthentication(connection, credentials, response.accessToken);\n    }\n    /**\n     * Fetches the access token using the callback.\n     */\n    async fetchAccessToken(credentials) {\n        const controller = new AbortController();\n        const params = {\n            timeoutContext: controller.signal,\n            version: mongodb_oidc_1.OIDC_VERSION\n        };\n        if (credentials.username) {\n            params.username = credentials.username;\n        }\n        if (credentials.mechanismProperties.TOKEN_RESOURCE) {\n            params.tokenAudience = credentials.mechanismProperties.TOKEN_RESOURCE;\n        }\n        const timeout = timeout_1.Timeout.expires(callback_workflow_1.AUTOMATED_TIMEOUT_MS);\n        try {\n            return await Promise.race([this.executeAndValidateCallback(params), timeout]);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                controller.abort();\n                throw new error_1.MongoOIDCError(`OIDC callback timed out after ${callback_workflow_1.AUTOMATED_TIMEOUT_MS}ms.`);\n            }\n            throw error;\n        }\n        finally {\n            timeout.clear();\n        }\n    }\n}\nexports.AutomatedCallbackWorkflow = AutomatedCallbackWorkflow;\n//# sourceMappingURL=automated_callback_workflow.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.callback = void 0;\nconst azure_1 = require(\"../../../client-side-encryption/providers/azure\");\nconst error_1 = require(\"../../../error\");\nconst utils_1 = require(\"../../../utils\");\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({ Metadata: 'true', Accept: 'application/json' });\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR = 'Azure endpoint did not return a value with only access_token and expires_in properties';\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure.';\n/**\n * The callback function to be used in the automated callback workflow.\n * @param params - The OIDC callback parameters.\n * @returns The OIDC response.\n */\nconst callback = async (params) => {\n    const tokenAudience = params.tokenAudience;\n    const username = params.username;\n    if (!tokenAudience) {\n        throw new error_1.MongoAzureError(TOKEN_RESOURCE_MISSING_ERROR);\n    }\n    const response = await getAzureTokenData(tokenAudience, username);\n    if (!isEndpointResultValid(response)) {\n        throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n    }\n    return response;\n};\nexports.callback = callback;\n/**\n * Hit the Azure endpoint to get the token data.\n */\nasync function getAzureTokenData(tokenAudience, username) {\n    const url = new URL(azure_1.AZURE_BASE_URL);\n    (0, azure_1.addAzureParams)(url, tokenAudience, username);\n    const response = await (0, utils_1.get)(url, {\n        headers: AZURE_HEADERS\n    });\n    if (response.status !== 200) {\n        throw new error_1.MongoAzureError(`Status code ${response.status} returned from the Azure endpoint. Response body: ${response.body}`);\n    }\n    const result = JSON.parse(response.body);\n    return {\n        accessToken: result.access_token,\n        expiresInSeconds: Number(result.expires_in)\n    };\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */\nfunction isEndpointResultValid(token) {\n    if (token == null || typeof token !== 'object')\n        return false;\n    return ('accessToken' in token &&\n        typeof token.accessToken === 'string' &&\n        'expiresInSeconds' in token &&\n        typeof token.expiresInSeconds === 'number');\n}\n//# sourceMappingURL=azure_machine_workflow.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CallbackWorkflow = exports.AUTOMATED_TIMEOUT_MS = exports.HUMAN_TIMEOUT_MS = void 0;\nconst promises_1 = require(\"timers/promises\");\nconst error_1 = require(\"../../../error\");\nconst utils_1 = require(\"../../../utils\");\nconst command_builders_1 = require(\"./command_builders\");\n/** 5 minutes in milliseconds */\nexports.HUMAN_TIMEOUT_MS = 300000;\n/** 1 minute in milliseconds */\nexports.AUTOMATED_TIMEOUT_MS = 60000;\n/** Properties allowed on results of callbacks. */\nconst RESULT_PROPERTIES = ['accessToken', 'expiresInSeconds', 'refreshToken'];\n/** Error message when the callback result is invalid. */\nconst CALLBACK_RESULT_ERROR = 'User provided OIDC callbacks must return a valid object with an accessToken.';\n/** The time to throttle callback calls. */\nconst THROTTLE_MS = 100;\n/**\n * OIDC implementation of a callback based workflow.\n * @internal\n */\nclass CallbackWorkflow {\n    /**\n     * Instantiate the callback workflow.\n     */\n    constructor(cache, callback) {\n        this.cache = cache;\n        this.callback = this.withLock(callback);\n        this.lastExecutionTime = Date.now() - THROTTLE_MS;\n    }\n    /**\n     * Get the document to add for speculative authentication. This also needs\n     * to add a db field from the credentials source.\n     */\n    async speculativeAuth(connection, credentials) {\n        // Check if the Client Cache has an access token.\n        // If it does, cache the access token in the Connection Cache and send a JwtStepRequest\n        // with the cached access token in the speculative authentication SASL payload.\n        if (this.cache.hasAccessToken) {\n            const accessToken = this.cache.getAccessToken();\n            connection.accessToken = accessToken;\n            const document = (0, command_builders_1.finishCommandDocument)(accessToken);\n            document.db = credentials.source;\n            return { speculativeAuthenticate: document };\n        }\n        return {};\n    }\n    /**\n     * Reauthenticate the callback workflow. For this we invalidated the access token\n     * in the cache and run the authentication steps again. No initial handshake needs\n     * to be sent.\n     */\n    async reauthenticate(connection, credentials) {\n        if (this.cache.hasAccessToken) {\n            // Reauthentication implies the token has expired.\n            if (connection.accessToken === this.cache.getAccessToken()) {\n                // If connection's access token is the same as the cache's, remove\n                // the token from the cache and connection.\n                this.cache.removeAccessToken();\n                delete connection.accessToken;\n            }\n            else {\n                // If the connection's access token is different from the cache's, set\n                // the cache's token on the connection and do not remove from the\n                // cache.\n                connection.accessToken = this.cache.getAccessToken();\n            }\n        }\n        await this.execute(connection, credentials);\n    }\n    /**\n     * Starts the callback authentication process. If there is a speculative\n     * authentication document from the initial handshake, then we will use that\n     * value to get the issuer, otherwise we will send the saslStart command.\n     */\n    async startAuthentication(connection, credentials, response) {\n        let result;\n        if (response?.speculativeAuthenticate) {\n            result = response.speculativeAuthenticate;\n        }\n        else {\n            result = await connection.command((0, utils_1.ns)(credentials.source), (0, command_builders_1.startCommandDocument)(credentials), undefined);\n        }\n        return result;\n    }\n    /**\n     * Finishes the callback authentication process.\n     */\n    async finishAuthentication(connection, credentials, token, conversationId) {\n        await connection.command((0, utils_1.ns)(credentials.source), (0, command_builders_1.finishCommandDocument)(token, conversationId), undefined);\n    }\n    /**\n     * Executes the callback and validates the output.\n     */\n    async executeAndValidateCallback(params) {\n        const result = await this.callback(params);\n        // Validate that the result returned by the callback is acceptable. If it is not\n        // we must clear the token result from the cache.\n        if (isCallbackResultInvalid(result)) {\n            throw new error_1.MongoMissingCredentialsError(CALLBACK_RESULT_ERROR);\n        }\n        return result;\n    }\n    /**\n     * Ensure the callback is only executed one at a time and throttles the calls\n     * to every 100ms.\n     */\n    withLock(callback) {\n        let lock = Promise.resolve();\n        return async (params) => {\n            // We do this to ensure that we would never return the result of the\n            // previous lock, only the current callback's value would get returned.\n            await lock;\n            lock = lock\n                .catch(() => null)\n                .then(async () => {\n                const difference = Date.now() - this.lastExecutionTime;\n                if (difference <= THROTTLE_MS) {\n                    await (0, promises_1.setTimeout)(THROTTLE_MS - difference, { signal: params.timeoutContext });\n                }\n                this.lastExecutionTime = Date.now();\n                return await callback(params);\n            });\n            return await lock;\n        };\n    }\n}\nexports.CallbackWorkflow = CallbackWorkflow;\n/**\n * Determines if a result returned from a request or refresh callback\n * function is invalid. This means the result is nullish, doesn't contain\n * the accessToken required field, and does not contain extra fields.\n */\nfunction isCallbackResultInvalid(tokenResult) {\n    if (tokenResult == null || typeof tokenResult !== 'object')\n        return true;\n    if (!('accessToken' in tokenResult))\n        return true;\n    return !Object.getOwnPropertyNames(tokenResult).every(prop => RESULT_PROPERTIES.includes(prop));\n}\n//# sourceMappingURL=callback_workflow.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.finishCommandDocument = finishCommandDocument;\nexports.startCommandDocument = startCommandDocument;\nconst bson_1 = require(\"../../../bson\");\nconst providers_1 = require(\"../providers\");\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */\nfunction finishCommandDocument(token, conversationId) {\n    if (conversationId != null) {\n        return {\n            saslContinue: 1,\n            conversationId: conversationId,\n            payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n        };\n    }\n    // saslContinue requires a conversationId in the command to be valid so in this\n    // case the server allows \"step two\" to actually be a saslStart with the token\n    // as the jwt since the use of the cached value has no correlating conversating\n    // on the particular connection.\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n    };\n}\n/**\n * Generate the saslStart command document.\n */\nfunction startCommandDocument(credentials) {\n    const payload = {};\n    if (credentials.username) {\n        payload.n = credentials.username;\n    }\n    return {\n        saslStart: 1,\n        autoAuthorize: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n    };\n}\n//# sourceMappingURL=command_builders.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.callback = void 0;\nconst error_1 = require(\"../../../error\");\nconst utils_1 = require(\"../../../utils\");\n/** GCP base URL. */\nconst GCP_BASE_URL = 'http://metadata/computeMetadata/v1/instance/service-accounts/default/identity';\n/** GCP request headers. */\nconst GCP_HEADERS = Object.freeze({ 'Metadata-Flavor': 'Google' });\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is gcp.';\n/**\n * The callback function to be used in the automated callback workflow.\n * @param params - The OIDC callback parameters.\n * @returns The OIDC response.\n */\nconst callback = async (params) => {\n    const tokenAudience = params.tokenAudience;\n    if (!tokenAudience) {\n        throw new error_1.MongoGCPError(TOKEN_RESOURCE_MISSING_ERROR);\n    }\n    return await getGcpTokenData(tokenAudience);\n};\nexports.callback = callback;\n/**\n * Hit the GCP endpoint to get the token data.\n */\nasync function getGcpTokenData(tokenAudience) {\n    const url = new URL(GCP_BASE_URL);\n    url.searchParams.append('audience', tokenAudience);\n    const response = await (0, utils_1.get)(url, {\n        headers: GCP_HEADERS\n    });\n    if (response.status !== 200) {\n        throw new error_1.MongoGCPError(`Status code ${response.status} returned from the GCP endpoint. Response body: ${response.body}`);\n    }\n    return { accessToken: response.body };\n}\n//# sourceMappingURL=gcp_machine_workflow.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HumanCallbackWorkflow = void 0;\nconst bson_1 = require(\"../../../bson\");\nconst error_1 = require(\"../../../error\");\nconst timeout_1 = require(\"../../../timeout\");\nconst mongodb_oidc_1 = require(\"../mongodb_oidc\");\nconst callback_workflow_1 = require(\"./callback_workflow\");\n/**\n * Class implementing behaviour for the non human callback workflow.\n * @internal\n */\nclass HumanCallbackWorkflow extends callback_workflow_1.CallbackWorkflow {\n    /**\n     * Instantiate the human callback workflow.\n     */\n    constructor(cache, callback) {\n        super(cache, callback);\n    }\n    /**\n     * Execute the OIDC human callback workflow.\n     */\n    async execute(connection, credentials) {\n        // Check if the Client Cache has an access token.\n        // If it does, cache the access token in the Connection Cache and perform a One-Step SASL conversation\n        // using the access token. If the server returns an Authentication error (18),\n        // invalidate the access token token from the Client Cache, clear the Connection Cache,\n        // and restart the authentication flow. Raise any other errors to the user. On success, exit the algorithm.\n        if (this.cache.hasAccessToken) {\n            const token = this.cache.getAccessToken();\n            connection.accessToken = token;\n            try {\n                return await this.finishAuthentication(connection, credentials, token);\n            }\n            catch (error) {\n                if (error instanceof error_1.MongoError &&\n                    error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {\n                    this.cache.removeAccessToken();\n                    delete connection.accessToken;\n                    return await this.execute(connection, credentials);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        // Check if the Client Cache has a refresh token.\n        // If it does, call the OIDC Human Callback with the cached refresh token and IdpInfo to get a\n        // new access token. Cache the new access token in the Client Cache and Connection Cache.\n        // Perform a One-Step SASL conversation using the new access token. If the the server returns\n        // an Authentication error (18), clear the refresh token, invalidate the access token from the\n        // Client Cache, clear the Connection Cache, and restart the authentication flow. Raise any other\n        // errors to the user. On success, exit the algorithm.\n        if (this.cache.hasRefreshToken) {\n            const refreshToken = this.cache.getRefreshToken();\n            const result = await this.fetchAccessToken(this.cache.getIdpInfo(), credentials, refreshToken);\n            this.cache.put(result);\n            connection.accessToken = result.accessToken;\n            try {\n                return await this.finishAuthentication(connection, credentials, result.accessToken);\n            }\n            catch (error) {\n                if (error instanceof error_1.MongoError &&\n                    error.code === error_1.MONGODB_ERROR_CODES.AuthenticationFailed) {\n                    this.cache.removeRefreshToken();\n                    delete connection.accessToken;\n                    return await this.execute(connection, credentials);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        // Start a new Two-Step SASL conversation.\n        // Run a PrincipalStepRequest to get the IdpInfo.\n        // Call the OIDC Human Callback with the new IdpInfo to get a new access token and optional refresh\n        // token. Drivers MUST NOT pass a cached refresh token to the callback when performing\n        // a new Two-Step conversation. Cache the new IdpInfo and refresh token in the Client Cache and the\n        // new access token in the Client Cache and Connection Cache.\n        // Attempt to authenticate using a JwtStepRequest with the new access token. Raise any errors to the user.\n        const startResponse = await this.startAuthentication(connection, credentials);\n        const conversationId = startResponse.conversationId;\n        const idpInfo = bson_1.BSON.deserialize(startResponse.payload.buffer);\n        const callbackResponse = await this.fetchAccessToken(idpInfo, credentials);\n        this.cache.put(callbackResponse, idpInfo);\n        connection.accessToken = callbackResponse.accessToken;\n        return await this.finishAuthentication(connection, credentials, callbackResponse.accessToken, conversationId);\n    }\n    /**\n     * Fetches an access token using the callback.\n     */\n    async fetchAccessToken(idpInfo, credentials, refreshToken) {\n        const controller = new AbortController();\n        const params = {\n            timeoutContext: controller.signal,\n            version: mongodb_oidc_1.OIDC_VERSION,\n            idpInfo: idpInfo\n        };\n        if (credentials.username) {\n            params.username = credentials.username;\n        }\n        if (refreshToken) {\n            params.refreshToken = refreshToken;\n        }\n        const timeout = timeout_1.Timeout.expires(callback_workflow_1.HUMAN_TIMEOUT_MS);\n        try {\n            return await Promise.race([this.executeAndValidateCallback(params), timeout]);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                controller.abort();\n                throw new error_1.MongoOIDCError(`OIDC callback timed out after ${callback_workflow_1.HUMAN_TIMEOUT_MS}ms.`);\n            }\n            throw error;\n        }\n        finally {\n            timeout.clear();\n        }\n    }\n}\nexports.HumanCallbackWorkflow = HumanCallbackWorkflow;\n//# sourceMappingURL=human_callback_workflow.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.callback = void 0;\nconst promises_1 = require(\"fs/promises\");\n/** The fallback file name */\nconst FALLBACK_FILENAME = '/var/run/secrets/kubernetes.io/serviceaccount/token';\n/** The azure environment variable for the file name. */\nconst AZURE_FILENAME = 'AZURE_FEDERATED_TOKEN_FILE';\n/** The AWS environment variable for the file name. */\nconst AWS_FILENAME = 'AWS_WEB_IDENTITY_TOKEN_FILE';\n/**\n * The callback function to be used in the automated callback workflow.\n * @param params - The OIDC callback parameters.\n * @returns The OIDC response.\n */\nconst callback = async () => {\n    let filename;\n    if (process.env[AZURE_FILENAME]) {\n        filename = process.env[AZURE_FILENAME];\n    }\n    else if (process.env[AWS_FILENAME]) {\n        filename = process.env[AWS_FILENAME];\n    }\n    else {\n        filename = FALLBACK_FILENAME;\n    }\n    const token = await (0, promises_1.readFile)(filename, 'utf8');\n    return { accessToken: token };\n};\nexports.callback = callback;\n//# sourceMappingURL=k8s_machine_workflow.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenCache = void 0;\nconst error_1 = require(\"../../../error\");\nclass MongoOIDCError extends error_1.MongoDriverError {\n}\n/** @internal */\nclass TokenCache {\n    get hasAccessToken() {\n        return !!this.accessToken;\n    }\n    get hasRefreshToken() {\n        return !!this.refreshToken;\n    }\n    get hasIdpInfo() {\n        return !!this.idpInfo;\n    }\n    getAccessToken() {\n        if (!this.accessToken) {\n            throw new MongoOIDCError('Attempted to get an access token when none exists.');\n        }\n        return this.accessToken;\n    }\n    getRefreshToken() {\n        if (!this.refreshToken) {\n            throw new MongoOIDCError('Attempted to get a refresh token when none exists.');\n        }\n        return this.refreshToken;\n    }\n    getIdpInfo() {\n        if (!this.idpInfo) {\n            throw new MongoOIDCError('Attempted to get IDP information when none exists.');\n        }\n        return this.idpInfo;\n    }\n    put(response, idpInfo) {\n        this.accessToken = response.accessToken;\n        this.refreshToken = response.refreshToken;\n        this.expiresInSeconds = response.expiresInSeconds;\n        if (idpInfo) {\n            this.idpInfo = idpInfo;\n        }\n    }\n    removeAccessToken() {\n        this.accessToken = undefined;\n    }\n    removeRefreshToken() {\n        this.refreshToken = undefined;\n    }\n}\nexports.TokenCache = TokenCache;\n//# sourceMappingURL=token_cache.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.callback = void 0;\nconst fs = require(\"fs\");\nconst error_1 = require(\"../../../error\");\n/** Error for when the token is missing in the environment. */\nconst TOKEN_MISSING_ERROR = 'OIDC_TOKEN_FILE must be set in the environment.';\n/**\n * The callback function to be used in the automated callback workflow.\n * @param params - The OIDC callback parameters.\n * @returns The OIDC response.\n */\nconst callback = async () => {\n    const tokenFile = process.env.OIDC_TOKEN_FILE;\n    if (!tokenFile) {\n        throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n    }\n    const token = await fs.promises.readFile(tokenFile, 'utf8');\n    return { accessToken: token };\n};\nexports.callback = callback;\n//# sourceMappingURL=token_machine_workflow.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Plain = void 0;\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nclass Plain extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password } = credentials;\n        const payload = new bson_1.Binary(Buffer.from(`\\x00${username}\\x00${password}`));\n        const command = {\n            saslStart: 1,\n            mechanism: 'PLAIN',\n            payload: payload,\n            autoAuthorize: 1\n        };\n        await connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined);\n    }\n}\nexports.Plain = Plain;\n//# sourceMappingURL=plain.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = exports.AuthMechanism = void 0;\n/** @public */\nexports.AuthMechanism = Object.freeze({\n    MONGODB_AWS: 'MONGODB-AWS',\n    MONGODB_CR: 'MONGODB-CR',\n    MONGODB_DEFAULT: 'DEFAULT',\n    MONGODB_GSSAPI: 'GSSAPI',\n    MONGODB_PLAIN: 'PLAIN',\n    MONGODB_SCRAM_SHA1: 'SCRAM-SHA-1',\n    MONGODB_SCRAM_SHA256: 'SCRAM-SHA-256',\n    MONGODB_X509: 'MONGODB-X509',\n    MONGODB_OIDC: 'MONGODB-OIDC'\n});\n/** @internal */\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = new Set([\n    exports.AuthMechanism.MONGODB_GSSAPI,\n    exports.AuthMechanism.MONGODB_AWS,\n    exports.AuthMechanism.MONGODB_OIDC,\n    exports.AuthMechanism.MONGODB_X509\n]);\n//# sourceMappingURL=providers.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ScramSHA256 = exports.ScramSHA1 = void 0;\nconst saslprep_1 = require(\"@mongodb-js/saslprep\");\nconst crypto = require(\"crypto\");\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst providers_1 = require(\"./providers\");\nclass ScramSHA extends auth_provider_1.AuthProvider {\n    constructor(cryptoMethod) {\n        super();\n        this.cryptoMethod = cryptoMethod || 'sha1';\n    }\n    async prepare(handshakeDoc, authContext) {\n        const cryptoMethod = this.cryptoMethod;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const nonce = await (0, utils_1.randomBytes)(24);\n        // store the nonce for later use\n        authContext.nonce = nonce;\n        const request = {\n            ...handshakeDoc,\n            speculativeAuthenticate: {\n                ...makeFirstMessage(cryptoMethod, credentials, nonce),\n                db: credentials.source\n            }\n        };\n        return request;\n    }\n    async auth(authContext) {\n        const { reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate && !reauthenticating) {\n            return await continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);\n        }\n        return await executeScram(this.cryptoMethod, authContext);\n    }\n}\nfunction cleanUsername(username) {\n    return username.replace('=', '=3D').replace(',', '=2C');\n}\nfunction clientFirstMessageBare(username, nonce) {\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return Buffer.concat([\n        Buffer.from('n=', 'utf8'),\n        Buffer.from(username, 'utf8'),\n        Buffer.from(',r=', 'utf8'),\n        Buffer.from(nonce.toString('base64'), 'utf8')\n    ]);\n}\nfunction makeFirstMessage(cryptoMethod, credentials, nonce) {\n    const username = cleanUsername(credentials.username);\n    const mechanism = cryptoMethod === 'sha1' ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return {\n        saslStart: 1,\n        mechanism,\n        payload: new bson_1.Binary(Buffer.concat([Buffer.from('n,,', 'utf8'), clientFirstMessageBare(username, nonce)])),\n        autoAuthorize: 1,\n        options: { skipEmptyExchange: true }\n    };\n}\nasync function executeScram(cryptoMethod, authContext) {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('AuthContext must contain a valid nonce property');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);\n    const response = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStartCmd, undefined);\n    await continueScramConversation(cryptoMethod, response, authContext);\n}\nasync function continueScramConversation(cryptoMethod, response, authContext) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('Unable to continue SCRAM without valid nonce');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const username = cleanUsername(credentials.username);\n    const password = credentials.password;\n    const processedPassword = cryptoMethod === 'sha256' ? (0, saslprep_1.saslprep)(password) : passwordDigest(username, password);\n    const payload = Buffer.isBuffer(response.payload)\n        ? new bson_1.Binary(response.payload)\n        : response.payload;\n    const dict = parsePayload(payload);\n    const iterations = parseInt(dict.i, 10);\n    if (iterations && iterations < 4096) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid iteration count ${iterations}`);\n    }\n    const salt = dict.s;\n    const rnonce = dict.r;\n    if (rnonce.startsWith('nonce')) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid nonce: ${rnonce}`);\n    }\n    // Set up start of proof\n    const withoutProof = `c=biws,r=${rnonce}`;\n    const saltedPassword = HI(processedPassword, Buffer.from(salt, 'base64'), iterations, cryptoMethod);\n    const clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');\n    const serverKey = HMAC(cryptoMethod, saltedPassword, 'Server Key');\n    const storedKey = H(cryptoMethod, clientKey);\n    const authMessage = [\n        clientFirstMessageBare(username, nonce),\n        payload.toString('utf8'),\n        withoutProof\n    ].join(',');\n    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n    const clientProof = `p=${xor(clientKey, clientSignature)}`;\n    const clientFinal = [withoutProof, clientProof].join(',');\n    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);\n    const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: response.conversationId,\n        payload: new bson_1.Binary(Buffer.from(clientFinal))\n    };\n    const r = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinueCmd, undefined);\n    const parsedResponse = parsePayload(r.payload);\n    if (!compareDigest(Buffer.from(parsedResponse.v, 'base64'), serverSignature)) {\n        throw new error_1.MongoRuntimeError('Server returned an invalid signature');\n    }\n    if (r.done !== false) {\n        // If the server sends r.done === true we can save one RTT\n        return;\n    }\n    const retrySaslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: Buffer.alloc(0)\n    };\n    await connection.command((0, utils_1.ns)(`${db}.$cmd`), retrySaslContinueCmd, undefined);\n}\nfunction parsePayload(payload) {\n    const payloadStr = payload.toString('utf8');\n    const dict = {};\n    const parts = payloadStr.split(',');\n    for (let i = 0; i < parts.length; i++) {\n        const valueParts = (parts[i].match(/^([^=]*)=(.*)$/) ?? []).slice(1);\n        dict[valueParts[0]] = valueParts[1];\n    }\n    return dict;\n}\nfunction passwordDigest(username, password) {\n    if (typeof username !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Username must be a string');\n    }\n    if (typeof password !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Password must be a string');\n    }\n    if (password.length === 0) {\n        throw new error_1.MongoInvalidArgumentError('Password cannot be empty');\n    }\n    let md5;\n    try {\n        md5 = crypto.createHash('md5');\n    }\n    catch (err) {\n        if (crypto.getFips()) {\n            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.\n            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'\n            throw new Error('Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode');\n        }\n        throw err;\n    }\n    md5.update(`${username}:mongo:${password}`, 'utf8');\n    return md5.digest('hex');\n}\n// XOR two buffers\nfunction xor(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        a = Buffer.from(a);\n    }\n    if (!Buffer.isBuffer(b)) {\n        b = Buffer.from(b);\n    }\n    const length = Math.max(a.length, b.length);\n    const res = [];\n    for (let i = 0; i < length; i += 1) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res).toString('base64');\n}\nfunction H(method, text) {\n    return crypto.createHash(method).update(text).digest();\n}\nfunction HMAC(method, key, text) {\n    return crypto.createHmac(method, key).update(text).digest();\n}\nlet _hiCache = {};\nlet _hiCacheCount = 0;\nfunction _hiCachePurge() {\n    _hiCache = {};\n    _hiCacheCount = 0;\n}\nconst hiLengthMap = {\n    sha256: 32,\n    sha1: 20\n};\nfunction HI(data, salt, iterations, cryptoMethod) {\n    // omit the work if already generated\n    const key = [data, salt.toString('base64'), iterations].join('_');\n    if (_hiCache[key] != null) {\n        return _hiCache[key];\n    }\n    // generate the salt\n    const saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);\n    // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n    if (_hiCacheCount >= 200) {\n        _hiCachePurge();\n    }\n    _hiCache[key] = saltedData;\n    _hiCacheCount += 1;\n    return saltedData;\n}\nfunction compareDigest(lhs, rhs) {\n    if (lhs.length !== rhs.length) {\n        return false;\n    }\n    if (typeof crypto.timingSafeEqual === 'function') {\n        return crypto.timingSafeEqual(lhs, rhs);\n    }\n    let result = 0;\n    for (let i = 0; i < lhs.length; i++) {\n        result |= lhs[i] ^ rhs[i];\n    }\n    return result === 0;\n}\nclass ScramSHA1 extends ScramSHA {\n    constructor() {\n        super('sha1');\n    }\n}\nexports.ScramSHA1 = ScramSHA1;\nclass ScramSHA256 extends ScramSHA {\n    constructor() {\n        super('sha256');\n    }\n}\nexports.ScramSHA256 = ScramSHA256;\n//# sourceMappingURL=scram.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.X509 = void 0;\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nclass X509 extends auth_provider_1.AuthProvider {\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        return { ...handshakeDoc, speculativeAuthenticate: x509AuthenticateCommand(credentials) };\n    }\n    async auth(authContext) {\n        const connection = authContext.connection;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const response = authContext.response;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        await connection.command((0, utils_1.ns)('$external.$cmd'), x509AuthenticateCommand(credentials), undefined);\n    }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };\n    if (credentials.username) {\n        command.user = credentials.username;\n    }\n    return command;\n}\n//# sourceMappingURL=x509.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\nconst commands_1 = require(\"./commands\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nclass CommandStartedEvent {\n    /**\n     * Create a started event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     */\n    constructor(connection, command, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_STARTED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        // TODO: remove in major revision, this is not spec behavior\n        if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n            this.commandObj = {};\n            this.commandObj[commandName] = true;\n        }\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.databaseName = command.databaseName;\n        this.commandName = commandName;\n        this.command = maybeRedact(commandName, cmd, cmd);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nclass CommandSucceededEvent {\n    /**\n     * Create a succeeded event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param reply - the reply for this command from the server\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, reply, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_SUCCEEDED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.reply = maybeRedact(commandName, cmd, extractReply(reply));\n        this.serverConnectionId = serverConnectionId;\n        this.databaseName = command.databaseName;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nclass CommandFailedEvent {\n    /**\n     * Create a failure event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param error - the generated error or a server error response\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, error, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_FAILED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.failure = maybeRedact(commandName, cmd, error);\n        this.serverConnectionId = serverConnectionId;\n        this.databaseName = command.databaseName;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexports.SENSITIVE_COMMANDS = new Set([\n    'authenticate',\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'createUser',\n    'updateUser',\n    'copydbgetnonce',\n    'copydbsaslstart',\n    'copydb'\n]);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = (commandDoc) => Object.keys(commandDoc)[0];\nconst collectionName = (command) => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) ||\n    (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\nconst LEGACY_FIND_QUERY_MAP = {\n    $query: 'filter',\n    $orderby: 'sort',\n    $hint: 'hint',\n    $comment: 'comment',\n    $maxScan: 'maxScan',\n    $max: 'max',\n    $min: 'min',\n    $returnKey: 'returnKey',\n    $showDiskLoc: 'showRecordId',\n    $maxTimeMS: 'maxTimeMS',\n    $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n    numberToSkip: 'skip',\n    numberToReturn: 'batchSize',\n    returnFieldSelector: 'projection'\n};\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n    if (command instanceof commands_1.OpMsgRequest) {\n        const cmd = { ...command.command };\n        // For OP_MSG with payload type 1 we need to pull the documents\n        // array out of the document sequence for monitoring.\n        if (cmd.ops instanceof commands_1.DocumentSequence) {\n            cmd.ops = cmd.ops.documents;\n        }\n        if (cmd.nsInfo instanceof commands_1.DocumentSequence) {\n            cmd.nsInfo = cmd.nsInfo.documents;\n        }\n        return cmd;\n    }\n    if (command.query?.$query) {\n        let result;\n        if (command.ns === 'admin.$cmd') {\n            // up-convert legacy command\n            result = Object.assign({}, command.query.$query);\n        }\n        else {\n            // up-convert legacy find command\n            result = { find: collectionName(command) };\n            Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n                if (command.query[key] != null) {\n                    result[LEGACY_FIND_QUERY_MAP[key]] = { ...command.query[key] };\n                }\n            });\n        }\n        Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n            const legacyKey = key;\n            if (command[legacyKey] != null) {\n                result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = command[legacyKey];\n            }\n        });\n        return result;\n    }\n    let clonedQuery = {};\n    const clonedCommand = { ...command };\n    if (command.query) {\n        clonedQuery = { ...command.query };\n        clonedCommand.query = clonedQuery;\n    }\n    return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(reply) {\n    if (!reply) {\n        return reply;\n    }\n    return reply.result ? reply.result : reply;\n}\nfunction extractConnectionDetails(connection) {\n    let connectionId;\n    if ('id' in connection) {\n        connectionId = connection.id;\n    }\n    return {\n        address: connection.address,\n        serviceId: connection.serviceId,\n        connectionId\n    };\n}\n//# sourceMappingURL=command_monitoring_events.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OpCompressedRequest = exports.OpMsgResponse = exports.OpMsgRequest = exports.DocumentSequence = exports.OpReply = exports.OpQueryRequest = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst constants_1 = require(\"./wire_protocol/constants\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\nconst encodeUTF8Into = BSON.BSON.onDemand.ByteUtils.encodeUTF8Into;\n/** @internal */\nclass OpQueryRequest {\n    constructor(databaseName, query, options) {\n        /** moreToCome is an OP_MSG only concept */\n        this.moreToCome = false;\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        const ns = `${databaseName}.$cmd`;\n        if (typeof databaseName !== 'string') {\n            throw new error_1.MongoRuntimeError('Database name must be a string for a query');\n        }\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null)\n            throw new error_1.MongoRuntimeError('A query document must be specified for query');\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf('\\x00') !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n        }\n        // Basic optionsa\n        this.databaseName = databaseName;\n        this.query = query;\n        this.ns = ns;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */\n    incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */\n    nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */\n    static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn)\n            this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 + // Flags\n            Buffer.byteLength(this.ns) +\n            1 + // namespace\n            4 + // numberToSkip\n            4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = (totalLength >> 24) & 0xff;\n        header[2] = (totalLength >> 16) & 0xff;\n        header[1] = (totalLength >> 8) & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = (this.requestId >> 24) & 0xff;\n        header[index + 2] = (this.requestId >> 16) & 0xff;\n        header[index + 1] = (this.requestId >> 8) & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = (0 >> 24) & 0xff;\n        header[index + 2] = (0 >> 16) & 0xff;\n        header[index + 1] = (0 >> 8) & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = (constants_1.OP_QUERY >> 24) & 0xff;\n        header[index + 2] = (constants_1.OP_QUERY >> 16) & 0xff;\n        header[index + 1] = (constants_1.OP_QUERY >> 8) & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = (flags >> 24) & 0xff;\n        header[index + 2] = (flags >> 16) & 0xff;\n        header[index + 1] = (flags >> 8) & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, 'utf8') + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n        header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n        header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n        header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n        header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.OpQueryRequest = OpQueryRequest;\n/** @internal */\nclass OpReply {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.index = 0;\n        this.sections = [];\n        /** moreToCome is an OP_MSG only concept */\n        this.moreToCome = false;\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse() {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return this.sections[0];\n        // Position within OP_REPLY at which documents start\n        // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        if (this.numberReturned < 0 || this.numberReturned > 2 ** 32 - 1) {\n            throw new RangeError(`OP_REPLY numberReturned is an invalid array length ${this.numberReturned}`);\n        }\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for (let i = 0; i < this.numberReturned; i++) {\n            const bsonSize = this.data[this.index] |\n                (this.data[this.index + 1] << 8) |\n                (this.data[this.index + 2] << 16) |\n                (this.data[this.index + 3] << 24);\n            const section = this.data.subarray(this.index, this.index + bsonSize);\n            this.sections.push(section);\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        // Set parsed\n        this.parsed = true;\n        return this.sections[0];\n    }\n}\nexports.OpReply = OpReply;\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\nclass DocumentSequence {\n    /**\n     * Create a new document sequence for the provided field.\n     * @param field - The field it will replace.\n     */\n    constructor(field, documents) {\n        this.field = field;\n        this.documents = [];\n        this.chunks = [];\n        this.serializedDocumentsLength = 0;\n        // Document sequences starts with type 1 at the first byte.\n        // Field strings must always be UTF-8.\n        const buffer = Buffer.allocUnsafe(1 + 4 + this.field.length + 1);\n        buffer[0] = 1;\n        // Third part is the field name at offset 5 with trailing null byte.\n        encodeUTF8Into(buffer, `${this.field}\\0`, 5);\n        this.chunks.push(buffer);\n        this.header = buffer;\n        if (documents) {\n            for (const doc of documents) {\n                this.push(doc, BSON.serialize(doc));\n            }\n        }\n    }\n    /**\n     * Push a document to the document sequence. Will serialize the document\n     * as well and return the current serialized length of all documents.\n     * @param document - The document to add.\n     * @param buffer - The serialized document in raw BSON.\n     * @returns The new total document sequence length.\n     */\n    push(document, buffer) {\n        this.serializedDocumentsLength += buffer.length;\n        // Push the document.\n        this.documents.push(document);\n        // Push the document raw bson.\n        this.chunks.push(buffer);\n        // Write the new length.\n        this.header?.writeInt32LE(4 + this.field.length + 1 + this.serializedDocumentsLength, 1);\n        return this.serializedDocumentsLength + this.header.length;\n    }\n    /**\n     * Get the fully serialized bytes for the document sequence section.\n     * @returns The section bytes.\n     */\n    toBin() {\n        return Buffer.concat(this.chunks);\n    }\n}\nexports.DocumentSequence = DocumentSequence;\n/** @internal */\nclass OpMsgRequest {\n    constructor(databaseName, command, options) {\n        // Basic options needed to be passed in\n        if (command == null)\n            throw new error_1.MongoInvalidArgumentError('Query document must be specified for query');\n        // Basic optionsa\n        this.databaseName = databaseName;\n        this.command = command;\n        this.command.$db = databaseName;\n        // Ensure empty options\n        this.options = options ?? {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome ?? command.writeConcern?.w === 0;\n        this.exhaustAllowed =\n            typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeSections(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    /**\n     * Add the sections to the OP_MSG request's buffers and returns the length.\n     */\n    makeSections(buffers, document) {\n        const sequencesBuffer = this.extractDocumentSequences(document);\n        const payloadTypeBuffer = Buffer.allocUnsafe(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        // First section, type 0\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        // Subsequent sections, type 1\n        buffers.push(sequencesBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length + sequencesBuffer.length;\n    }\n    /**\n     * Extracts the document sequences from the command document and returns\n     * a buffer to be added as multiple sections after the initial type 0\n     * section in the message.\n     */\n    extractDocumentSequences(document) {\n        // Pull out any field in the command document that's value is a document sequence.\n        const chunks = [];\n        for (const [key, value] of Object.entries(document)) {\n            if (value instanceof DocumentSequence) {\n                chunks.push(value.toBin());\n                // Why are we removing the field from the command? This is because it needs to be\n                // removed in the OP_MSG request first section, and DocumentSequence is not a\n                // BSON type and is specific to the MongoDB wire protocol so there's nothing\n                // our BSON serializer can do about this. Since DocumentSequence is not exposed\n                // in the public API and only used internally, we are never mutating an original\n                // command provided by the user, just our own, and it's cheaper to delete from\n                // our own command than copying it.\n                delete document[key];\n            }\n        }\n        if (chunks.length > 0) {\n            return Buffer.concat(chunks);\n        }\n        // If we have no document sequences we return an empty buffer for nothing to add\n        // to the payload.\n        return Buffer.alloc(0);\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = (_requestId + 1) & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.OpMsgRequest = OpMsgRequest;\n/** @internal */\nclass OpMsgResponse {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.index = 0;\n        this.sections = [];\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse() {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return this.sections[0];\n        this.index = 4;\n        while (this.index < this.data.length) {\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.subarray(this.index, this.index + bsonSize);\n                this.sections.push(bin);\n                this.index += bsonSize;\n            }\n            else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n            }\n        }\n        this.parsed = true;\n        return this.sections[0];\n    }\n}\nexports.OpMsgResponse = OpMsgResponse;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */\nclass OpCompressedRequest {\n    constructor(command, options) {\n        this.command = command;\n        this.options = {\n            zlibCompressionLevel: options.zlibCompressionLevel,\n            agreedCompressor: options.agreedCompressor\n        };\n    }\n    // Return whether a command contains an uncompressible command term\n    // Will return true if command contains no uncompressible command terms\n    static canCompress(command) {\n        const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n        const commandName = Object.keys(commandDoc)[0];\n        return !compression_1.uncompressibleCommands.has(commandName);\n    }\n    async toBin() {\n        const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n        // otherwise, compress the message\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        // Compress the message body\n        const compressedMessage = await (0, compression_1.compress)(this.options, messageToBeCompressed);\n        // Create the msgHeader of OP_COMPRESSED\n        const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n        msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n        msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n        msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n        msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n        // Create the compression details of OP_COMPRESSED\n        const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n        compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n        compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n        compressionDetails.writeUInt8(compression_1.Compressor[this.options.agreedCompressor], 8); // compressorID\n        return [msgHeader, compressionDetails, compressedMessage];\n    }\n}\nexports.OpCompressedRequest = OpCompressedRequest;\n//# sourceMappingURL=commands.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = void 0;\nexports.connect = connect;\nexports.makeConnection = makeConnection;\nexports.performInitialHandshake = performInitialHandshake;\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\nexports.makeSocket = makeSocket;\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst constants_1 = require(\"../constants\");\nconst deps_1 = require(\"../deps\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst auth_provider_1 = require(\"./auth/auth_provider\");\nconst providers_1 = require(\"./auth/providers\");\nconst connection_1 = require(\"./connection\");\nconst constants_2 = require(\"./wire_protocol/constants\");\nasync function connect(options) {\n    let connection = null;\n    try {\n        const socket = await makeSocket(options);\n        connection = makeConnection(options, socket);\n        await performInitialHandshake(connection, options);\n        return connection;\n    }\n    catch (error) {\n        connection?.destroy();\n        throw error;\n    }\n}\nfunction makeConnection(options, socket) {\n    let ConnectionType = options.connectionType ?? connection_1.Connection;\n    if (options.autoEncrypter) {\n        ConnectionType = connection_1.CryptoConnection;\n    }\n    return new ConnectionType(socket, options);\n}\nfunction checkSupportedServer(hello, options) {\n    const maxWireVersion = Number(hello.maxWireVersion);\n    const minWireVersion = Number(hello.minWireVersion);\n    const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n    const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n    if (serverVersionHighEnough) {\n        if (serverVersionLowEnough) {\n            return null;\n        }\n        const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n        return new error_1.MongoCompatibilityError(message);\n    }\n    const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n    const credentials = options.credentials;\n    if (credentials) {\n        if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) &&\n            !options.authProviders.getOrCreateProvider(credentials.mechanism, credentials.mechanismProperties)) {\n            throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n        }\n    }\n    const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n    conn.authContext = authContext;\n    const handshakeDoc = await prepareHandshakeDocument(authContext);\n    // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n    const handshakeOptions = { ...options, raw: false };\n    if (typeof options.connectTimeoutMS === 'number') {\n        // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n        handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    const response = await executeHandshake(handshakeDoc, handshakeOptions);\n    if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    if (response.helloOk) {\n        conn.helloOk = true;\n    }\n    const supportedServerErr = checkSupportedServer(response, options);\n    if (supportedServerErr) {\n        throw supportedServerErr;\n    }\n    if (options.loadBalanced) {\n        if (!response.serviceId) {\n            throw new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' +\n                'but the server does not support this mode.');\n        }\n    }\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.hello = response;\n    conn.lastHelloMS = new Date().getTime() - start;\n    if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = options.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n        }\n        try {\n            await provider.auth(authContext);\n        }\n        catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n                if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion, conn.description.type)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n                }\n            }\n            throw error;\n        }\n    }\n    // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n    // Once connection is established, command logging can log events (if enabled)\n    conn.established = true;\n    async function executeHandshake(handshakeDoc, handshakeOptions) {\n        try {\n            const handshakeResponse = await conn.command((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions);\n            return handshakeResponse;\n        }\n        catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n            }\n            throw error;\n        }\n    }\n}\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nasync function prepareHandshakeDocument(authContext) {\n    const options = authContext.options;\n    const compressors = options.compressors ? options.compressors : [];\n    const { serverApi } = authContext.connection;\n    const clientMetadata = await options.extendedMetadata;\n    const handshakeDoc = {\n        [serverApi?.version || options.loadBalanced === true ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n        helloOk: true,\n        client: clientMetadata,\n        compression: compressors\n    };\n    if (options.loadBalanced === true) {\n        handshakeDoc.loadBalanced = true;\n    }\n    const credentials = authContext.credentials;\n    if (credentials) {\n        if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n            handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n            const provider = authContext.options.authProviders.getOrCreateProvider(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, credentials.mechanismProperties);\n            if (!provider) {\n                // This auth mechanism is always present.\n                throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n            }\n            return await provider.prepare(handshakeDoc, authContext);\n        }\n        const provider = authContext.options.authProviders.getOrCreateProvider(credentials.mechanism, credentials.mechanismProperties);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n        }\n        return await provider.prepare(handshakeDoc, authContext);\n    }\n    return handshakeDoc;\n}\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = [\n    'allowPartialTrustChain',\n    'ALPNProtocols',\n    'ca',\n    'cert',\n    'checkServerIdentity',\n    'ciphers',\n    'crl',\n    'ecdhCurve',\n    'key',\n    'minDHSize',\n    'passphrase',\n    'pfx',\n    'rejectUnauthorized',\n    'secureContext',\n    'secureProtocol',\n    'servername',\n    'session'\n];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = [\n    'autoSelectFamily',\n    'autoSelectFamilyAttemptTimeout',\n    'keepAliveInitialDelay',\n    'family',\n    'hints',\n    'localAddress',\n    'localPort',\n    'lookup'\n];\nfunction parseConnectOptions(options) {\n    const hostAddress = options.hostAddress;\n    if (!hostAddress)\n        throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n    const result = {};\n    for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    result.keepAliveInitialDelay ??= 120000;\n    result.keepAlive = true;\n    result.noDelay = options.noDelay ?? true;\n    if (typeof hostAddress.socketPath === 'string') {\n        result.path = hostAddress.socketPath;\n        return result;\n    }\n    else if (typeof hostAddress.host === 'string') {\n        result.host = hostAddress.host;\n        result.port = hostAddress.port;\n        return result;\n    }\n    else {\n        // This should never happen since we set up HostAddresses\n        // But if we don't throw here the socket could hang until timeout\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n    }\n}\nfunction parseSslOptions(options) {\n    const result = parseConnectOptions(options);\n    // Merge in valid SSL options\n    for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (options.existingSocket) {\n        result.socket = options.existingSocket;\n    }\n    // Set default sni servername to be the same as host\n    if (result.servername == null && result.host && !net.isIP(result.host)) {\n        result.servername = result.host;\n    }\n    return result;\n}\nasync function makeSocket(options) {\n    const useTLS = options.tls ?? false;\n    const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n    const existingSocket = options.existingSocket;\n    let socket;\n    if (options.proxyHost != null) {\n        // Currently, only Socks5 is supported.\n        return await makeSocks5Connection({\n            ...options,\n            connectTimeoutMS // Should always be present for Socks5\n        });\n    }\n    if (useTLS) {\n        const tlsSocket = tls.connect(parseSslOptions(options));\n        if (typeof tlsSocket.disableRenegotiation === 'function') {\n            tlsSocket.disableRenegotiation();\n        }\n        socket = tlsSocket;\n    }\n    else if (existingSocket) {\n        // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n        // so we only need to handle the non-TLS case here (where existingSocket\n        // gives us all we need out of the box).\n        socket = existingSocket;\n    }\n    else {\n        socket = net.createConnection(parseConnectOptions(options));\n    }\n    socket.setTimeout(connectTimeoutMS);\n    let cancellationHandler = null;\n    const { promise: connectedSocket, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n    if (existingSocket) {\n        resolve(socket);\n    }\n    else {\n        const start = performance.now();\n        const connectEvent = useTLS ? 'secureConnect' : 'connect';\n        socket\n            .once(connectEvent, () => resolve(socket))\n            .once('error', cause => reject(new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), { cause })))\n            .once('timeout', () => {\n            reject(new error_1.MongoNetworkTimeoutError(`Socket '${connectEvent}' timed out after ${(performance.now() - start) | 0}ms (connectTimeoutMS: ${connectTimeoutMS})`));\n        })\n            .once('close', () => reject(new error_1.MongoNetworkError(`Socket closed after ${(performance.now() - start) | 0} during connection establishment`)));\n        if (options.cancellationToken != null) {\n            cancellationHandler = () => reject(new error_1.MongoNetworkError(`Socket connection establishment was cancelled after ${(performance.now() - start) | 0}`));\n            options.cancellationToken.once('cancel', cancellationHandler);\n        }\n    }\n    try {\n        socket = await connectedSocket;\n        return socket;\n    }\n    catch (error) {\n        socket.destroy();\n        throw error;\n    }\n    finally {\n        socket.setTimeout(0);\n        if (cancellationHandler != null) {\n            options.cancellationToken?.removeListener('cancel', cancellationHandler);\n        }\n    }\n}\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\nasync function makeSocks5Connection(options) {\n    const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080);\n    // First, connect to the proxy server itself:\n    const rawSocket = await makeSocket({\n        ...options,\n        hostAddress,\n        tls: false,\n        proxyHost: undefined\n    });\n    const destination = parseConnectOptions(options);\n    if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts');\n    }\n    socks ??= loadSocks();\n    let existingSocket;\n    try {\n        // Then, establish the Socks5 proxy connection:\n        const connection = await socks.SocksClient.createConnection({\n            existing_socket: rawSocket,\n            timeout: options.connectTimeoutMS,\n            command: 'connect',\n            destination: {\n                host: destination.host,\n                port: destination.port\n            },\n            proxy: {\n                // host and port are ignored because we pass existing_socket\n                host: 'iLoveJavaScript',\n                port: 0,\n                type: 5,\n                userId: options.proxyUsername || undefined,\n                password: options.proxyPassword || undefined\n            }\n        });\n        existingSocket = connection.socket;\n    }\n    catch (cause) {\n        throw new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), { cause });\n    }\n    // Finally, now treat the resulting duplex stream as the\n    // socket over which we send and receive wire protocol messages:\n    return await makeSocket({ ...options, existingSocket, proxyHost: undefined });\n}\n//# sourceMappingURL=connect.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoConnection = exports.SizedMessageTransform = exports.Connection = void 0;\nexports.hasSessionSupport = hasSessionSupport;\nconst stream_1 = require(\"stream\");\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst common_1 = require(\"../sdam/common\");\nconst sessions_1 = require(\"../sessions\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\nconst commands_1 = require(\"./commands\");\nconst stream_description_1 = require(\"./stream_description\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst on_data_1 = require(\"./wire_protocol/on_data\");\nconst responses_1 = require(\"./wire_protocol/responses\");\nconst shared_1 = require(\"./wire_protocol/shared\");\n/** @internal */\nfunction hasSessionSupport(conn) {\n    const description = conn.description;\n    return description.logicalSessionTimeoutMinutes != null;\n}\nfunction streamIdentifier(stream, options) {\n    if (options.proxyHost) {\n        // If proxy options are specified, the properties of `stream` itself\n        // will not accurately reflect what endpoint this is connected to.\n        return options.hostAddress.toString();\n    }\n    const { remoteAddress, remotePort } = stream;\n    if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n    }\n    return (0, utils_1.uuidV4)().toString('hex');\n}\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options) {\n        super();\n        this.lastHelloMS = -1;\n        this.helloOk = false;\n        this.delayedTimeoutId = null;\n        /** Indicates that the connection (including underlying TCP socket) has been closed. */\n        this.closed = false;\n        this.clusterTime = null;\n        this.error = null;\n        this.dataEvents = null;\n        this.on('error', utils_1.noop);\n        this.socket = stream;\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.mongoLogger = options.mongoLogger;\n        this.established = false;\n        this.description = new stream_description_1.StreamDescription(this.address, options);\n        this.generation = options.generation;\n        this.lastUseTime = (0, utils_1.now)();\n        this.messageStream = this.socket\n            .on('error', this.onSocketError.bind(this))\n            .pipe(new SizedMessageTransform({ connection: this }))\n            .on('error', this.onTransformError.bind(this));\n        this.socket.on('close', this.onClose.bind(this));\n        this.socket.on('timeout', this.onTimeout.bind(this));\n        this.messageStream.pause();\n    }\n    get hello() {\n        return this.description.hello;\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this.description.receiveResponse(response);\n        Object.freeze(this.description);\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this.lastUseTime);\n    }\n    get hasSessionSupport() {\n        return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    get supportsOpMsg() {\n        return (this.description != null &&\n            (0, utils_1.maxWireVersion)(this) >= 6 &&\n            !this.description.__nodejs_mock_server__);\n    }\n    get shouldEmitAndLogCommand() {\n        return ((this.monitorCommands ||\n            (this.established &&\n                !this.authContext?.reauthenticating &&\n                this.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.COMMAND, mongo_logger_1.SeverityLevel.DEBUG))) ??\n            false);\n    }\n    markAvailable() {\n        this.lastUseTime = (0, utils_1.now)();\n    }\n    onSocketError(cause) {\n        this.onError(new error_1.MongoNetworkError(cause.message, { cause }));\n    }\n    onTransformError(error) {\n        this.onError(error);\n    }\n    onError(error) {\n        this.cleanup(error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this.delayedTimeoutId = (0, timers_1.setTimeout)(() => {\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(new error_1.MongoNetworkTimeoutError(message, { beforeHandshake }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    destroy() {\n        if (this.closed) {\n            return;\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */\n    cleanup(error) {\n        if (this.closed) {\n            return;\n        }\n        this.socket.destroy();\n        this.error = error;\n        this.dataEvents?.throw(error).then(undefined, utils_1.squashError);\n        this.closed = true;\n        this.emit(Connection.CLOSE);\n    }\n    prepareCommand(db, command, options) {\n        let cmd = { ...command };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null)\n                cmd.apiStrict = strict;\n            if (deprecationErrors != null)\n                cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (this.hasSessionSupport && session) {\n            if (session.clusterTime &&\n                clusterTime &&\n                session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const sessionError = (0, sessions_1.applySession)(session, cmd, options);\n            if (sessionError)\n                throw sessionError;\n        }\n        else if (session?.explicit) {\n            throw new error_1.MongoCompatibilityError('Current topology does not support sessions');\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        // For standalone, drivers MUST NOT set $readPreference.\n        if (this.description.type !== common_1.ServerType.Standalone) {\n            if (!(0, shared_1.isSharded)(this) &&\n                !this.description.loadBalanced &&\n                this.supportsOpMsg &&\n                options.directConnection === true &&\n                readPreference?.mode === 'primary') {\n                // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n                // For all other types with a direct connection, if the read preference is 'primary'\n                // (driver sets 'primary' as default if no read preference is configured),\n                // the $readPreference MUST be set to 'primaryPreferred'\n                // to ensure that any server type can handle the request.\n                cmd.$readPreference = read_preference_1.ReadPreference.primaryPreferred.toJSON();\n            }\n            else if ((0, shared_1.isSharded)(this) && !this.supportsOpMsg && readPreference?.mode !== 'primary') {\n                // When sending a read operation via OP_QUERY and the $readPreference modifier,\n                // the query MUST be provided using the $query modifier.\n                cmd = {\n                    $query: cmd,\n                    $readPreference: readPreference.toJSON()\n                };\n            }\n            else if (readPreference?.mode !== 'primary') {\n                // For mode 'primary', drivers MUST NOT set $readPreference.\n                // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n                // drivers MUST set $readPreference\n                cmd.$readPreference = readPreference.toJSON();\n            }\n        }\n        const commandOptions = {\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk(),\n            ...options\n        };\n        options.timeoutContext?.addMaxTimeMSToCommand(cmd, options);\n        const message = this.supportsOpMsg\n            ? new commands_1.OpMsgRequest(db, cmd, commandOptions)\n            : new commands_1.OpQueryRequest(db, cmd, commandOptions);\n        return message;\n    }\n    async *sendWire(message, options, responseType) {\n        this.throwIfAborted();\n        const timeout = options.socketTimeoutMS ??\n            options?.timeoutContext?.getSocketTimeoutMS() ??\n            this.socketTimeoutMS;\n        this.socket.setTimeout(timeout);\n        try {\n            await this.writeCommand(message, {\n                agreedCompressor: this.description.compressor ?? 'none',\n                zlibCompressionLevel: this.description.zlibCompressionLevel,\n                timeoutContext: options.timeoutContext,\n                signal: options.signal\n            });\n            if (options.noResponse || message.moreToCome) {\n                yield responses_1.MongoDBResponse.empty;\n                return;\n            }\n            this.throwIfAborted();\n            if (options.timeoutContext?.csotEnabled() &&\n                options.timeoutContext.minRoundTripTime != null &&\n                options.timeoutContext.remainingTimeMS < options.timeoutContext.minRoundTripTime) {\n                throw new error_1.MongoOperationTimeoutError('Server roundtrip time is greater than the time remaining');\n            }\n            for await (const response of this.readMany(options)) {\n                this.socket.setTimeout(0);\n                const bson = response.parse();\n                const document = (responseType ?? responses_1.MongoDBResponse).make(bson);\n                yield document;\n                this.throwIfAborted();\n                this.socket.setTimeout(timeout);\n            }\n        }\n        finally {\n            this.socket.setTimeout(0);\n        }\n    }\n    async *sendCommand(ns, command, options, responseType) {\n        options?.signal?.throwIfAborted();\n        const message = this.prepareCommand(ns.db, command, options);\n        let started = 0;\n        if (this.shouldEmitAndLogCommand) {\n            started = (0, utils_1.now)();\n            this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_STARTED, message.databaseName, this.established, new command_monitoring_events_1.CommandStartedEvent(this, message, this.description.serverConnectionId));\n        }\n        // If `documentsReturnedIn` not set or raw is not enabled, use input bson options\n        // Otherwise, support raw flag. Raw only works for cursors that hardcode firstBatch/nextBatch fields\n        const bsonOptions = options.documentsReturnedIn == null || !options.raw\n            ? options\n            : {\n                ...options,\n                raw: false,\n                fieldsAsRaw: { [options.documentsReturnedIn]: true }\n            };\n        /** MongoDBResponse instance or subclass */\n        let document = undefined;\n        /** Cached result of a toObject call */\n        let object = undefined;\n        try {\n            this.throwIfAborted();\n            for await (document of this.sendWire(message, options, responseType)) {\n                object = undefined;\n                if (options.session != null) {\n                    (0, sessions_1.updateSessionFromResponse)(options.session, document);\n                }\n                if (document.$clusterTime) {\n                    this.clusterTime = document.$clusterTime;\n                    this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n                }\n                if (document.ok === 0) {\n                    if (options.timeoutContext?.csotEnabled() && document.isMaxTimeExpiredError) {\n                        throw new error_1.MongoOperationTimeoutError('Server reported a timeout error', {\n                            cause: new error_1.MongoServerError((object ??= document.toObject(bsonOptions)))\n                        });\n                    }\n                    throw new error_1.MongoServerError((object ??= document.toObject(bsonOptions)));\n                }\n                if (this.shouldEmitAndLogCommand) {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse\n                        ? undefined\n                        : message.moreToCome\n                            ? { ok: 1 }\n                            : (object ??= document.toObject(bsonOptions)), started, this.description.serverConnectionId));\n                }\n                if (responseType == null) {\n                    yield (object ??= document.toObject(bsonOptions));\n                }\n                else {\n                    yield document;\n                }\n                this.throwIfAborted();\n            }\n        }\n        catch (error) {\n            if (this.shouldEmitAndLogCommand) {\n                this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_FAILED, message.databaseName, this.established, new command_monitoring_events_1.CommandFailedEvent(this, message, error, started, this.description.serverConnectionId));\n            }\n            throw error;\n        }\n    }\n    async command(ns, command, options = {}, responseType) {\n        this.throwIfAborted();\n        options.signal?.throwIfAborted();\n        for await (const document of this.sendCommand(ns, command, options, responseType)) {\n            if (options.timeoutContext?.csotEnabled()) {\n                if (responses_1.MongoDBResponse.is(document)) {\n                    if (document.isMaxTimeExpiredError) {\n                        throw new error_1.MongoOperationTimeoutError('Server reported a timeout error', {\n                            cause: new error_1.MongoServerError(document.toObject())\n                        });\n                    }\n                }\n                else {\n                    if ((Array.isArray(document?.writeErrors) &&\n                        document.writeErrors.some(error => error?.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired)) ||\n                        document?.writeConcernError?.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired) {\n                        throw new error_1.MongoOperationTimeoutError('Server reported a timeout error', {\n                            cause: new error_1.MongoServerError(document)\n                        });\n                    }\n                }\n            }\n            return document;\n        }\n        throw new error_1.MongoUnexpectedServerResponseError('Unable to get response from server');\n    }\n    exhaustCommand(ns, command, options, replyListener) {\n        const exhaustLoop = async () => {\n            this.throwIfAborted();\n            for await (const reply of this.sendCommand(ns, command, options)) {\n                replyListener(undefined, reply);\n                this.throwIfAborted();\n            }\n            throw new error_1.MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n        };\n        exhaustLoop().then(undefined, replyListener);\n    }\n    throwIfAborted() {\n        if (this.error)\n            throw this.error;\n    }\n    /**\n     * @internal\n     *\n     * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n     * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n     */\n    async writeCommand(command, options) {\n        const finalCommand = options.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n            ? command\n            : new commands_1.OpCompressedRequest(command, {\n                agreedCompressor: options.agreedCompressor ?? 'none',\n                zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n            });\n        const buffer = Buffer.concat(await finalCommand.toBin());\n        if (options.timeoutContext?.csotEnabled()) {\n            if (options.timeoutContext.minRoundTripTime != null &&\n                options.timeoutContext.remainingTimeMS < options.timeoutContext.minRoundTripTime) {\n                throw new error_1.MongoOperationTimeoutError('Server roundtrip time is greater than the time remaining');\n            }\n        }\n        if (this.socket.write(buffer))\n            return;\n        const drainEvent = (0, utils_1.once)(this.socket, 'drain', options);\n        const timeout = options?.timeoutContext?.timeoutForSocketWrite;\n        const drained = timeout ? Promise.race([drainEvent, timeout]) : drainEvent;\n        try {\n            return await drained;\n        }\n        catch (writeError) {\n            if (timeout_1.TimeoutError.is(writeError)) {\n                const timeoutError = new error_1.MongoOperationTimeoutError('Timed out at socket write');\n                this.onError(timeoutError);\n                throw timeoutError;\n            }\n            else if (writeError === options.signal?.reason) {\n                this.onError(writeError);\n            }\n            throw writeError;\n        }\n        finally {\n            timeout?.clear();\n        }\n    }\n    /**\n     * @internal\n     *\n     * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n     * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n     * by calling `return` on the generator.\n     *\n     * Note that `for-await` loops call `return` automatically when the loop is exited.\n     */\n    async *readMany(options) {\n        try {\n            this.dataEvents = (0, on_data_1.onData)(this.messageStream, options);\n            this.messageStream.resume();\n            for await (const message of this.dataEvents) {\n                const response = await (0, compression_1.decompressResponse)(message);\n                yield response;\n                if (!response.moreToCome) {\n                    return;\n                }\n            }\n        }\n        catch (readError) {\n            if (timeout_1.TimeoutError.is(readError)) {\n                const timeoutError = new error_1.MongoOperationTimeoutError(`Timed out during socket read (${readError.duration}ms)`);\n                this.dataEvents = null;\n                this.onError(timeoutError);\n                throw timeoutError;\n            }\n            else if (readError === options.signal?.reason) {\n                this.onError(readError);\n            }\n            throw readError;\n        }\n        finally {\n            this.dataEvents = null;\n            this.messageStream.pause();\n        }\n    }\n}\nexports.Connection = Connection;\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\n/** @internal */\nclass SizedMessageTransform extends stream_1.Transform {\n    constructor({ connection }) {\n        super({ writableObjectMode: false, readableObjectMode: true });\n        this.bufferPool = new utils_1.BufferPool();\n        this.connection = connection;\n    }\n    _transform(chunk, encoding, callback) {\n        if (this.connection.delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(this.connection.delayedTimeoutId);\n            this.connection.delayedTimeoutId = null;\n        }\n        this.bufferPool.append(chunk);\n        while (this.bufferPool.length) {\n            // While there are any bytes in the buffer\n            // Try to fetch a size from the top 4 bytes\n            const sizeOfMessage = this.bufferPool.getInt32();\n            if (sizeOfMessage == null) {\n                // Not even an int32 worth of data. Stop the loop, we need more chunks.\n                break;\n            }\n            if (sizeOfMessage < 0) {\n                // The size in the message has a negative value, this is probably corruption, throw:\n                return callback(new error_1.MongoParseError(`Message size cannot be negative: ${sizeOfMessage}`));\n            }\n            if (sizeOfMessage > this.bufferPool.length) {\n                // We do not have enough bytes to make a sizeOfMessage chunk\n                break;\n            }\n            // Add a message to the stream\n            const message = this.bufferPool.read(sizeOfMessage);\n            if (!this.push(message)) {\n                // We only subscribe to data events so we should never get backpressure\n                // if we do, we do not have the handling for it.\n                return callback(new error_1.MongoRuntimeError(`SizedMessageTransform does not support backpressure`));\n            }\n        }\n        callback();\n    }\n}\nexports.SizedMessageTransform = SizedMessageTransform;\n/** @internal */\nclass CryptoConnection extends Connection {\n    constructor(stream, options) {\n        super(stream, options);\n        this.autoEncrypter = options.autoEncrypter;\n    }\n    async command(ns, cmd, options, responseType) {\n        const { autoEncrypter } = this;\n        if (!autoEncrypter) {\n            // TODO(NODE-6065): throw a MongoRuntimeError in Node V7\n            // @ts-expect-error No cause provided because there is no underlying error.\n            throw new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption', {\n                dependencyName: 'n/a'\n            });\n        }\n        const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n        if (serverWireVersion === 0) {\n            // This means the initial handshake hasn't happened yet\n            return await super.command(ns, cmd, options, responseType);\n        }\n        if (serverWireVersion < 8) {\n            throw new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2');\n        }\n        // Save sort or indexKeys based on the command being run\n        // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n        // and then deserializes the encrypted result, the protocol level components\n        // of the command (ex. sort) are then converted to JS objects potentially losing\n        // import key order information. These fields are never encrypted so we can save the values\n        // from before the encryption and replace them after encryption has been performed\n        const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n        const indexKeys = cmd.createIndexes\n            ? cmd.indexes.map((index) => index.key)\n            : null;\n        const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n        // Replace the saved values\n        if (sort != null && (cmd.find || cmd.findAndModify)) {\n            encrypted.sort = sort;\n        }\n        if (indexKeys != null && cmd.createIndexes) {\n            for (const [offset, index] of indexKeys.entries()) {\n                // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n                encrypted.indexes[offset].key = index;\n            }\n        }\n        const encryptedResponse = await super.command(ns, encrypted, options, \n        // Eventually we want to require `responseType` which means we would satisfy `T` as the return type.\n        // In the meantime, we want encryptedResponse to always be _at least_ a MongoDBResponse if not a more specific subclass\n        // So that we can ensure we have access to the on-demand APIs for decorate response\n        responseType ?? responses_1.MongoDBResponse);\n        const result = await autoEncrypter.decrypt(encryptedResponse.toBytes(), options);\n        const decryptedResponse = responseType?.make(result) ?? (0, bson_1.deserialize)(result, options);\n        if (autoEncrypter[constants_1.kDecorateResult]) {\n            if (responseType == null) {\n                (0, utils_1.decorateDecryptionResult)(decryptedResponse, encryptedResponse.toObject(), true);\n            }\n            else if (decryptedResponse instanceof responses_1.CursorResponse) {\n                decryptedResponse.encryptedResponse = encryptedResponse;\n            }\n        }\n        return decryptedResponse;\n    }\n}\nexports.CryptoConnection = CryptoConnection;\n//# sourceMappingURL=connection.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst connect_1 = require(\"./connect\");\nconst connection_1 = require(\"./connection\");\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\nconst errors_1 = require(\"./errors\");\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\nexports.PoolState = Object.freeze({\n    paused: 'paused',\n    ready: 'ready',\n    closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.options = Object.freeze({\n            connectionType: connection_1.Connection,\n            ...options,\n            maxPoolSize: options.maxPoolSize ?? 100,\n            minPoolSize: options.minPoolSize ?? 0,\n            maxConnecting: options.maxConnecting ?? 2,\n            maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n            waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n            minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n            autoEncrypter: options.autoEncrypter\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n        }\n        this.poolState = exports.PoolState.paused;\n        this.server = server;\n        this.connections = new utils_1.List();\n        this.pending = 0;\n        this.checkedOut = new Set();\n        this.minPoolSizeTimer = undefined;\n        this.generation = 0;\n        this.serviceGenerations = new Map();\n        this.connectionCounter = (0, utils_1.makeCounter)(1);\n        this.cancellationToken = new mongo_types_1.CancellationToken();\n        this.cancellationToken.setMaxListeners(Infinity);\n        this.waitQueue = new utils_1.List();\n        this.metrics = new metrics_1.ConnectionPoolMetrics();\n        this.processingWaitQueue = false;\n        this.mongoLogger = this.server.topology.client?.mongoLogger;\n        this.component = 'connection';\n        process.nextTick(() => {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n        });\n    }\n    /** The address of the endpoint the pool is connected to */\n    get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */\n    get closed() {\n        return this.poolState === exports.PoolState.closed;\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n    get totalConnectionCount() {\n        return (this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n    get availableConnectionCount() {\n        return this.connections.length;\n    }\n    get pendingConnectionCount() {\n        return this.pending;\n    }\n    get currentCheckedOutCount() {\n        return this.checkedOut.size;\n    }\n    get waitQueueSize() {\n        return this.waitQueue.length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serverError() {\n        return this.server.description.error;\n    }\n    /**\n     * This is exposed ONLY for use in mongosh, to enable\n     * killing all connections if a user quits the shell with\n     * operations in progress.\n     *\n     * This property may be removed as a part of NODE-3263.\n     */\n    get checkedOutConnections() {\n        return this.checkedOut;\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    waitQueueErrorMetrics() {\n        return this.metrics.info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */\n    ready() {\n        if (this.poolState !== exports.PoolState.paused) {\n            return;\n        }\n        this.poolState = exports.PoolState.ready;\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n        (0, timers_1.clearTimeout)(this.minPoolSizeTimer);\n        this.ensureMinPoolSize();\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n    async checkOut(options) {\n        const checkoutTime = (0, utils_1.now)();\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n        const timeout = options.timeoutContext.connectionCheckoutTimeout;\n        const waitQueueMember = {\n            resolve,\n            reject,\n            cancelled: false,\n            checkoutTime\n        };\n        const abortListener = (0, utils_1.addAbortListener)(options.signal, function () {\n            waitQueueMember.cancelled = true;\n            reject(this.reason);\n        });\n        this.waitQueue.push(waitQueueMember);\n        process.nextTick(() => this.processWaitQueue());\n        try {\n            timeout?.throwIfExpired();\n            return await (timeout ? Promise.race([promise, timeout]) : promise);\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                timeout?.clear();\n                waitQueueMember.cancelled = true;\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout', waitQueueMember.checkoutTime));\n                const timeoutError = new errors_1.WaitQueueTimeoutError(this.loadBalanced\n                    ? this.waitQueueErrorMetrics()\n                    : 'Timed out while checking out a connection from connection pool', this.address);\n                if (options.timeoutContext.csotEnabled()) {\n                    throw new error_1.MongoOperationTimeoutError('Timed out during connection checkout', {\n                        cause: timeoutError\n                    });\n                }\n                throw timeoutError;\n            }\n            throw error;\n        }\n        finally {\n            abortListener?.[utils_1.kDispose]();\n            timeout?.clear();\n        }\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n    checkIn(connection) {\n        if (!this.checkedOut.has(connection)) {\n            return;\n        }\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this.connections.unshift(connection);\n        }\n        this.checkedOut.delete(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n    clear(options = {}) {\n        if (this.closed) {\n            return;\n        }\n        // handle load balanced case\n        if (this.loadBalanced) {\n            const { serviceId } = options;\n            if (!serviceId) {\n                throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n            }\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n            }\n            else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, { serviceId }));\n            return;\n        }\n        // handle non load-balanced case\n        const interruptInUseConnections = options.interruptInUseConnections ?? false;\n        const oldGeneration = this.generation;\n        this.generation += 1;\n        const alreadyPaused = this.poolState === exports.PoolState.paused;\n        this.poolState = exports.PoolState.paused;\n        this.clearMinPoolSizeTimer();\n        if (!alreadyPaused) {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                interruptInUseConnections\n            }));\n        }\n        if (interruptInUseConnections) {\n            process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n        }\n        this.processWaitQueue();\n    }\n    /**\n     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n     *\n     * Only connections where `connection.generation <= minGeneration` are killed.\n     */\n    interruptInUseConnections(minGeneration) {\n        for (const connection of this.checkedOut) {\n            if (connection.generation <= minGeneration) {\n                connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n            }\n        }\n    }\n    /** For MongoClient.close() procedures */\n    closeCheckedOutConnections() {\n        for (const conn of this.checkedOut) {\n            conn.onError(new error_1.MongoClientClosedError());\n        }\n    }\n    /** Close the pool */\n    close() {\n        if (this.closed) {\n            return;\n        }\n        // immediately cancel any in-flight connections\n        this.cancellationToken.emit('cancel');\n        // end the connection counter\n        if (typeof this.connectionCounter.return === 'function') {\n            this.connectionCounter.return(undefined);\n        }\n        this.poolState = exports.PoolState.closed;\n        this.clearMinPoolSizeTimer();\n        this.processWaitQueue();\n        for (const conn of this.connections) {\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n            conn.destroy();\n        }\n        this.connections.clear();\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n    }\n    /**\n     * @internal\n     * Reauthenticate a connection\n     */\n    async reauthenticate(connection) {\n        const authContext = connection.authContext;\n        if (!authContext) {\n            throw new error_1.MongoRuntimeError('No auth context found on connection.');\n        }\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate');\n        }\n        const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n        const provider = this.server.topology.client.s.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);\n        if (!provider) {\n            throw new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`);\n        }\n        await provider.reauth(authContext);\n        return;\n    }\n    /** Clear the min pool size timer */\n    clearMinPoolSizeTimer() {\n        const minPoolSizeTimer = this.minPoolSizeTimer;\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n    }\n    destroyConnection(connection, reason) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        connection.destroy();\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this.generation;\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    /**\n     * Destroys a connection if the connection is perished.\n     *\n     * @returns `true` if the connection was destroyed, `false` otherwise.\n     */\n    destroyConnectionIfPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        // Note that metadata and extendedMetadata may have changed on the client but have\n        // been frozen here, so we pull the extendedMetadata promise always from the client\n        // no mattter what options were set at the construction of the pool.\n        const connectOptions = {\n            ...this.options,\n            id: this.connectionCounter.next().value,\n            generation: this.generation,\n            cancellationToken: this.cancellationToken,\n            mongoLogger: this.mongoLogger,\n            authProviders: this.server.topology.client.s.authProviders,\n            extendedMetadata: this.server.topology.client.options.extendedMetadata\n        };\n        this.pending++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        const connectionCreatedTime = (0, utils_1.now)();\n        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, { id: connectOptions.id }));\n        (0, connect_1.connect)(connectOptions).then(connection => {\n            // The pool might have closed since we started trying to create a connection\n            if (this.poolState !== exports.PoolState.ready) {\n                this.pending--;\n                connection.destroy();\n                callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n                connection.on(event, (e) => this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, pinType => this.metrics.markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, pinType => this.metrics.markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if ((generation = this.serviceGenerations.get(sid))) {\n                        connection.generation = generation;\n                    }\n                    else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection, connectionCreatedTime));\n            this.pending--;\n            callback(undefined, connection);\n        }, error => {\n            this.pending--;\n            this.server.handleError(error);\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, { id: connectOptions.id, serviceId: undefined }, 'error', \n            // TODO(NODE-5192): Remove this cast\n            error));\n            if (error instanceof error_1.MongoNetworkError || error instanceof error_1.MongoServerError) {\n                error.connectionGeneration = connectOptions.generation;\n            }\n            callback(error ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this.poolState !== exports.PoolState.ready) {\n            return;\n        }\n        this.connections.prune(connection => this.destroyConnectionIfPerished(connection));\n        if (this.totalConnectionCount < minPoolSize &&\n            this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection) => {\n                if (!err && connection) {\n                    this.connections.push(connection);\n                    process.nextTick(() => this.processWaitQueue());\n                }\n                if (this.poolState === exports.PoolState.ready) {\n                    (0, timers_1.clearTimeout)(this.minPoolSizeTimer);\n                    this.minPoolSizeTimer = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n                }\n            });\n        }\n        else {\n            (0, timers_1.clearTimeout)(this.minPoolSizeTimer);\n            this.minPoolSizeTimer = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n    }\n    processWaitQueue() {\n        if (this.processingWaitQueue) {\n            return;\n        }\n        this.processingWaitQueue = true;\n        while (this.waitQueueSize) {\n            const waitQueueMember = this.waitQueue.first();\n            if (!waitQueueMember) {\n                this.waitQueue.shift();\n                continue;\n            }\n            if (waitQueueMember.cancelled) {\n                this.waitQueue.shift();\n                continue;\n            }\n            if (this.poolState !== exports.PoolState.ready) {\n                const reason = this.closed ? 'poolClosed' : 'connectionError';\n                const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, waitQueueMember.checkoutTime, error));\n                this.waitQueue.shift();\n                waitQueueMember.reject(error);\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this.connections.shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.destroyConnectionIfPerished(connection)) {\n                this.checkedOut.add(connection);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n                this.waitQueue.shift();\n                waitQueueMember.resolve(connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while (this.waitQueueSize > 0 &&\n            this.pendingConnectionCount < maxConnecting &&\n            (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n            const waitQueueMember = this.waitQueue.shift();\n            if (!waitQueueMember || waitQueueMember.cancelled) {\n                continue;\n            }\n            this.createConnection((err, connection) => {\n                if (waitQueueMember.cancelled) {\n                    if (!err && connection) {\n                        this.connections.push(connection);\n                    }\n                }\n                else {\n                    if (err) {\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, \n                        // TODO(NODE-5192): Remove this cast\n                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', waitQueueMember.checkoutTime, err));\n                        waitQueueMember.reject(err);\n                    }\n                    else if (connection) {\n                        this.checkedOut.add(connection);\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n                        waitQueueMember.resolve(connection);\n                    }\n                }\n                process.nextTick(() => this.processWaitQueue());\n            });\n        }\n        this.processingWaitQueue = false;\n    }\n}\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\n//# sourceMappingURL=connection_pool.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        this.time = new Date();\n        this.address = pool.address;\n    }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CREATED;\n        const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } = pool.options;\n        this.options = { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS };\n    }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_READY;\n    }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLOSED;\n    }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CREATED;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, connectionCreatedEventTime) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_READY;\n        this.durationMS = (0, utils_1.now)() - connectionCreatedEventTime;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CLOSED;\n        this.connectionId = connection.id;\n        this.reason = reason;\n        this.serviceId = connection.serviceId;\n        this.error = error ?? null;\n    }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n    }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, reason, checkoutTime, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n        this.durationMS = (0, utils_1.now)() - checkoutTime;\n        this.reason = reason;\n        this.error = error;\n    }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, checkoutTime) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_OUT;\n        this.durationMS = (0, utils_1.now)() - checkoutTime;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_IN;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, options = {}) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLEARED;\n        this.serviceId = options.serviceId;\n        this.interruptInUseConnections = options.interruptInUseConnections;\n    }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;\n//# sourceMappingURL=connection_pool_events.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = require(\"../error\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super('Attempted to check out a connection from closed connection pool');\n        this.address = pool.address;\n    }\n    get name() {\n        return 'MongoPoolClosedError';\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nclass PoolClearedError extends error_1.MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool, message) {\n        const errorMessage = message\n            ? message\n            : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n        super(errorMessage, pool.serverError ? { cause: pool.serverError } : undefined);\n        this.address = pool.address;\n        this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);\n    }\n    get name() {\n        return 'MongoPoolClearedError';\n    }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nclass PoolClearedOnNetworkError extends PoolClearedError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n    }\n    get name() {\n        return 'PoolClearedOnNetworkError';\n    }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, address) {\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return 'MongoWaitQueueTimeoutError';\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;\n//# sourceMappingURL=errors.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LimitedSizeDocument = void 0;\nexports.makeClientMetadata = makeClientMetadata;\nexports.addContainerMetadata = addContainerMetadata;\nexports.getFAASEnv = getFAASEnv;\nconst os = require(\"os\");\nconst process = require(\"process\");\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst NODE_DRIVER_VERSION = require('../../../package.json').version;\n/** @internal */\nclass LimitedSizeDocument {\n    constructor(maxSize) {\n        this.document = new Map();\n        /** BSON overhead: Int32 + Null byte */\n        this.documentSize = 5;\n        this.maxSize = maxSize;\n    }\n    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n    ifItFitsItSits(key, value) {\n        // The BSON byteLength of the new element is the same as serializing it to its own document\n        // subtracting the document size int32 and the null terminator.\n        const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n        if (newElementSize + this.documentSize > this.maxSize) {\n            return false;\n        }\n        this.documentSize += newElementSize;\n        this.document.set(key, value);\n        return true;\n    }\n    toObject() {\n        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n            promoteLongs: false,\n            promoteBuffers: false,\n            promoteValues: false,\n            useBigInt64: false\n        });\n    }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n    const metadataDocument = new LimitedSizeDocument(512);\n    const { appName = '' } = options;\n    // Add app name first, it must be sent\n    if (appName.length > 0) {\n        const name = Buffer.byteLength(appName, 'utf8') <= 128\n            ? options.appName\n            : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n        metadataDocument.ifItFitsItSits('application', { name });\n    }\n    const { name = '', version = '', platform = '' } = options.driverInfo;\n    const driverInfo = {\n        name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n        version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n    };\n    if (options.additionalDriverInfo == null) {\n        throw new error_1.MongoRuntimeError('Client options `additionalDriverInfo` must always default to an empty array');\n    }\n    // This is where we handle additional driver info added after client construction.\n    for (const { name: n = '', version: v = '' } of options.additionalDriverInfo) {\n        if (n.length > 0) {\n            driverInfo.name = `${driverInfo.name}|${n}`;\n        }\n        if (v.length > 0) {\n            driverInfo.version = `${driverInfo.version}|${v}`;\n        }\n    }\n    if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n    }\n    let runtimeInfo = getRuntimeInfo();\n    if (platform.length > 0) {\n        runtimeInfo = `${runtimeInfo}|${platform}`;\n    }\n    for (const { platform: p = '' } of options.additionalDriverInfo) {\n        if (p.length > 0) {\n            runtimeInfo = `${runtimeInfo}|${p}`;\n        }\n    }\n    if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n    }\n    // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n    const osInfo = new Map()\n        .set('name', process.platform)\n        .set('architecture', process.arch)\n        .set('version', os.release())\n        .set('type', os.type());\n    if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n        for (const key of osInfo.keys()) {\n            osInfo.delete(key);\n            if (osInfo.size === 0)\n                break;\n            if (metadataDocument.ifItFitsItSits('os', osInfo))\n                break;\n        }\n    }\n    const faasEnv = getFAASEnv();\n    if (faasEnv != null) {\n        if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n            for (const key of faasEnv.keys()) {\n                faasEnv.delete(key);\n                if (faasEnv.size === 0)\n                    break;\n                if (metadataDocument.ifItFitsItSits('env', faasEnv))\n                    break;\n            }\n        }\n    }\n    return metadataDocument.toObject();\n}\nlet dockerPromise;\n/** @internal */\nasync function getContainerMetadata() {\n    const containerMetadata = {};\n    dockerPromise ??= (0, utils_1.fileIsAccessible)('/.dockerenv');\n    const isDocker = await dockerPromise;\n    const { KUBERNETES_SERVICE_HOST = '' } = process.env;\n    const isKubernetes = KUBERNETES_SERVICE_HOST.length > 0 ? true : false;\n    if (isDocker)\n        containerMetadata.runtime = 'docker';\n    if (isKubernetes)\n        containerMetadata.orchestrator = 'kubernetes';\n    return containerMetadata;\n}\n/**\n * @internal\n * Re-add each metadata value.\n * Attempt to add new env container metadata, but keep old data if it does not fit.\n */\nasync function addContainerMetadata(originalMetadata) {\n    const containerMetadata = await getContainerMetadata();\n    if (Object.keys(containerMetadata).length === 0)\n        return originalMetadata;\n    const extendedMetadata = new LimitedSizeDocument(512);\n    const extendedEnvMetadata = { ...originalMetadata?.env, container: containerMetadata };\n    for (const [key, val] of Object.entries(originalMetadata)) {\n        if (key !== 'env') {\n            extendedMetadata.ifItFitsItSits(key, val);\n        }\n        else {\n            if (!extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata)) {\n                // add in old data if newer / extended metadata does not fit\n                extendedMetadata.ifItFitsItSits('env', val);\n            }\n        }\n    }\n    if (!('env' in originalMetadata)) {\n        extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata);\n    }\n    return extendedMetadata.toObject();\n}\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n    const { AWS_EXECUTION_ENV = '', AWS_LAMBDA_RUNTIME_API = '', FUNCTIONS_WORKER_RUNTIME = '', K_SERVICE = '', FUNCTION_NAME = '', VERCEL = '', AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '', AWS_REGION = '', FUNCTION_MEMORY_MB = '', FUNCTION_REGION = '', FUNCTION_TIMEOUT_SEC = '', VERCEL_REGION = '' } = process.env;\n    const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n    const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n    const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n    const isVercelFaaS = VERCEL.length > 0;\n    // Note: order matters, name must always be the last key\n    const faasEnv = new Map();\n    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n        if (VERCEL_REGION.length > 0) {\n            faasEnv.set('region', VERCEL_REGION);\n        }\n        faasEnv.set('name', 'vercel');\n        return faasEnv;\n    }\n    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n        if (AWS_REGION.length > 0) {\n            faasEnv.set('region', AWS_REGION);\n        }\n        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n            Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n        }\n        faasEnv.set('name', 'aws.lambda');\n        return faasEnv;\n    }\n    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n        faasEnv.set('name', 'azure.func');\n        return faasEnv;\n    }\n    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n        if (FUNCTION_REGION.length > 0) {\n            faasEnv.set('region', FUNCTION_REGION);\n        }\n        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n        }\n        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n            faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n        }\n        faasEnv.set('name', 'gcp.func');\n        return faasEnv;\n    }\n    return null;\n}\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n    if ('Deno' in globalThis) {\n        const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n        return `Deno v${version}, ${os.endianness()}`;\n    }\n    if ('Bun' in globalThis) {\n        const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n        return `Bun v${version}, ${os.endianness()}`;\n    }\n    return `Node.js ${process.version}, ${os.endianness()}`;\n}\n//# sourceMappingURL=client_metadata.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */\nclass ConnectionPoolMetrics {\n    constructor() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n    /**\n     * Mark a connection as pinned for a specific operation.\n     */\n    markPinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections += 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections += 1;\n        }\n        else {\n            this.otherConnections += 1;\n        }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */\n    markUnpinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections -= 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections -= 1;\n        }\n        else {\n            this.otherConnections -= 1;\n        }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */\n    info(maxPoolSize) {\n        return ('Timed out while checking out a connection from connection pool: ' +\n            `maxPoolSize: ${maxPoolSize}, ` +\n            `connections in use by cursors: ${this.cursorConnections}, ` +\n            `connections in use by transactions: ${this.txnConnections}, ` +\n            `connections in use by other operations: ${this.otherConnections}`);\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */\n    reset() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n}\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics;\nConnectionPoolMetrics.TXN = 'txn';\nConnectionPoolMetrics.CURSOR = 'cursor';\nConnectionPoolMetrics.OTHER = 'other';\n//# sourceMappingURL=metrics.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamDescription = void 0;\nconst bson_1 = require(\"../bson\");\nconst common_1 = require(\"../sdam/common\");\nconst server_description_1 = require(\"../sdam/server_description\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.hello = null;\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n        this.serverConnectionId = null;\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.hello = response;\n        this.type = (0, server_description_1.parseServerType)(response);\n        if ('connectionId' in response) {\n            this.serverConnectionId = this.parseServerConnectionID(response.connectionId);\n        }\n        else {\n            this.serverConnectionId = null;\n        }\n        for (const field of RESPONSE_FIELDS) {\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n        }\n    }\n    /* @internal */\n    parseServerConnectionID(serverConnectionId) {\n        // Connection ids are always integral, so it's safe to coerce doubles as well as\n        // any integral type.\n        return bson_1.Long.isLong(serverConnectionId)\n            ? serverConnectionId.toBigInt()\n            : // @ts-expect-error: Doubles are coercible to number\n                BigInt(serverConnectionId);\n    }\n}\nexports.StreamDescription = StreamDescription;\n//# sourceMappingURL=stream_description.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uncompressibleCommands = exports.Compressor = void 0;\nexports.compress = compress;\nexports.decompress = decompress;\nexports.compressCommand = compressCommand;\nexports.decompressResponse = decompressResponse;\nconst util_1 = require(\"util\");\nconst zlib = require(\"zlib\");\nconst constants_1 = require(\"../../constants\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst commands_1 = require(\"../commands\");\nconst constants_2 = require(\"./constants\");\n/** @public */\nexports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'authenticate',\n    'createUser',\n    'updateUser',\n    'copydbSaslStart',\n    'copydbgetnonce',\n    'copydb'\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n    if (Snappy == null) {\n        const snappyImport = (0, deps_1.getSnappy)();\n        if ('kModuleError' in snappyImport) {\n            throw snappyImport.kModuleError;\n        }\n        Snappy = snappyImport;\n    }\n    return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch (options.agreedCompressor) {\n        case 'snappy': {\n            Snappy ??= loadSnappy();\n            return await Snappy.compress(dataToBeCompressed);\n        }\n        case 'zstd': {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return await zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n        }\n        case 'zlib': {\n            if (options.zlibCompressionLevel) {\n                zlibOptions.level = options.zlibCompressionLevel;\n            }\n            return await zlibDeflate(dataToBeCompressed, zlibOptions);\n        }\n        default: {\n            throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n        }\n    }\n}\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy &&\n        compressorID !== exports.Compressor.zstd &&\n        compressorID !== exports.Compressor.zlib &&\n        compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch (compressorID) {\n        case exports.Compressor.snappy: {\n            Snappy ??= loadSnappy();\n            return await Snappy.uncompress(compressedData, { asBuffer: true });\n        }\n        case exports.Compressor.zstd: {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return await zstd.decompress(compressedData);\n        }\n        case exports.Compressor.zlib: {\n            return await zlibInflate(compressedData);\n        }\n        default: {\n            return compressedData;\n        }\n    }\n}\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n    if (!zstd) {\n        zstd = (0, deps_1.getZstdLibrary)();\n    }\n}\nconst MESSAGE_HEADER_SIZE = 16;\n/**\n * @internal\n *\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\n * also serializes the command to BSON.\n */\nasync function compressCommand(command, description) {\n    const finalCommand = description.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n        ? command\n        : new commands_1.OpCompressedRequest(command, {\n            agreedCompressor: description.agreedCompressor ?? 'none',\n            zlibCompressionLevel: description.zlibCompressionLevel ?? 0\n        });\n    const data = await finalCommand.toBin();\n    return Buffer.concat(data);\n}\n/**\n * @internal\n *\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\n *\n * This method does not parse the response's BSON.\n */\nasync function decompressResponse(message) {\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {\n        const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpReply;\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        return new ResponseType(message, messageHeader, messageBody);\n    }\n    const header = {\n        ...messageHeader,\n        fromCompressed: true,\n        opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\n        length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\n    };\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpReply;\n    const messageBody = await decompress(compressorID, compressedBuffer);\n    if (messageBody.length !== header.length) {\n        throw new error_1.MongoDecompressionError('Message body and message header must be the same length');\n    }\n    return new ResponseType(message, header, messageBody);\n}\n//# sourceMappingURL=compression.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OP_MSG = exports.OP_COMPRESSED = exports.OP_DELETE = exports.OP_QUERY = exports.OP_INSERT = exports.OP_UPDATE = exports.OP_REPLY = exports.MIN_SUPPORTED_QE_SERVER_VERSION = exports.MIN_SUPPORTED_QE_WIRE_VERSION = exports.MAX_SUPPORTED_WIRE_VERSION = exports.MIN_SUPPORTED_WIRE_VERSION = exports.MAX_SUPPORTED_SERVER_VERSION = exports.MIN_SUPPORTED_SERVER_VERSION = void 0;\nexports.MIN_SUPPORTED_SERVER_VERSION = '4.2';\nexports.MAX_SUPPORTED_SERVER_VERSION = '8.0';\nexports.MIN_SUPPORTED_WIRE_VERSION = 8;\nexports.MAX_SUPPORTED_WIRE_VERSION = 25;\nexports.MIN_SUPPORTED_QE_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_SERVER_VERSION = '7.0';\nexports.OP_REPLY = 1;\nexports.OP_UPDATE = 2001;\nexports.OP_INSERT = 2002;\nexports.OP_QUERY = 2004;\nexports.OP_DELETE = 2006;\nexports.OP_COMPRESSED = 2012;\nexports.OP_MSG = 2013;\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.onData = onData;\nconst utils_1 = require(\"../../utils\");\n/**\n * onData is adapted from Node.js' events.on helper\n * https://nodejs.org/api/events.html#eventsonemitter-eventname-options\n *\n * Returns an AsyncIterator that iterates each 'data' event emitted from emitter.\n * It will reject upon an error event.\n */\nfunction onData(emitter, { timeoutContext, signal }) {\n    signal?.throwIfAborted();\n    // Setup pending events and pending promise lists\n    /**\n     * When the caller has not yet called .next(), we store the\n     * value from the event in this list. Next time they call .next()\n     * we pull the first value out of this list and resolve a promise with it.\n     */\n    const unconsumedEvents = new utils_1.List();\n    /**\n     * When there has not yet been an event, a new promise will be created\n     * and implicitly stored in this list. When an event occurs we take the first\n     * promise in this list and resolve it.\n     */\n    const unconsumedPromises = new utils_1.List();\n    /**\n     * Stored an error created by an error event.\n     * This error will turn into a rejection for the subsequent .next() call\n     */\n    let error = null;\n    /** Set to true only after event listeners have been removed. */\n    let finished = false;\n    const iterator = {\n        next() {\n            // First, we consume all unread events\n            const value = unconsumedEvents.shift();\n            if (value != null) {\n                return Promise.resolve({ value, done: false });\n            }\n            // Then we error, if an error happened\n            // This happens one time if at all, because after 'error'\n            // we stop listening\n            if (error != null) {\n                const p = Promise.reject(error);\n                // Only the first element errors\n                error = null;\n                return p;\n            }\n            // If the iterator is finished, resolve to done\n            if (finished)\n                return closeHandler();\n            // Wait until an event happens\n            const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n            unconsumedPromises.push({ resolve, reject });\n            return promise;\n        },\n        return() {\n            return closeHandler();\n        },\n        throw(err) {\n            errorHandler(err);\n            return Promise.resolve({ value: undefined, done: true });\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        // Note this should currently not be used, but is required by the AsyncGenerator interface.\n        async [Symbol.asyncDispose]() {\n            await closeHandler();\n        }\n    };\n    // Adding event handlers\n    emitter.on('data', eventHandler);\n    emitter.on('error', errorHandler);\n    const abortListener = (0, utils_1.addAbortListener)(signal, function () {\n        errorHandler(this.reason);\n    });\n    const timeoutForSocketRead = timeoutContext?.timeoutForSocketRead;\n    timeoutForSocketRead?.throwIfExpired();\n    timeoutForSocketRead?.then(undefined, errorHandler);\n    return iterator;\n    function eventHandler(value) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.resolve({ value, done: false });\n        else\n            unconsumedEvents.push(value);\n    }\n    function errorHandler(err) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.reject(err);\n        else\n            error = err;\n        void closeHandler();\n    }\n    function closeHandler() {\n        // Adding event handlers\n        emitter.off('data', eventHandler);\n        emitter.off('error', errorHandler);\n        abortListener?.[utils_1.kDispose]();\n        finished = true;\n        timeoutForSocketRead?.clear();\n        const doneResult = { value: undefined, done: finished };\n        for (const promise of unconsumedPromises) {\n            promise.resolve(doneResult);\n        }\n        return Promise.resolve(doneResult);\n    }\n}\n//# sourceMappingURL=on_data.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OnDemandDocument = void 0;\nconst bson_1 = require(\"../../../bson\");\nconst BSONElementOffset = {\n    type: 0,\n    nameOffset: 1,\n    nameLength: 2,\n    offset: 3,\n    length: 4\n};\n/** @internal */\nclass OnDemandDocument {\n    constructor(bson, offset = 0, isArray = false, \n    /** If elements was already calculated */\n    elements) {\n        /**\n         * Maps JS strings to elements and jsValues for speeding up subsequent lookups.\n         * - If `false` then name does not exist in the BSON document\n         * - If `CachedBSONElement` instance name exists\n         * - If `cache[name].value == null` jsValue has not yet been parsed\n         *   - Null/Undefined values do not get cached because they are zero-length values.\n         */\n        this.cache = Object.create(null);\n        /** Caches the index of elements that have been named */\n        this.indexFound = Object.create(null);\n        this.bson = bson;\n        this.offset = offset;\n        this.isArray = isArray;\n        this.elements = elements ?? (0, bson_1.parseToElementsToArray)(this.bson, offset);\n    }\n    /** Only supports basic latin strings */\n    isElementName(name, element) {\n        const nameLength = element[BSONElementOffset.nameLength];\n        const nameOffset = element[BSONElementOffset.nameOffset];\n        if (name.length !== nameLength)\n            return false;\n        const nameEnd = nameOffset + nameLength;\n        for (let byteIndex = nameOffset, charIndex = 0; charIndex < name.length && byteIndex < nameEnd; charIndex++, byteIndex++) {\n            if (this.bson[byteIndex] !== name.charCodeAt(charIndex))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * Seeks into the elements array for an element matching the given name.\n     *\n     * @remarks\n     * Caching:\n     * - Caches the existence of a property making subsequent look ups for non-existent properties return immediately\n     * - Caches names mapped to elements to avoid reiterating the array and comparing the name again\n     * - Caches the index at which an element has been found to prevent rechecking against elements already determined to belong to another name\n     *\n     * @param name - a basic latin string name of a BSON element\n     * @returns\n     */\n    getElement(name) {\n        const cachedElement = this.cache[name];\n        if (cachedElement === false)\n            return null;\n        if (cachedElement != null) {\n            return cachedElement;\n        }\n        if (typeof name === 'number') {\n            if (this.isArray) {\n                if (name < this.elements.length) {\n                    const element = this.elements[name];\n                    const cachedElement = { element, value: undefined };\n                    this.cache[name] = cachedElement;\n                    this.indexFound[name] = true;\n                    return cachedElement;\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        for (let index = 0; index < this.elements.length; index++) {\n            const element = this.elements[index];\n            // skip this element if it has already been associated with a name\n            if (!(index in this.indexFound) && this.isElementName(name, element)) {\n                const cachedElement = { element, value: undefined };\n                this.cache[name] = cachedElement;\n                this.indexFound[index] = true;\n                return cachedElement;\n            }\n        }\n        this.cache[name] = false;\n        return null;\n    }\n    toJSValue(element, as) {\n        const type = element[BSONElementOffset.type];\n        const offset = element[BSONElementOffset.offset];\n        const length = element[BSONElementOffset.length];\n        if (as !== type) {\n            return null;\n        }\n        switch (as) {\n            case bson_1.BSONType.null:\n            case bson_1.BSONType.undefined:\n                return null;\n            case bson_1.BSONType.double:\n                return (0, bson_1.getFloat64LE)(this.bson, offset);\n            case bson_1.BSONType.int:\n                return (0, bson_1.getInt32LE)(this.bson, offset);\n            case bson_1.BSONType.long:\n                return (0, bson_1.getBigInt64LE)(this.bson, offset);\n            case bson_1.BSONType.bool:\n                return Boolean(this.bson[offset]);\n            case bson_1.BSONType.objectId:\n                return new bson_1.ObjectId(this.bson.subarray(offset, offset + 12));\n            case bson_1.BSONType.timestamp:\n                return new bson_1.Timestamp((0, bson_1.getBigInt64LE)(this.bson, offset));\n            case bson_1.BSONType.string:\n                return (0, bson_1.toUTF8)(this.bson, offset + 4, offset + length - 1, false);\n            case bson_1.BSONType.binData: {\n                const totalBinarySize = (0, bson_1.getInt32LE)(this.bson, offset);\n                const subType = this.bson[offset + 4];\n                if (subType === 2) {\n                    const subType2BinarySize = (0, bson_1.getInt32LE)(this.bson, offset + 1 + 4);\n                    if (subType2BinarySize < 0)\n                        throw new bson_1.BSONError('Negative binary type element size found for subtype 0x02');\n                    if (subType2BinarySize > totalBinarySize - 4)\n                        throw new bson_1.BSONError('Binary type with subtype 0x02 contains too long binary size');\n                    if (subType2BinarySize < totalBinarySize - 4)\n                        throw new bson_1.BSONError('Binary type with subtype 0x02 contains too short binary size');\n                    return new bson_1.Binary(this.bson.subarray(offset + 1 + 4 + 4, offset + 1 + 4 + 4 + subType2BinarySize), 2);\n                }\n                return new bson_1.Binary(this.bson.subarray(offset + 1 + 4, offset + 1 + 4 + totalBinarySize), subType);\n            }\n            case bson_1.BSONType.date:\n                // Pretend this is correct.\n                return new Date(Number((0, bson_1.getBigInt64LE)(this.bson, offset)));\n            case bson_1.BSONType.object:\n                return new OnDemandDocument(this.bson, offset);\n            case bson_1.BSONType.array:\n                return new OnDemandDocument(this.bson, offset, true);\n            default:\n                throw new bson_1.BSONError(`Unsupported BSON type: ${as}`);\n        }\n    }\n    /**\n     * Returns the number of elements in this BSON document\n     */\n    size() {\n        return this.elements.length;\n    }\n    /**\n     * Checks for the existence of an element by name.\n     *\n     * @remarks\n     * Uses `getElement` with the expectation that will populate caches such that a `has` call\n     * followed by a `getElement` call will not repeat the cost paid by the first look up.\n     *\n     * @param name - element name\n     */\n    has(name) {\n        const cachedElement = this.cache[name];\n        if (cachedElement === false)\n            return false;\n        if (cachedElement != null)\n            return true;\n        return this.getElement(name) != null;\n    }\n    get(name, as, required) {\n        const element = this.getElement(name);\n        if (element == null) {\n            if (required === true) {\n                throw new bson_1.BSONError(`BSON element \"${name}\" is missing`);\n            }\n            else {\n                return null;\n            }\n        }\n        if (element.value == null) {\n            const value = this.toJSValue(element.element, as);\n            if (value == null) {\n                if (required === true) {\n                    throw new bson_1.BSONError(`BSON element \"${name}\" is missing`);\n                }\n                else {\n                    return null;\n                }\n            }\n            // It is important to never store null\n            element.value = value;\n        }\n        return element.value;\n    }\n    getNumber(name, required) {\n        const maybeBool = this.get(name, bson_1.BSONType.bool);\n        const bool = maybeBool == null ? null : maybeBool ? 1 : 0;\n        const maybeLong = this.get(name, bson_1.BSONType.long);\n        const long = maybeLong == null ? null : Number(maybeLong);\n        const result = bool ?? long ?? this.get(name, bson_1.BSONType.int) ?? this.get(name, bson_1.BSONType.double);\n        if (required === true && result == null) {\n            throw new bson_1.BSONError(`BSON element \"${name}\" is missing`);\n        }\n        return result;\n    }\n    /**\n     * Deserialize this object, DOES NOT cache result so avoid multiple invocations\n     * @param options - BSON deserialization options\n     */\n    toObject(options) {\n        return (0, bson_1.deserialize)(this.bson, {\n            ...options,\n            index: this.offset,\n            allowObjectSmallerThanBufferSize: true\n        });\n    }\n    /** Returns this document's bytes only */\n    toBytes() {\n        const size = (0, bson_1.getInt32LE)(this.bson, this.offset);\n        return this.bson.subarray(this.offset, this.offset + size);\n    }\n}\nexports.OnDemandDocument = OnDemandDocument;\n//# sourceMappingURL=document.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientBulkWriteCursorResponse = exports.ExplainedCursorResponse = exports.CursorResponse = exports.MongoDBResponse = void 0;\nexports.isErrorResponse = isErrorResponse;\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst document_1 = require(\"./on_demand/document\");\nconst BSONElementOffset = {\n    type: 0,\n    nameOffset: 1,\n    nameLength: 2,\n    offset: 3,\n    length: 4\n};\n/**\n * Accepts a BSON payload and checks for na \"ok: 0\" element.\n * This utility is intended to prevent calling response class constructors\n * that expect the result to be a success and demand certain properties to exist.\n *\n * For example, a cursor response always expects a cursor embedded document.\n * In order to write the class such that the properties reflect that assertion (non-null)\n * we cannot invoke the subclass constructor if the BSON represents an error.\n *\n * @param bytes - BSON document returned from the server\n */\nfunction isErrorResponse(bson, elements) {\n    for (let eIdx = 0; eIdx < elements.length; eIdx++) {\n        const element = elements[eIdx];\n        if (element[BSONElementOffset.nameLength] === 2) {\n            const nameOffset = element[BSONElementOffset.nameOffset];\n            // 111 == \"o\", 107 == \"k\"\n            if (bson[nameOffset] === 111 && bson[nameOffset + 1] === 107) {\n                const valueOffset = element[BSONElementOffset.offset];\n                const valueLength = element[BSONElementOffset.length];\n                // If any byte in the length of the ok number (works for any type) is non zero,\n                // then it is considered \"ok: 1\"\n                for (let i = valueOffset; i < valueOffset + valueLength; i++) {\n                    if (bson[i] !== 0x00)\n                        return false;\n                }\n                return true;\n            }\n        }\n    }\n    return true;\n}\n/** @internal */\nclass MongoDBResponse extends document_1.OnDemandDocument {\n    get(name, as, required) {\n        try {\n            return super.get(name, as, required);\n        }\n        catch (cause) {\n            throw new error_1.MongoUnexpectedServerResponseError(cause.message, { cause });\n        }\n    }\n    static is(value) {\n        return value instanceof MongoDBResponse;\n    }\n    static make(bson) {\n        const elements = (0, bson_1.parseToElementsToArray)(bson, 0);\n        const isError = isErrorResponse(bson, elements);\n        return isError\n            ? new MongoDBResponse(bson, 0, false, elements)\n            : new this(bson, 0, false, elements);\n    }\n    /**\n     * Returns true iff:\n     * - ok is 0 and the top-level code === 50\n     * - ok is 1 and the writeErrors array contains a code === 50\n     * - ok is 1 and the writeConcern object contains a code === 50\n     */\n    get isMaxTimeExpiredError() {\n        // {ok: 0, code: 50 ... }\n        const isTopLevel = this.ok === 0 && this.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n        if (isTopLevel)\n            return true;\n        if (this.ok === 0)\n            return false;\n        // {ok: 1, writeConcernError: {code: 50 ... }}\n        const isWriteConcern = this.get('writeConcernError', bson_1.BSONType.object)?.getNumber('code') ===\n            error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n        if (isWriteConcern)\n            return true;\n        const writeErrors = this.get('writeErrors', bson_1.BSONType.array);\n        if (writeErrors?.size()) {\n            for (let i = 0; i < writeErrors.size(); i++) {\n                const isWriteError = writeErrors.get(i, bson_1.BSONType.object)?.getNumber('code') ===\n                    error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n                // {ok: 1, writeErrors: [{code: 50 ... }]}\n                if (isWriteError)\n                    return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Drivers can safely assume that the `recoveryToken` field is always a BSON document but drivers MUST NOT modify the\n     * contents of the document.\n     */\n    get recoveryToken() {\n        return (this.get('recoveryToken', bson_1.BSONType.object)?.toObject({\n            promoteValues: false,\n            promoteLongs: false,\n            promoteBuffers: false,\n            validation: { utf8: true }\n        }) ?? null);\n    }\n    /**\n     * The server creates a cursor in response to a snapshot find/aggregate command and reports atClusterTime within the cursor field in the response.\n     * For the distinct command the server adds a top-level atClusterTime field to the response.\n     * The atClusterTime field represents the timestamp of the read and is guaranteed to be majority committed.\n     */\n    get atClusterTime() {\n        return (this.get('cursor', bson_1.BSONType.object)?.get('atClusterTime', bson_1.BSONType.timestamp) ??\n            this.get('atClusterTime', bson_1.BSONType.timestamp));\n    }\n    get operationTime() {\n        return this.get('operationTime', bson_1.BSONType.timestamp);\n    }\n    /** Normalizes whatever BSON value is \"ok\" to a JS number 1 or 0. */\n    get ok() {\n        return this.getNumber('ok') ? 1 : 0;\n    }\n    get $err() {\n        return this.get('$err', bson_1.BSONType.string);\n    }\n    get errmsg() {\n        return this.get('errmsg', bson_1.BSONType.string);\n    }\n    get code() {\n        return this.getNumber('code');\n    }\n    get $clusterTime() {\n        if (!('clusterTime' in this)) {\n            const clusterTimeDoc = this.get('$clusterTime', bson_1.BSONType.object);\n            if (clusterTimeDoc == null) {\n                this.clusterTime = null;\n                return null;\n            }\n            const clusterTime = clusterTimeDoc.get('clusterTime', bson_1.BSONType.timestamp, true);\n            const signature = clusterTimeDoc.get('signature', bson_1.BSONType.object)?.toObject();\n            // @ts-expect-error: `signature` is incorrectly typed. It is public API.\n            this.clusterTime = { clusterTime, signature };\n        }\n        return this.clusterTime ?? null;\n    }\n    toObject(options) {\n        const exactBSONOptions = {\n            ...(0, bson_1.pluckBSONSerializeOptions)(options ?? {}),\n            validation: (0, bson_1.parseUtf8ValidationOption)(options)\n        };\n        return super.toObject(exactBSONOptions);\n    }\n}\nexports.MongoDBResponse = MongoDBResponse;\n// {ok:1}\nMongoDBResponse.empty = new MongoDBResponse(new Uint8Array([13, 0, 0, 0, 16, 111, 107, 0, 1, 0, 0, 0, 0]));\n/** @internal */\nclass CursorResponse extends MongoDBResponse {\n    constructor() {\n        super(...arguments);\n        this._batch = null;\n        this.iterated = 0;\n        this._encryptedBatch = null;\n    }\n    /**\n     * This supports a feature of the FindCursor.\n     * It is an optimization to avoid an extra getMore when the limit has been reached\n     */\n    static get emptyGetMore() {\n        return new CursorResponse((0, bson_1.serialize)({ ok: 1, cursor: { id: 0n, nextBatch: [] } }));\n    }\n    static is(value) {\n        return value instanceof CursorResponse || value === CursorResponse.emptyGetMore;\n    }\n    get cursor() {\n        return this.get('cursor', bson_1.BSONType.object, true);\n    }\n    get id() {\n        try {\n            return bson_1.Long.fromBigInt(this.cursor.get('id', bson_1.BSONType.long, true));\n        }\n        catch (cause) {\n            throw new error_1.MongoUnexpectedServerResponseError(cause.message, { cause });\n        }\n    }\n    get ns() {\n        const namespace = this.cursor.get('ns', bson_1.BSONType.string);\n        if (namespace != null)\n            return (0, utils_1.ns)(namespace);\n        return null;\n    }\n    get length() {\n        return Math.max(this.batchSize - this.iterated, 0);\n    }\n    get encryptedBatch() {\n        if (this.encryptedResponse == null)\n            return null;\n        if (this._encryptedBatch != null)\n            return this._encryptedBatch;\n        const cursor = this.encryptedResponse?.get('cursor', bson_1.BSONType.object);\n        if (cursor?.has('firstBatch'))\n            this._encryptedBatch = cursor.get('firstBatch', bson_1.BSONType.array, true);\n        else if (cursor?.has('nextBatch'))\n            this._encryptedBatch = cursor.get('nextBatch', bson_1.BSONType.array, true);\n        else\n            throw new error_1.MongoUnexpectedServerResponseError('Cursor document did not contain a batch');\n        return this._encryptedBatch;\n    }\n    get batch() {\n        if (this._batch != null)\n            return this._batch;\n        const cursor = this.cursor;\n        if (cursor.has('firstBatch'))\n            this._batch = cursor.get('firstBatch', bson_1.BSONType.array, true);\n        else if (cursor.has('nextBatch'))\n            this._batch = cursor.get('nextBatch', bson_1.BSONType.array, true);\n        else\n            throw new error_1.MongoUnexpectedServerResponseError('Cursor document did not contain a batch');\n        return this._batch;\n    }\n    get batchSize() {\n        return this.batch?.size();\n    }\n    get postBatchResumeToken() {\n        return (this.cursor.get('postBatchResumeToken', bson_1.BSONType.object)?.toObject({\n            promoteValues: false,\n            promoteLongs: false,\n            promoteBuffers: false,\n            validation: { utf8: true }\n        }) ?? null);\n    }\n    shift(options) {\n        if (this.iterated >= this.batchSize) {\n            return null;\n        }\n        const result = this.batch.get(this.iterated, bson_1.BSONType.object, true) ?? null;\n        const encryptedResult = this.encryptedBatch?.get(this.iterated, bson_1.BSONType.object, true) ?? null;\n        this.iterated += 1;\n        if (options?.raw) {\n            return result.toBytes();\n        }\n        else {\n            const object = result.toObject(options);\n            if (encryptedResult) {\n                (0, utils_1.decorateDecryptionResult)(object, encryptedResult.toObject(options), true);\n            }\n            return object;\n        }\n    }\n    clear() {\n        this.iterated = this.batchSize;\n    }\n}\nexports.CursorResponse = CursorResponse;\n/**\n * Explain responses have nothing to do with cursor responses\n * This class serves to temporarily avoid refactoring how cursors handle\n * explain responses which is to detect that the response is not cursor-like and return the explain\n * result as the \"first and only\" document in the \"batch\" and end the \"cursor\"\n */\nclass ExplainedCursorResponse extends CursorResponse {\n    constructor() {\n        super(...arguments);\n        this.isExplain = true;\n        this._length = 1;\n    }\n    get id() {\n        return bson_1.Long.fromBigInt(0n);\n    }\n    get batchSize() {\n        return 0;\n    }\n    get ns() {\n        return null;\n    }\n    get length() {\n        return this._length;\n    }\n    shift(options) {\n        if (this._length === 0)\n            return null;\n        this._length -= 1;\n        return this.toObject(options);\n    }\n}\nexports.ExplainedCursorResponse = ExplainedCursorResponse;\n/**\n * Client bulk writes have some extra metadata at the top level that needs to be\n * included in the result returned to the user.\n */\nclass ClientBulkWriteCursorResponse extends CursorResponse {\n    get insertedCount() {\n        return this.get('nInserted', bson_1.BSONType.int, true);\n    }\n    get upsertedCount() {\n        return this.get('nUpserted', bson_1.BSONType.int, true);\n    }\n    get matchedCount() {\n        return this.get('nMatched', bson_1.BSONType.int, true);\n    }\n    get modifiedCount() {\n        return this.get('nModified', bson_1.BSONType.int, true);\n    }\n    get deletedCount() {\n        return this.get('nDeleted', bson_1.BSONType.int, true);\n    }\n    get writeConcernError() {\n        return this.get('writeConcernError', bson_1.BSONType.object, false);\n    }\n}\nexports.ClientBulkWriteCursorResponse = ClientBulkWriteCursorResponse;\n//# sourceMappingURL=responses.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getReadPreference = getReadPreference;\nexports.isSharded = isSharded;\nconst error_1 = require(\"../../error\");\nconst read_preference_1 = require(\"../../read_preference\");\nconst common_1 = require(\"../../sdam/common\");\nconst topology_description_1 = require(\"../../sdam/topology_description\");\nfunction getReadPreference(options) {\n    // Default to command version of the readPreference.\n    let readPreference = options?.readPreference ?? read_preference_1.ReadPreference.primary;\n    if (typeof readPreference === 'string') {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer == null) {\n        return false;\n    }\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    // happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server) => server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\n//# sourceMappingURL=shared.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Collection = void 0;\nconst bson_1 = require(\"./bson\");\nconst ordered_1 = require(\"./bulk/ordered\");\nconst unordered_1 = require(\"./bulk/unordered\");\nconst change_stream_1 = require(\"./change_stream\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\nconst list_indexes_cursor_1 = require(\"./cursor/list_indexes_cursor\");\nconst list_search_indexes_cursor_1 = require(\"./cursor/list_search_indexes_cursor\");\nconst error_1 = require(\"./error\");\nconst bulk_write_1 = require(\"./operations/bulk_write\");\nconst count_1 = require(\"./operations/count\");\nconst delete_1 = require(\"./operations/delete\");\nconst distinct_1 = require(\"./operations/distinct\");\nconst drop_1 = require(\"./operations/drop\");\nconst estimated_document_count_1 = require(\"./operations/estimated_document_count\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst find_and_modify_1 = require(\"./operations/find_and_modify\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst insert_1 = require(\"./operations/insert\");\nconst is_capped_1 = require(\"./operations/is_capped\");\nconst options_operation_1 = require(\"./operations/options_operation\");\nconst rename_1 = require(\"./operations/rename\");\nconst create_1 = require(\"./operations/search_indexes/create\");\nconst drop_2 = require(\"./operations/search_indexes/drop\");\nconst update_1 = require(\"./operations/search_indexes/update\");\nconst update_2 = require(\"./operations/update\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nclass Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */\n    constructor(db, name, options) {\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.client = db.client;\n    }\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */\n    get collectionName() {\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace() {\n        return this.fullNamespace.toString();\n    }\n    /**\n     *  @internal\n     *\n     * The `MongoDBNamespace` for the collection.\n     */\n    get fullNamespace() {\n        return this.s.namespace;\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */\n    get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    get timeoutMS() {\n        return this.s.options.timeoutMS;\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    async insertOne(doc, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    async insertMany(docs, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return await (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateOne(filter, update, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    async replaceOne(filter, replacement, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateMany(filter, update, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteOne(filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteMany(filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return await (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, (0, utils_1.resolveOptions)(undefined, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        })));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async drop(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        const cursor = this.find(filter, options).limit(-1).batchSize(1);\n        const res = await cursor.next();\n        await cursor.close();\n        return res;\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async options(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    async isCapped(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    async createIndex(indexSpec, options) {\n        const indexes = await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexSpecification(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n        return indexes[0];\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    async createIndexes(indexSpecs, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexDescriptionArray(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, { ...options, maxTimeMS: undefined })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    async dropIndex(indexName, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropIndexes(options) {\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, '*', (0, utils_1.resolveOptions)(this, options)));\n            return true;\n        }\n        catch (error) {\n            // TODO(NODE-6517): Driver should only filter for namespace not found error. Other errors should be thrown.\n            if (error instanceof error_1.MongoOperationTimeoutError)\n                throw error;\n            return false;\n        }\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    async indexExists(indexes, options) {\n        const indexNames = Array.isArray(indexes) ? indexes : [indexes];\n        const allIndexes = new Set(await this.listIndexes(options)\n            .map(({ name }) => name)\n            .toArray());\n        return indexNames.every(name => allIndexes.has(name));\n    }\n    async indexInformation(options) {\n        return await this.indexes({\n            ...options,\n            full: options?.full ?? false\n        });\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    async estimatedDocumentCount(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * Due to countDocuments using the $match aggregation pipeline stage, certain query operators cannot be used in countDocuments. This includes the $where and $near query operators, among others. Details can be found in the documentation for the $match aggregation pipeline stage.\n     *\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    async countDocuments(filter = {}, options = {}) {\n        const pipeline = [];\n        pipeline.push({ $match: filter });\n        if (typeof options.skip === 'number') {\n            pipeline.push({ $skip: options.skip });\n        }\n        if (typeof options.limit === 'number') {\n            pipeline.push({ $limit: options.limit });\n        }\n        pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n        const cursor = this.aggregate(pipeline, options);\n        const doc = await cursor.next();\n        await cursor.close();\n        return doc?.n ?? 0;\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async indexes(options) {\n        const indexes = await this.listIndexes(options).toArray();\n        const full = options?.full ?? true;\n        if (full) {\n            return indexes;\n        }\n        const object = Object.fromEntries(indexes.map(({ name, key }) => [name, Object.entries(key)]));\n        return object;\n    }\n    async findOneAndDelete(filter, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndUpdate(filter, update, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @remarks\n     * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n     * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n     * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n     * event.\n     *\n     * Note that if a change stream is consistently timing out when watching a collection, database or\n     * client that is being changed, then this may be due to the server timing out before it can finish\n     * processing the existing oplog. To address this, restart the change stream with a higher\n     * `timeoutMS`.\n     *\n     * If the change stream times out the initial aggregate operation to establish the change stream on\n     * the server, then the client will close the change stream. If the getMore calls to the server\n     * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n     * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n     * emitter mode.\n     *\n     * To determine whether or not the change stream is still open following a timeout, check the\n     * {@link ChangeStream.closed} getter.\n     *\n     * @example\n     * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n     * The next call can just be retried after this succeeds.\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * try {\n     *     await changeStream.next();\n     * } catch (e) {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *       await changeStream.next();\n     *     }\n     *     throw e;\n     * }\n     * ```\n     *\n     * @example\n     * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n     * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n     * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n     * this will automatically continue emitting change events once the resume attempt completes.\n     *\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * changeStream.on('change', console.log);\n     * changeStream.on('error', e => {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *         // do nothing\n     *     } else {\n     *         changeStream.close();\n     *     }\n     * });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    async count(filter = {}, options = {}) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listSearchIndexes(indexNameOrOptions, options) {\n        options =\n            typeof indexNameOrOptions === 'object' ? indexNameOrOptions : options == null ? {} : options;\n        const indexName = indexNameOrOptions == null\n            ? null\n            : typeof indexNameOrOptions === 'object'\n                ? null\n                : indexNameOrOptions;\n        return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n    }\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async createSearchIndex(description) {\n        const [index] = await this.createSearchIndexes([description]);\n        return index;\n    }\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */\n    async createSearchIndexes(descriptions) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n    }\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async dropSearchIndex(name) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n    }\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async updateSearchIndex(name, definition) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n    }\n}\nexports.Collection = Collection;\n//# sourceMappingURL=collection.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_OPTIONS = exports.OPTIONS = void 0;\nexports.resolveSRVRecord = resolveSRVRecord;\nexports.parseOptions = parseOptions;\nconst dns = require(\"dns\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst client_metadata_1 = require(\"./cmap/handshake/client_metadata\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst monitor_1 = require(\"./sdam/monitor\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\nfunction retryDNSTimeoutFor(api) {\n    return async function dnsReqRetryTimeout(lookupAddress) {\n        try {\n            return await dns.promises[api](lookupAddress);\n        }\n        catch (firstDNSError) {\n            if (firstDNSError.code === dns.TIMEOUT) {\n                return await dns.promises[api](lookupAddress);\n            }\n            else {\n                throw firstDNSError;\n            }\n        }\n    };\n}\nconst resolveSrv = retryDNSTimeoutFor('resolveSrv');\nconst resolveTxt = retryDNSTimeoutFor('resolveTxt');\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== 'string') {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    // Asynchronously start TXT resolution so that we do not have to wait until\n    // the SRV record is resolved before starting a second DNS query.\n    const lookupAddress = options.srvHost;\n    const txtResolutionPromise = resolveTxt(lookupAddress);\n    txtResolutionPromise.then(undefined, utils_1.squashError); // rejections will be handled later\n    const hostname = `_${options.srvServiceName}._tcp.${lookupAddress}`;\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const addresses = await resolveSrv(hostname);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError('No addresses found at host');\n    }\n    for (const { name } of addresses) {\n        (0, utils_1.checkParentDomainMatch)(name, lookupAddress);\n    }\n    const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Use the result of resolving the TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await txtResolutionPromise;\n    }\n    catch (error) {\n        if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError('Multiple text records not allowed');\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n    const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n    if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n    }\n    if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n        throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n    }\n    const source = txtRecordOptions.get('authSource') ?? undefined;\n    const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n    const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n    if (!options.userSpecifiedAuthSource &&\n        source &&\n        options.credentials &&\n        !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === 'true') {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n    if (!allOptions)\n        return;\n    const check = (a, b) => {\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n}\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    switch (value) {\n        case 'true':\n            return true;\n        case 'false':\n            return false;\n        default:\n            throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n    }\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    if (value === '') {\n        return;\n    }\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(/:(.*)/);\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        yield [key, value];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = url.searchParams.getAll(key);\n        const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n        if (!isReadPreferenceTags && values.length > 1) {\n            throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n        }\n        if (!isReadPreferenceTags && values.includes('')) {\n            throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has('serverApi')) {\n        throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n    if (uriMechanismProperties) {\n        for (const property of uriMechanismProperties) {\n            if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n                throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n            }\n        }\n    }\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    // All option collection\n    const allProvidedOptions = new CaseInsensitiveMap();\n    const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n    for (const key of allProvidedKeys) {\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValues = urlOptions.get(key) ?? [];\n        values.push(...urlValues);\n        allProvidedOptions.set(key, values);\n    }\n    if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n        const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n            .concat(allProvidedOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    checkTLSOptions(allProvidedOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allProvidedOptions.get(key);\n        if (!values || values.length === 0) {\n            if (exports.DEFAULT_OPTIONS.has(key)) {\n                setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n            }\n        }\n        else {\n            const { deprecated } = descriptor;\n            if (deprecated) {\n                const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n                (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n            }\n            setOption(mongoOptions, key, descriptor, values);\n        }\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) &&\n            allProvidedOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) &&\n            mongoOptions.dbName &&\n            !allProvidedOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === '' &&\n            mongoOptions.credentials.username === '' &&\n            mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT &&\n            Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n        const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    }\n    else {\n        const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') ||\n            objectOptions.has('srvMaxHosts') ||\n            urlOptions.has('srvServiceName') ||\n            objectOptions.has('srvServiceName');\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError('directConnection option requires exactly one host');\n    }\n    if (!mongoOptions.proxyHost &&\n        (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n    }\n    if ((mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n        (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n    }\n    const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n    if (proxyOptions.some(options => options.length > 1)) {\n        throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions({\n        MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n        MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n        MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n        MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n        MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n        MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n        MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n        MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH\n    }, {\n        mongodbLogPath: mongoOptions.mongodbLogPath,\n        mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n        mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n    });\n    // Set the default for the additional driver info.\n    mongoOptions.additionalDriverInfo = [];\n    mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n    mongoOptions.extendedMetadata = (0, client_metadata_1.addContainerMetadata)(mongoOptions.metadata).then(undefined, utils_1.squashError); // rejections will be handled later\n    return mongoOptions;\n}\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform } = descriptor;\n    const name = target ?? key;\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            // The value should always be a string here, but since the array is typed as unknown\n            // there still needs to be an explicit cast.\n            // eslint-disable-next-line @typescript-eslint/no-base-to-string\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: 'string'\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n                providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    // Note that if the authMechanismProperties contain a TOKEN_RESOURCE that has a\n    // comma in it, it MUST be supplied as a MongoClient option instead of in the\n    // connection string.\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values) {\n                if (typeof optionValue === 'string') {\n                    for (const [key, value] of entriesFromString(optionValue)) {\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        }\n                        catch {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                }\n                else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n                    }\n                    mechanismProperties = { ...optionValue };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    autoSelectFamily: {\n        type: 'boolean',\n        default: true\n    },\n    autoSelectFamilyAttemptTimeout: {\n        type: 'uint'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        default: {},\n        type: 'record'\n    },\n    enableUtf8Validation: { type: 'boolean', default: true },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    maxConnecting: {\n        default: 2,\n        transform({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    useBigInt64: {\n        type: 'boolean'\n    },\n    proxyHost: {\n        type: 'string'\n    },\n    proxyPassword: {\n        type: 'string'\n    },\n    proxyPort: {\n        type: 'uint'\n    },\n    proxyUsername: {\n        type: 'string'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const tags = Array.isArray(values[0])\n                ? values[0]\n                : values;\n            const readPreferenceTags = [];\n            for (const tag of tags) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of entriesFromString(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverMonitoringMode: {\n        default: 'auto',\n        transform({ values: [value] }) {\n            if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n                throw new error_1.MongoParseError('serverMonitoringMode must be one of `auto`, `poll`, or `stream`');\n            }\n            return value;\n        }\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        // TODO(NODE-6491): deprecated: 'Please use timeoutMS instead',\n        default: 0,\n        type: 'uint'\n    },\n    srvMaxHosts: {\n        type: 'uint',\n        default: 0\n    },\n    srvServiceName: {\n        type: 'string',\n        default: 'mongodb'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    timeoutMS: {\n        type: 'uint'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        type: 'string'\n    },\n    tlsCRLFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        // TODO(NODE-6491): deprecated: 'Please use timeoutMS instead',\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    mongodbLogPath: {\n        transform({ values: [value] }) {\n            if (!((typeof value === 'string' && ['stderr', 'stdout'].includes(value)) ||\n                (value &&\n                    typeof value === 'object' &&\n                    'write' in value &&\n                    typeof value.write === 'function'))) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`);\n            }\n            return value;\n        }\n    },\n    mongodbLogComponentSeverities: {\n        transform({ values: [value] }) {\n            if (typeof value !== 'object' || !value) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n            }\n            for (const [k, v] of Object.entries(value)) {\n                if (typeof v !== 'string' || typeof k !== 'string') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`);\n                }\n                if (!Object.values(mongo_logger_1.MongoLoggableComponent).some(val => val === k) && k !== 'default') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`);\n                }\n                if (!Object.values(mongo_logger_1.SeverityLevel).some(val => val === v)) {\n                    throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`);\n                }\n            }\n            return value;\n        }\n    },\n    mongodbLogMaxDocumentLength: { type: 'uint' },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted Node.js Options\n    allowPartialTrustChain: { type: 'any' },\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    keepAliveInitialDelay: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy options from v3 era\n    useNewUrlParser: {\n        type: 'boolean',\n        deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    useUnifiedTopology: {\n        type: 'boolean',\n        deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    __skipPingOnConnect: { type: 'boolean' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n//# sourceMappingURL=connection_string.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.END = exports.CHANGE = exports.INIT = exports.MORE = exports.RESPONSE = exports.SERVER_HEARTBEAT_FAILED = exports.SERVER_HEARTBEAT_SUCCEEDED = exports.SERVER_HEARTBEAT_STARTED = exports.COMMAND_FAILED = exports.COMMAND_SUCCEEDED = exports.COMMAND_STARTED = exports.CLUSTER_TIME_RECEIVED = exports.CONNECTION_CHECKED_IN = exports.CONNECTION_CHECKED_OUT = exports.CONNECTION_CHECK_OUT_FAILED = exports.CONNECTION_CHECK_OUT_STARTED = exports.CONNECTION_CLOSED = exports.CONNECTION_READY = exports.CONNECTION_CREATED = exports.CONNECTION_POOL_READY = exports.CONNECTION_POOL_CLEARED = exports.CONNECTION_POOL_CLOSED = exports.CONNECTION_POOL_CREATED = exports.WAITING_FOR_SUITABLE_SERVER = exports.SERVER_SELECTION_SUCCEEDED = exports.SERVER_SELECTION_FAILED = exports.SERVER_SELECTION_STARTED = exports.TOPOLOGY_DESCRIPTION_CHANGED = exports.TOPOLOGY_CLOSED = exports.TOPOLOGY_OPENING = exports.SERVER_DESCRIPTION_CHANGED = exports.SERVER_CLOSED = exports.SERVER_OPENING = exports.DESCRIPTION_RECEIVED = exports.UNPINNED = exports.PINNED = exports.MESSAGE = exports.ENDED = exports.CLOSED = exports.CONNECT = exports.OPEN = exports.CLOSE = exports.TIMEOUT = exports.ERROR = exports.SYSTEM_JS_COLLECTION = exports.SYSTEM_COMMAND_COLLECTION = exports.SYSTEM_USER_COLLECTION = exports.SYSTEM_PROFILE_COLLECTION = exports.SYSTEM_INDEX_COLLECTION = exports.SYSTEM_NAMESPACE_COLLECTION = void 0;\nexports.kDecoratedKeys = exports.kDecorateResult = exports.LEGACY_HELLO_COMMAND_CAMEL_CASE = exports.LEGACY_HELLO_COMMAND = exports.MONGO_CLIENT_EVENTS = exports.LOCAL_SERVER_EVENTS = exports.SERVER_RELAY_EVENTS = exports.APM_EVENTS = exports.TOPOLOGY_EVENTS = exports.CMAP_EVENTS = exports.HEARTBEAT_EVENTS = exports.RESUME_TOKEN_CHANGED = void 0;\nexports.SYSTEM_NAMESPACE_COLLECTION = 'system.namespaces';\nexports.SYSTEM_INDEX_COLLECTION = 'system.indexes';\nexports.SYSTEM_PROFILE_COLLECTION = 'system.profile';\nexports.SYSTEM_USER_COLLECTION = 'system.users';\nexports.SYSTEM_COMMAND_COLLECTION = '$cmd';\nexports.SYSTEM_JS_COLLECTION = 'system.js';\n// events\nexports.ERROR = 'error';\nexports.TIMEOUT = 'timeout';\nexports.CLOSE = 'close';\nexports.OPEN = 'open';\nexports.CONNECT = 'connect';\nexports.CLOSED = 'closed';\nexports.ENDED = 'ended';\nexports.MESSAGE = 'message';\nexports.PINNED = 'pinned';\nexports.UNPINNED = 'unpinned';\nexports.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @internal */\nexports.SERVER_OPENING = 'serverOpening';\n/** @internal */\nexports.SERVER_CLOSED = 'serverClosed';\n/** @internal */\nexports.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @internal */\nexports.TOPOLOGY_OPENING = 'topologyOpening';\n/** @internal */\nexports.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @internal */\nexports.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @internal */\nexports.SERVER_SELECTION_STARTED = 'serverSelectionStarted';\n/** @internal */\nexports.SERVER_SELECTION_FAILED = 'serverSelectionFailed';\n/** @internal */\nexports.SERVER_SELECTION_SUCCEEDED = 'serverSelectionSucceeded';\n/** @internal */\nexports.WAITING_FOR_SUITABLE_SERVER = 'waitingForSuitableServer';\n/** @internal */\nexports.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/** @internal */\nexports.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/** @internal */\nexports.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/** @internal */\nexports.CONNECTION_POOL_READY = 'connectionPoolReady';\n/** @internal */\nexports.CONNECTION_CREATED = 'connectionCreated';\n/** @internal */\nexports.CONNECTION_READY = 'connectionReady';\n/** @internal */\nexports.CONNECTION_CLOSED = 'connectionClosed';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/** @internal */\nexports.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/** @internal */\nexports.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\nexports.CLUSTER_TIME_RECEIVED = 'clusterTimeReceived';\n/** @internal */\nexports.COMMAND_STARTED = 'commandStarted';\n/** @internal */\nexports.COMMAND_SUCCEEDED = 'commandSucceeded';\n/** @internal */\nexports.COMMAND_FAILED = 'commandFailed';\n/** @internal */\nexports.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @internal */\nexports.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @internal */\nexports.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\nexports.RESPONSE = 'response';\nexports.MORE = 'more';\nexports.INIT = 'init';\nexports.CHANGE = 'change';\nexports.END = 'end';\nexports.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @public */\nexports.HEARTBEAT_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED\n]);\n/** @public */\nexports.CMAP_EVENTS = Object.freeze([\n    exports.CONNECTION_POOL_CREATED,\n    exports.CONNECTION_POOL_READY,\n    exports.CONNECTION_POOL_CLEARED,\n    exports.CONNECTION_POOL_CLOSED,\n    exports.CONNECTION_CREATED,\n    exports.CONNECTION_READY,\n    exports.CONNECTION_CLOSED,\n    exports.CONNECTION_CHECK_OUT_STARTED,\n    exports.CONNECTION_CHECK_OUT_FAILED,\n    exports.CONNECTION_CHECKED_OUT,\n    exports.CONNECTION_CHECKED_IN\n]);\n/** @public */\nexports.TOPOLOGY_EVENTS = Object.freeze([\n    exports.SERVER_OPENING,\n    exports.SERVER_CLOSED,\n    exports.SERVER_DESCRIPTION_CHANGED,\n    exports.TOPOLOGY_OPENING,\n    exports.TOPOLOGY_CLOSED,\n    exports.TOPOLOGY_DESCRIPTION_CHANGED,\n    exports.ERROR,\n    exports.TIMEOUT,\n    exports.CLOSE\n]);\n/** @public */\nexports.APM_EVENTS = Object.freeze([\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED\n]);\n/**\n * All events that we relay to the `Topology`\n * @internal\n */\nexports.SERVER_RELAY_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED,\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED,\n    ...exports.CMAP_EVENTS\n]);\n/**\n * All events we listen to from `Server` instances, but do not forward to the client\n * @internal\n */\nexports.LOCAL_SERVER_EVENTS = Object.freeze([\n    exports.CONNECT,\n    exports.DESCRIPTION_RECEIVED,\n    exports.CLOSED,\n    exports.ENDED\n]);\n/** @public */\nexports.MONGO_CLIENT_EVENTS = Object.freeze([\n    ...exports.CMAP_EVENTS,\n    ...exports.APM_EVENTS,\n    ...exports.TOPOLOGY_EVENTS,\n    ...exports.HEARTBEAT_EVENTS\n]);\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND = 'ismaster';\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = 'isMaster';\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */\nexports.kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');\n/** @internal */\nexports.kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CursorTimeoutContext = exports.AbstractCursor = exports.CursorTimeoutMode = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = require(\"stream\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst get_more_1 = require(\"../operations/get_more\");\nconst kill_cursors_1 = require(\"../operations/kill_cursors\");\nconst read_concern_1 = require(\"../read_concern\");\nconst read_preference_1 = require(\"../read_preference\");\nconst resource_management_1 = require(\"../resource_management\");\nconst sessions_1 = require(\"../sessions\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\n/** @public */\nexports.CURSOR_FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\nfunction removeActiveCursor() {\n    this.client.s.activeCursors.delete(this);\n}\n/**\n * @public\n * @experimental\n * Specifies how `timeoutMS` is applied to the cursor. Can be either `'cursorLifeTime'` or `'iteration'`\n * When set to `'iteration'`, the deadline specified by `timeoutMS` applies to each call of\n * `cursor.next()`.\n * When set to `'cursorLifetime'`, the deadline applies to the life of the entire cursor.\n *\n * Depending on the type of cursor being used, this option has different default values.\n * For non-tailable cursors, this value defaults to `'cursorLifetime'`\n * For tailable cursors, this value defaults to `'iteration'` since tailable cursors, by\n * definition can have an arbitrarily long lifetime.\n *\n * @example\n * ```ts\n * const cursor = collection.find({}, {timeoutMS: 100, timeoutMode: 'iteration'});\n * for await (const doc of cursor) {\n *  // process doc\n *  // This will throw a timeout error if any of the iterator's `next()` calls takes more than 100ms, but\n *  // will continue to iterate successfully otherwise, regardless of the number of batches.\n * }\n * ```\n *\n * @example\n * ```ts\n * const cursor = collection.find({}, { timeoutMS: 1000, timeoutMode: 'cursorLifetime' });\n * const docs = await cursor.toArray(); // This entire line will throw a timeout error if all batches are not fetched and returned within 1000ms.\n * ```\n */\nexports.CursorTimeoutMode = Object.freeze({\n    ITERATION: 'iteration',\n    LIFETIME: 'cursorLifetime'\n});\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(client, namespace, options = {}) {\n        super();\n        /** @internal */\n        this.documents = null;\n        /** @internal */\n        this.hasEmittedClose = false;\n        this.on('error', utils_1.noop);\n        if (!client.s.isMongoClient) {\n            throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n        }\n        this.cursorClient = client;\n        this.cursorNamespace = namespace;\n        this.cursorId = null;\n        this.initialized = false;\n        this.isClosed = false;\n        this.isKilled = false;\n        this.cursorOptions = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference\n                ? options.readPreference\n                : read_preference_1.ReadPreference.primary,\n            ...(0, bson_1.pluckBSONSerializeOptions)(options),\n            timeoutMS: options?.timeoutContext?.csotEnabled()\n                ? options.timeoutContext.timeoutMS\n                : options.timeoutMS,\n            tailable: options.tailable,\n            awaitData: options.awaitData\n        };\n        if (this.cursorOptions.timeoutMS != null) {\n            if (options.timeoutMode == null) {\n                if (options.tailable) {\n                    if (options.awaitData) {\n                        if (options.maxAwaitTimeMS != null &&\n                            options.maxAwaitTimeMS >= this.cursorOptions.timeoutMS)\n                            throw new error_1.MongoInvalidArgumentError('Cannot specify maxAwaitTimeMS >= timeoutMS for a tailable awaitData cursor');\n                    }\n                    this.cursorOptions.timeoutMode = exports.CursorTimeoutMode.ITERATION;\n                }\n                else {\n                    this.cursorOptions.timeoutMode = exports.CursorTimeoutMode.LIFETIME;\n                }\n            }\n            else {\n                if (options.tailable && options.timeoutMode === exports.CursorTimeoutMode.LIFETIME) {\n                    throw new error_1.MongoInvalidArgumentError(\"Cannot set tailable cursor's timeoutMode to LIFETIME\");\n                }\n                this.cursorOptions.timeoutMode = options.timeoutMode;\n            }\n        }\n        else {\n            if (options.timeoutMode != null)\n                throw new error_1.MongoInvalidArgumentError('Cannot set timeoutMode without setting timeoutMS');\n        }\n        // Set for initial command\n        this.cursorOptions.omitMaxTimeMS =\n            this.cursorOptions.timeoutMS != null &&\n                ((this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION &&\n                    !this.cursorOptions.tailable) ||\n                    (this.cursorOptions.tailable && !this.cursorOptions.awaitData));\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this.cursorOptions.readConcern = readConcern;\n        }\n        if (typeof options.batchSize === 'number') {\n            this.cursorOptions.batchSize = options.batchSize;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cursorOptions.comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            this.cursorOptions.maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.maxAwaitTimeMS === 'number') {\n            this.cursorOptions.maxAwaitTimeMS = options.maxAwaitTimeMS;\n        }\n        this.cursorSession = options.session ?? null;\n        this.deserializationOptions = {\n            ...this.cursorOptions,\n            validation: {\n                utf8: options?.enableUtf8Validation === false ? false : true\n            }\n        };\n        this.timeoutContext = options.timeoutContext;\n        this.signal = options.signal;\n        this.abortListener = (0, utils_1.addAbortListener)(this.signal, () => void this.close().then(undefined, utils_1.squashError));\n        this.trackCursor();\n    }\n    /**\n     * The cursor has no id until it receives a response from the initial cursor creating command.\n     *\n     * It is non-zero for as long as the database has an open cursor.\n     *\n     * The initiating command may receive a zero id if the entire result is in the `firstBatch`.\n     */\n    get id() {\n        return this.cursorId ?? undefined;\n    }\n    /** @internal */\n    get isDead() {\n        return (this.cursorId?.isZero() ?? false) || this.isClosed || this.isKilled;\n    }\n    /** @internal */\n    get client() {\n        return this.cursorClient;\n    }\n    /** @internal */\n    get server() {\n        return this.selectedServer;\n    }\n    get namespace() {\n        return this.cursorNamespace;\n    }\n    get readPreference() {\n        return this.cursorOptions.readPreference;\n    }\n    get readConcern() {\n        return this.cursorOptions.readConcern;\n    }\n    /** @internal */\n    get session() {\n        return this.cursorSession;\n    }\n    set session(clientSession) {\n        this.cursorSession = clientSession;\n    }\n    /**\n     * The cursor is closed and all remaining locally buffered documents have been iterated.\n     */\n    get closed() {\n        return this.isClosed && (this.documents?.length ?? 0) === 0;\n    }\n    /**\n     * A `killCursors` command was attempted on this cursor.\n     * This is performed if the cursor id is non zero.\n     */\n    get killed() {\n        return this.isKilled;\n    }\n    get loadBalanced() {\n        return !!this.cursorClient.topology?.loadBalanced;\n    }\n    /** @internal */\n    async asyncDispose() {\n        await this.close();\n    }\n    /** Adds cursor to client's tracking so it will be closed by MongoClient.close() */\n    trackCursor() {\n        this.cursorClient.s.activeCursors.add(this);\n        if (!this.listeners('close').includes(removeActiveCursor)) {\n            this.once('close', removeActiveCursor);\n        }\n    }\n    /** Returns current buffered documents length */\n    bufferedCount() {\n        return this.documents?.length ?? 0;\n    }\n    /** Returns current buffered documents */\n    readBufferedDocuments(number) {\n        const bufferedDocs = [];\n        const documentsToRead = Math.min(number ?? this.documents?.length ?? 0, this.documents?.length ?? 0);\n        for (let count = 0; count < documentsToRead; count++) {\n            const document = this.documents?.shift(this.deserializationOptions);\n            if (document != null) {\n                bufferedDocs.push(document);\n            }\n        }\n        return bufferedDocs;\n    }\n    async *[Symbol.asyncIterator]() {\n        this.signal?.throwIfAborted();\n        if (this.closed) {\n            return;\n        }\n        try {\n            while (true) {\n                if (this.isKilled) {\n                    return;\n                }\n                if (this.closed) {\n                    return;\n                }\n                if (this.cursorId != null && this.isDead && (this.documents?.length ?? 0) === 0) {\n                    return;\n                }\n                const document = await this.next();\n                // eslint-disable-next-line no-restricted-syntax\n                if (document === null) {\n                    return;\n                }\n                yield document;\n                this.signal?.throwIfAborted();\n            }\n        }\n        finally {\n            // Only close the cursor if it has not already been closed. This finally clause handles\n            // the case when a user would break out of a for await of loop early.\n            if (!this.isClosed) {\n                try {\n                    await this.close();\n                }\n                catch (error) {\n                    (0, utils_1.squashError)(error);\n                }\n            }\n        }\n    }\n    stream(options) {\n        const readable = new ReadableCursorStream(this);\n        const abortListener = (0, utils_1.addAbortListener)(this.signal, function () {\n            readable.destroy(this.reason);\n        });\n        readable.once('end', () => {\n            abortListener?.[utils_1.kDispose]();\n        });\n        if (options?.transform) {\n            const transform = options.transform;\n            const transformedStream = readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform(chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    }\n                    catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n            // Bubble errors to transformed stream, because otherwise no way\n            // to handle this error.\n            readable.on('error', err => transformedStream.emit('error', err));\n            return transformedStream;\n        }\n        return readable;\n    }\n    async hasNext() {\n        this.signal?.throwIfAborted();\n        if (this.cursorId === bson_1.Long.ZERO) {\n            return false;\n        }\n        if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION && this.cursorId != null) {\n            this.timeoutContext?.refresh();\n        }\n        try {\n            do {\n                if ((this.documents?.length ?? 0) !== 0) {\n                    return true;\n                }\n                await this.fetchBatch();\n            } while (!this.isDead || (this.documents?.length ?? 0) !== 0);\n        }\n        finally {\n            if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION) {\n                this.timeoutContext?.clear();\n            }\n        }\n        return false;\n    }\n    /** Get the next available document from the cursor, returns null if no more documents are available. */\n    async next() {\n        this.signal?.throwIfAborted();\n        if (this.cursorId === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION && this.cursorId != null) {\n            this.timeoutContext?.refresh();\n        }\n        try {\n            do {\n                const doc = this.documents?.shift(this.deserializationOptions);\n                if (doc != null) {\n                    if (this.transform != null)\n                        return await this.transformDocument(doc);\n                    return doc;\n                }\n                await this.fetchBatch();\n            } while (!this.isDead || (this.documents?.length ?? 0) !== 0);\n        }\n        finally {\n            if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION) {\n                this.timeoutContext?.clear();\n            }\n        }\n        return null;\n    }\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this.signal?.throwIfAborted();\n        if (this.cursorId === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION && this.cursorId != null) {\n            this.timeoutContext?.refresh();\n        }\n        try {\n            let doc = this.documents?.shift(this.deserializationOptions);\n            if (doc != null) {\n                if (this.transform != null)\n                    return await this.transformDocument(doc);\n                return doc;\n            }\n            await this.fetchBatch();\n            doc = this.documents?.shift(this.deserializationOptions);\n            if (doc != null) {\n                if (this.transform != null)\n                    return await this.transformDocument(doc);\n                return doc;\n            }\n        }\n        finally {\n            if (this.cursorOptions.timeoutMode === exports.CursorTimeoutMode.ITERATION) {\n                this.timeoutContext?.clear();\n            }\n        }\n        return null;\n    }\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n    async forEach(iterator) {\n        this.signal?.throwIfAborted();\n        if (typeof iterator !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        for await (const document of this) {\n            const result = iterator(document);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n    /**\n     * Frees any client-side resources used by the cursor.\n     */\n    async close(options) {\n        await this.cleanup(options?.timeoutMS);\n    }\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n    async toArray() {\n        this.signal?.throwIfAborted();\n        const array = [];\n        // at the end of the loop (since readBufferedDocuments is called) the buffer will be empty\n        // then, the 'await of' syntax will run a getMore call\n        for await (const document of this) {\n            array.push(document);\n            const docs = this.readBufferedDocuments();\n            if (this.transform != null) {\n                for (const doc of docs) {\n                    array.push(await this.transformDocument(doc));\n                }\n            }\n            else {\n                array.push(...docs);\n            }\n        }\n        return array;\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag, value) {\n        this.throwIfInitialized();\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== 'boolean') {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this.cursorOptions[flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map(transform) {\n        this.throwIfInitialized();\n        const oldTransform = this.transform;\n        if (oldTransform) {\n            this.transform = doc => {\n                return transform(oldTransform(doc));\n            };\n        }\n        else {\n            this.transform = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference) {\n        this.throwIfInitialized();\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this.cursorOptions.readPreference = readPreference;\n        }\n        else if (typeof readPreference === 'string') {\n            this.cursorOptions.readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        }\n        else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern) {\n        this.throwIfInitialized();\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({ readConcern });\n        if (resolvedReadConcern) {\n            this.cursorOptions.readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        this.throwIfInitialized();\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this.cursorOptions.maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value) {\n        this.throwIfInitialized();\n        if (this.cursorOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this.cursorOptions.batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind() {\n        if (this.timeoutContext && this.timeoutContext.owner !== this) {\n            throw new error_1.MongoAPIError(`Cannot rewind cursor that does not own its timeout context.`);\n        }\n        if (!this.initialized) {\n            return;\n        }\n        this.cursorId = null;\n        this.documents?.clear();\n        this.timeoutContext?.clear();\n        this.timeoutContext = undefined;\n        this.isClosed = false;\n        this.isKilled = false;\n        this.initialized = false;\n        this.hasEmittedClose = false;\n        this.trackCursor();\n        // We only want to end this session if we created it, and it hasn't ended yet\n        if (this.cursorSession?.explicit === false) {\n            if (!this.cursorSession.hasEnded) {\n                this.cursorSession.endSession().then(undefined, utils_1.squashError);\n            }\n            this.cursorSession = null;\n        }\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        if (this.cursorId == null) {\n            throw new error_1.MongoRuntimeError('Unexpected null cursor id. A cursor creating command should have set this');\n        }\n        if (this.selectedServer == null) {\n            throw new error_1.MongoRuntimeError('Unexpected null selectedServer. A cursor creating command should have set this');\n        }\n        if (this.cursorSession == null) {\n            throw new error_1.MongoRuntimeError('Unexpected null session. A cursor creating command should have set this');\n        }\n        const getMoreOptions = {\n            ...this.cursorOptions,\n            session: this.cursorSession,\n            batchSize\n        };\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.cursorNamespace, this.cursorId, this.selectedServer, getMoreOptions);\n        return await (0, execute_operation_1.executeOperation)(this.cursorClient, getMoreOperation, this.timeoutContext);\n    }\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */\n    async cursorInit() {\n        if (this.cursorOptions.timeoutMS != null) {\n            this.timeoutContext ??= new CursorTimeoutContext(timeout_1.TimeoutContext.create({\n                serverSelectionTimeoutMS: this.client.s.options.serverSelectionTimeoutMS,\n                timeoutMS: this.cursorOptions.timeoutMS\n            }), this);\n        }\n        try {\n            this.cursorSession ??= this.cursorClient.startSession({ owner: this, explicit: false });\n            const state = await this._initialize(this.cursorSession);\n            // Set omitMaxTimeMS to the value needed for subsequent getMore calls\n            this.cursorOptions.omitMaxTimeMS = this.cursorOptions.timeoutMS != null;\n            const response = state.response;\n            this.selectedServer = state.server;\n            this.cursorId = response.id;\n            this.cursorNamespace = response.ns ?? this.namespace;\n            this.documents = response;\n            this.initialized = true; // the cursor is now initialized, even if it is dead\n        }\n        catch (error) {\n            // the cursor is now initialized, even if an error occurred\n            this.initialized = true;\n            await this.cleanup(undefined, error);\n            throw error;\n        }\n        if (this.isDead) {\n            await this.cleanup();\n        }\n        return;\n    }\n    /** @internal Attempt to obtain more documents */\n    async fetchBatch() {\n        if (this.isClosed) {\n            return;\n        }\n        if (this.isDead) {\n            // if the cursor is dead, we clean it up\n            // cleanupCursor should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await this.cleanup();\n            return;\n        }\n        if (this.cursorId == null) {\n            await this.cursorInit();\n            // If the cursor died or returned documents, return\n            if ((this.documents?.length ?? 0) !== 0 || this.isDead)\n                return;\n            // Otherwise, run a getMore\n        }\n        // otherwise need to call getMore\n        const batchSize = this.cursorOptions.batchSize || 1000;\n        try {\n            const response = await this.getMore(batchSize);\n            this.cursorId = response.id;\n            this.documents = response;\n        }\n        catch (error) {\n            try {\n                await this.cleanup(undefined, error);\n            }\n            catch (cleanupError) {\n                // `cleanupCursor` should never throw, squash and throw the original error\n                (0, utils_1.squashError)(cleanupError);\n            }\n            throw error;\n        }\n        if (this.isDead) {\n            // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n            // we intentionally clean up the cursor to release its session back into the pool before the cursor\n            // is iterated.  This prevents a cursor that is exhausted on the server from holding\n            // onto a session indefinitely until the AbstractCursor is iterated.\n            //\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await this.cleanup();\n        }\n    }\n    /** @internal */\n    async cleanup(timeoutMS, error) {\n        this.abortListener?.[utils_1.kDispose]();\n        this.isClosed = true;\n        const timeoutContextForKillCursors = () => {\n            if (timeoutMS != null) {\n                this.timeoutContext?.clear();\n                return new CursorTimeoutContext(timeout_1.TimeoutContext.create({\n                    serverSelectionTimeoutMS: this.client.s.options.serverSelectionTimeoutMS,\n                    timeoutMS\n                }), this);\n            }\n            else {\n                return this.timeoutContext?.refreshed();\n            }\n        };\n        const withEmitClose = async (fn) => {\n            try {\n                await fn();\n            }\n            finally {\n                this.emitClose();\n            }\n        };\n        const close = async () => {\n            // if no session has been defined on the cursor, the cursor was never initialized\n            // or the cursor was re-wound and never re-iterated.  In either case, we\n            //   1. do not need to end the session (there is no session after all)\n            //   2. do not need to kill the cursor server-side\n            const session = this.cursorSession;\n            if (!session)\n                return;\n            try {\n                if (!this.isKilled &&\n                    this.cursorId &&\n                    !this.cursorId.isZero() &&\n                    this.cursorNamespace &&\n                    this.selectedServer &&\n                    !session.hasEnded) {\n                    this.isKilled = true;\n                    const cursorId = this.cursorId;\n                    this.cursorId = bson_1.Long.ZERO;\n                    await (0, execute_operation_1.executeOperation)(this.cursorClient, new kill_cursors_1.KillCursorsOperation(cursorId, this.cursorNamespace, this.selectedServer, {\n                        session\n                    }), timeoutContextForKillCursors());\n                }\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n            finally {\n                if (session.owner === this) {\n                    await session.endSession({ error });\n                }\n                if (!session.inTransaction()) {\n                    (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n                }\n            }\n        };\n        await withEmitClose(close);\n    }\n    /** @internal */\n    emitClose() {\n        try {\n            if (!this.hasEmittedClose && ((this.documents?.length ?? 0) === 0 || this.isClosed)) {\n                // @ts-expect-error: CursorEvents is generic so Parameters<CursorEvents[\"close\"]> may not be assignable to `[]`. Not sure how to require extenders do not add parameters.\n                this.emit('close');\n            }\n        }\n        finally {\n            this.hasEmittedClose = true;\n        }\n    }\n    /** @internal */\n    async transformDocument(document) {\n        if (this.transform == null)\n            return document;\n        try {\n            const transformedDocument = this.transform(document);\n            // eslint-disable-next-line no-restricted-syntax\n            if (transformedDocument === null) {\n                const TRANSFORM_TO_NULL_ERROR = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n                throw new error_1.MongoAPIError(TRANSFORM_TO_NULL_ERROR);\n            }\n            return transformedDocument;\n        }\n        catch (transformError) {\n            try {\n                await this.close();\n            }\n            catch (closeError) {\n                (0, utils_1.squashError)(closeError);\n            }\n            throw transformError;\n        }\n    }\n    /** @internal */\n    throwIfInitialized() {\n        if (this.initialized)\n            throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.AbstractCursor = AbstractCursor;\n/** @event */\nAbstractCursor.CLOSE = 'close';\nclass ReadableCursorStream extends stream_1.Readable {\n    constructor(cursor) {\n        super({\n            objectMode: true,\n            autoDestroy: false,\n            highWaterMark: 1\n        });\n        this._readInProgress = false;\n        this._cursor = cursor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _read(size) {\n        if (!this._readInProgress) {\n            this._readInProgress = true;\n            this._readNext();\n        }\n    }\n    _destroy(error, callback) {\n        this._cursor.close().then(() => callback(error), closeError => callback(closeError));\n    }\n    _readNext() {\n        if (this._cursor.id === bson_1.Long.ZERO) {\n            this.push(null);\n            return;\n        }\n        this._cursor\n            .next()\n            .then(\n        // result from next()\n        result => {\n            if (result == null) {\n                this.push(null);\n            }\n            else if (this.destroyed) {\n                this._cursor.close().then(undefined, utils_1.squashError);\n            }\n            else {\n                if (this.push(result)) {\n                    return this._readNext();\n                }\n                this._readInProgress = false;\n            }\n        }, \n        // error from next()\n        err => {\n            // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n            //       desired behavior is that a stream ends cleanly when a user explicitly closes\n            //       a client during iteration. Alternatively, we could do the \"right\" thing and\n            //       propagate the error message by removing this special case.\n            if (err.message.match(/server is closed/)) {\n                this._cursor.close().then(undefined, utils_1.squashError);\n                return this.push(null);\n            }\n            // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n            //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n            //       active getMore in-flight. This used to check if the cursor was killed but once\n            //       that changed to happen in cleanup legitimate errors would not destroy the\n            //       stream. There are change streams test specifically test these cases.\n            if (err.message.match(/operation was interrupted/)) {\n                return this.push(null);\n            }\n            // NOTE: The two above checks on the message of the error will cause a null to be pushed\n            //       to the stream, thus closing the stream before the destroy call happens. This means\n            //       that either of those error messages on a change stream will not get a proper\n            //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n            //       relies on that error event to be emitted to create its new cursor and thus was not\n            //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n            //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n            //       See NODE-4475.\n            return this.destroy(err);\n        })\n            // if either of the above handlers throw\n            .catch(error => {\n            this._readInProgress = false;\n            this.destroy(error);\n        });\n    }\n}\n(0, resource_management_1.configureResourceManagement)(AbstractCursor.prototype);\n/**\n * @internal\n * The cursor timeout context is a wrapper around a timeout context\n * that keeps track of the \"owner\" of the cursor.  For timeout contexts\n * instantiated inside a cursor, the owner will be the cursor.\n *\n * All timeout behavior is exactly the same as the wrapped timeout context's.\n */\nclass CursorTimeoutContext extends timeout_1.TimeoutContext {\n    constructor(timeoutContext, owner) {\n        super();\n        this.timeoutContext = timeoutContext;\n        this.owner = owner;\n    }\n    get serverSelectionTimeout() {\n        return this.timeoutContext.serverSelectionTimeout;\n    }\n    get connectionCheckoutTimeout() {\n        return this.timeoutContext.connectionCheckoutTimeout;\n    }\n    get clearServerSelectionTimeout() {\n        return this.timeoutContext.clearServerSelectionTimeout;\n    }\n    get timeoutForSocketWrite() {\n        return this.timeoutContext.timeoutForSocketWrite;\n    }\n    get timeoutForSocketRead() {\n        return this.timeoutContext.timeoutForSocketRead;\n    }\n    csotEnabled() {\n        return this.timeoutContext.csotEnabled();\n    }\n    refresh() {\n        if (typeof this.owner !== 'symbol')\n            return this.timeoutContext.refresh();\n    }\n    clear() {\n        if (typeof this.owner !== 'symbol')\n            return this.timeoutContext.clear();\n    }\n    get maxTimeMS() {\n        return this.timeoutContext.maxTimeMS;\n    }\n    get timeoutMS() {\n        return this.timeoutContext.csotEnabled() ? this.timeoutContext.timeoutMS : null;\n    }\n    refreshed() {\n        return new CursorTimeoutContext(this.timeoutContext.refreshed(), this.owner);\n    }\n    addMaxTimeMSToCommand(command, options) {\n        this.timeoutContext.addMaxTimeMSToCommand(command, options);\n    }\n    getSocketTimeoutMS() {\n        return this.timeoutContext.getSocketTimeoutMS();\n    }\n}\nexports.CursorTimeoutContext = CursorTimeoutContext;\n//# sourceMappingURL=abstract_cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregationCursor = void 0;\nconst error_1 = require(\"../error\");\nconst explain_1 = require(\"../explain\");\nconst aggregate_1 = require(\"../operations/aggregate\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends explain_1.ExplainableCursor {\n    /** @internal */\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.aggregateOptions = options;\n        const lastStage = this.pipeline[this.pipeline.length - 1];\n        if (this.cursorOptions.timeoutMS != null &&\n            this.cursorOptions.timeoutMode === abstract_cursor_1.CursorTimeoutMode.ITERATION &&\n            (lastStage?.$merge != null || lastStage?.$out != null))\n            throw new error_1.MongoAPIError('Cannot use $out or $merge stage with ITERATION timeoutMode');\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this.aggregateOptions);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this.pipeline, {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const options = {\n            ...this.aggregateOptions,\n            ...this.cursorOptions,\n            session,\n            signal: this.signal\n        };\n        if (options.explain) {\n            try {\n                (0, explain_1.validateExplainTimeoutOptions)(options, explain_1.Explain.fromOptions(options));\n            }\n            catch {\n                throw new error_1.MongoAPIError('timeoutMS cannot be used with explain when explain is specified in aggregateOptions');\n            }\n        }\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, options);\n        const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation, this.timeoutContext);\n        return { server: aggregateOperation.server, session, response };\n    }\n    async explain(verbosity, options) {\n        const { explain, timeout } = this.resolveExplainTimeoutOptions(verbosity, options);\n        return (await (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.aggregateOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            ...timeout,\n            explain: explain ?? true\n        }))).shift(this.deserializationOptions);\n    }\n    addStage(stage) {\n        this.throwIfInitialized();\n        if (this.cursorOptions.timeoutMS != null &&\n            this.cursorOptions.timeoutMode === abstract_cursor_1.CursorTimeoutMode.ITERATION &&\n            (stage.$out != null || stage.$merge != null)) {\n            throw new error_1.MongoAPIError('Cannot use $out or $merge stage with ITERATION timeoutMode');\n        }\n        this.pipeline.push(stage);\n        return this;\n    }\n    group($group) {\n        return this.addStage({ $group });\n    }\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit) {\n        return this.addStage({ $limit });\n    }\n    /** Add a match stage to the aggregation pipeline */\n    match($match) {\n        return this.addStage({ $match });\n    }\n    /** Add an out stage to the aggregation pipeline */\n    out($out) {\n        return this.addStage({ $out });\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project($project) {\n        return this.addStage({ $project });\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup) {\n        return this.addStage({ $lookup });\n    }\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact) {\n        return this.addStage({ $redact });\n    }\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip) {\n        return this.addStage({ $skip });\n    }\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort) {\n        return this.addStage({ $sort });\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind) {\n        return this.addStage({ $unwind });\n    }\n    /** Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear) {\n        return this.addStage({ $geoNear });\n    }\n}\nexports.AggregationCursor = AggregationCursor;\n//# sourceMappingURL=aggregation_cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeStreamCursor = void 0;\nconst change_stream_1 = require(\"../change_stream\");\nconst constants_1 = require(\"../constants\");\nconst aggregate_1 = require(\"../operations/aggregate\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, { ...options, tailable: true, awaitData: true });\n        this.pipeline = pipeline;\n        this.changeStreamCursorOptions = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime ?? null;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        }\n        else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const options = {\n            ...this.changeStreamCursorOptions\n        };\n        for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n            delete options[key];\n        }\n        if (this.resumeToken != null) {\n            if (this.changeStreamCursorOptions.startAfter && !this.hasReceived) {\n                options.startAfter = this.resumeToken;\n            }\n            else {\n                options.resumeAfter = this.resumeToken;\n            }\n        }\n        else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n            options.startAtOperationTime = this.startAtOperationTime;\n        }\n        return options;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        }\n        else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(response) {\n        const { postBatchResumeToken } = response;\n        if (postBatchResumeToken) {\n            this.postBatchResumeToken = postBatchResumeToken;\n            if (response.batchSize === 0) {\n                this.resumeToken = postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.changeStreamCursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(session.client, aggregateOperation, this.timeoutContext);\n        const server = aggregateOperation.server;\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n        if (this.startAtOperationTime == null &&\n            this.changeStreamCursorOptions.resumeAfter == null &&\n            this.changeStreamCursorOptions.startAfter == null &&\n            this.maxWireVersion >= 7) {\n            this.startAtOperationTime = response.operationTime;\n        }\n        this._processBatch(response);\n        this.emit(constants_1.INIT, response);\n        this.emit(constants_1.RESPONSE);\n        return { server, session, response };\n    }\n    async getMore(batchSize) {\n        const response = await super.getMore(batchSize);\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);\n        this._processBatch(response);\n        this.emit(change_stream_1.ChangeStream.MORE, response);\n        this.emit(change_stream_1.ChangeStream.RESPONSE);\n        return response;\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;\n//# sourceMappingURL=change_stream_cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientBulkWriteCursor = void 0;\nconst client_bulk_write_1 = require(\"../operations/client_bulk_write/client_bulk_write\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/**\n * This is the cursor that handles client bulk write operations. Note this is never\n * exposed directly to the user and is always immediately exhausted.\n * @internal\n */\nclass ClientBulkWriteCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, commandBuilder, options = {}) {\n        super(client, new utils_1.MongoDBNamespace('admin', '$cmd'), options);\n        this.commandBuilder = commandBuilder;\n        this.clientBulkWriteOptions = options;\n    }\n    /**\n     * We need a way to get the top level cursor response fields for\n     * generating the bulk write result, so we expose this here.\n     */\n    get response() {\n        if (this.cursorResponse)\n            return this.cursorResponse;\n        return null;\n    }\n    get operations() {\n        return this.commandBuilder.lastOperations;\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this.clientBulkWriteOptions);\n        delete clonedOptions.session;\n        return new ClientBulkWriteCursor(this.client, this.commandBuilder, {\n            ...clonedOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const clientBulkWriteOperation = new client_bulk_write_1.ClientBulkWriteOperation(this.commandBuilder, {\n            ...this.clientBulkWriteOptions,\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, clientBulkWriteOperation, this.timeoutContext);\n        this.cursorResponse = response;\n        return { server: clientBulkWriteOperation.server, session, response };\n    }\n}\nexports.ClientBulkWriteCursor = ClientBulkWriteCursor;\n//# sourceMappingURL=client_bulk_write_cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindCursor = exports.FLAGS = void 0;\nconst responses_1 = require(\"../cmap/wire_protocol/responses\");\nconst error_1 = require(\"../error\");\nconst explain_1 = require(\"../explain\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends explain_1.ExplainableCursor {\n    /** @internal */\n    constructor(client, namespace, filter = {}, options = {}) {\n        super(client, namespace, options);\n        /** @internal */\n        this.numReturned = 0;\n        this.cursorFilter = filter;\n        this.findOptions = options;\n        if (options.sort != null) {\n            this.findOptions.sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this.findOptions);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this.cursorFilter, {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const options = {\n            ...this.findOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            session,\n            signal: this.signal\n        };\n        if (options.explain) {\n            try {\n                (0, explain_1.validateExplainTimeoutOptions)(options, explain_1.Explain.fromOptions(options));\n            }\n            catch {\n                throw new error_1.MongoAPIError('timeoutMS cannot be used with explain when explain is specified in findOptions');\n            }\n        }\n        const findOperation = new find_1.FindOperation(this.namespace, this.cursorFilter, options);\n        const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation, this.timeoutContext);\n        // the response is not a cursor when `explain` is enabled\n        this.numReturned = response.batchSize;\n        return { server: findOperation.server, session, response };\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        const numReturned = this.numReturned;\n        if (numReturned) {\n            // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n            const limit = this.findOptions.limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                try {\n                    await this.close();\n                }\n                catch (error) {\n                    (0, utils_1.squashError)(error);\n                    // this is an optimization for the special case of a limit for a find command to avoid an\n                    // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n                    // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n                    // produces results for the find command.  Once a batch is filled up, it is returned and only\n                    // on the subsequent getMore will the query framework consider the limit, determine the cursor\n                    // is exhausted and return a cursorId of zero.\n                    // instead, if we determine there are no more documents to request from the server, we preemptively\n                    // close the cursor\n                }\n                return responses_1.CursorResponse.emptyGetMore;\n            }\n        }\n        const response = await super.getMore(batchSize);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        this.numReturned = this.numReturned + response.batchSize;\n        return response;\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    async count(options) {\n        (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        return await (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this.cursorFilter, {\n            ...this.findOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    async explain(verbosity, options) {\n        const { explain, timeout } = this.resolveExplainTimeoutOptions(verbosity, options);\n        return (await (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(this.namespace, this.cursorFilter, {\n            ...this.findOptions, // NOTE: order matters here, we may need to refine this\n            ...this.cursorOptions,\n            ...timeout,\n            explain: explain ?? true\n        }))).shift(this.deserializationOptions);\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        this.throwIfInitialized();\n        this.cursorFilter = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        this.throwIfInitialized();\n        this.findOptions.hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        this.throwIfInitialized();\n        this.findOptions.min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        this.throwIfInitialized();\n        this.findOptions.max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        this.throwIfInitialized();\n        this.findOptions.returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        this.throwIfInitialized();\n        this.findOptions.showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        this.throwIfInitialized();\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this.findOptions.comment = value;\n                break;\n            case 'explain':\n                this.findOptions.explain = value;\n                break;\n            case 'hint':\n                this.findOptions.hint = value;\n                break;\n            case 'max':\n                this.findOptions.max = value;\n                break;\n            case 'maxTimeMS':\n                this.findOptions.maxTimeMS = value;\n                break;\n            case 'min':\n                this.findOptions.min = value;\n                break;\n            case 'orderby':\n                this.findOptions.sort = (0, sort_1.formatSort)(value);\n                break;\n            case 'query':\n                this.cursorFilter = value;\n                break;\n            case 'returnKey':\n                this.findOptions.returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this.findOptions.showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        this.throwIfInitialized();\n        this.findOptions.comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        this.throwIfInitialized();\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this.findOptions.maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        this.throwIfInitialized();\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this.findOptions.maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        this.throwIfInitialized();\n        this.findOptions.projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        this.throwIfInitialized();\n        if (this.findOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this.findOptions.sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow = true) {\n        this.throwIfInitialized();\n        if (!this.findOptions.sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this.findOptions.allowDiskUse = false;\n            return this;\n        }\n        this.findOptions.allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        this.throwIfInitialized();\n        this.findOptions.collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        this.throwIfInitialized();\n        if (this.findOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this.findOptions.limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        this.throwIfInitialized();\n        if (this.findOptions.tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this.findOptions.skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=find_cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCollectionsCursor = void 0;\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst list_collections_1 = require(\"../operations/list_collections\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options) {\n        super(db.client, db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session,\n            signal: this.signal\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation, this.timeoutContext);\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\n//# sourceMappingURL=list_collections_cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst indexes_1 = require(\"../operations/indexes\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @public */\nclass ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(collection, options) {\n        super(collection.client, collection.s.namespace, options);\n        this.parent = collection;\n        this.options = options;\n    }\n    clone() {\n        return new ListIndexesCursor(this.parent, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new indexes_1.ListIndexesOperation(this.parent, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation, this.timeoutContext);\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListIndexesCursor = ListIndexesCursor;\n//# sourceMappingURL=list_indexes_cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListSearchIndexesCursor = void 0;\nconst aggregation_cursor_1 = require(\"./aggregation_cursor\");\n/** @public */\nclass ListSearchIndexesCursor extends aggregation_cursor_1.AggregationCursor {\n    /** @internal */\n    constructor({ fullNamespace: ns, client }, name, options = {}) {\n        const pipeline = name == null ? [{ $listSearchIndexes: {} }] : [{ $listSearchIndexes: { name } }];\n        super(client, ns, pipeline, options);\n    }\n}\nexports.ListSearchIndexesCursor = ListSearchIndexesCursor;\n//# sourceMappingURL=list_search_indexes_cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RunCommandCursor = void 0;\nconst responses_1 = require(\"../cmap/wire_protocol/responses\");\nconst error_1 = require(\"../error\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst get_more_1 = require(\"../operations/get_more\");\nconst run_command_1 = require(\"../operations/run_command\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @public */\nclass RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */\n    setComment(comment) {\n        this.getMoreOptions.comment = comment;\n        return this;\n    }\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */\n    setMaxTimeMS(maxTimeMS) {\n        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n        return this;\n    }\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param batchSize - the number documents to return in the `nextBatch`\n     */\n    setBatchSize(batchSize) {\n        this.getMoreOptions.batchSize = batchSize;\n        return this;\n    }\n    /** Unsupported for RunCommandCursor */\n    clone() {\n        throw new error_1.MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');\n    }\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n    withReadConcern(_) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support readConcern it must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n    addCursorFlag(_, __) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support cursor flags, they must be attached to the command being run');\n    }\n    /**\n     * Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document\n     */\n    maxTimeMS(_) {\n        throw new error_1.MongoAPIError('maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()');\n    }\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n    batchSize(_) {\n        throw new error_1.MongoAPIError('batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()');\n    }\n    /** @internal */\n    constructor(db, command, options = {}) {\n        super(db.client, (0, utils_1.ns)(db.namespace), options);\n        this.getMoreOptions = {};\n        this.db = db;\n        this.command = Object.freeze({ ...command });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n            ...this.cursorOptions,\n            session: session,\n            readPreference: this.cursorOptions.readPreference,\n            responseType: responses_1.CursorResponse\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, operation, this.timeoutContext);\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */\n    async getMore(_batchSize) {\n        if (!this.session) {\n            throw new error_1.MongoRuntimeError('Unexpected null session. A cursor creating command should have set this');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n            ...this.cursorOptions,\n            session: this.session,\n            ...this.getMoreOptions\n        });\n        return await (0, execute_operation_1.executeOperation)(this.client, getMoreOperation, this.timeoutContext);\n    }\n}\nexports.RunCommandCursor = RunCommandCursor;\n//# sourceMappingURL=run_command_cursor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Db = void 0;\nconst admin_1 = require(\"./admin\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst collection_1 = require(\"./collection\");\nconst CONSTANTS = require(\"./constants\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nconst run_command_cursor_1 = require(\"./cursor/run_command_cursor\");\nconst error_1 = require(\"./error\");\nconst collections_1 = require(\"./operations/collections\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst drop_1 = require(\"./operations/drop\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst stats_1 = require(\"./operations/stats\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'useBigInt64',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'enableUtf8Validation',\n    'promoteValues',\n    'compression',\n    'retryWrites',\n    'timeoutMS'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance.\n     *\n     * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction.\n     */\n    constructor(client, databaseName, options) {\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure there are no dots in database name\n        if (typeof databaseName === 'string' && databaseName.includes('.')) {\n            throw new error_1.MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n        }\n        // Internal state of the db object\n        this.s = {\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n        this.client = client;\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk() {\n        return this.s.readPreference?.preference !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    get timeoutMS() {\n        return this.s.options?.timeoutMS;\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    async createCollection(name, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return await (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, (0, utils_1.resolveOptions)(undefined, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            timeoutMS: options?.timeoutMS ?? this.timeoutMS,\n            session: options?.session,\n            readPreference: options?.readPreference,\n            signal: options?.signal\n        })));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database.\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    async stats(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return await (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, (0, utils_1.resolveOptions)(undefined, {\n            ...options,\n            new_collection: true,\n            readPreference: read_preference_1.ReadPreference.primary\n        })));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    async dropCollection(name, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropDatabase(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    async collections(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    async createIndex(name, indexSpec, options) {\n        const indexes = await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexSpecification(this, name, indexSpec, options));\n        return indexes[0];\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    async setProfilingLevel(level, options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    async profilingLevel(options) {\n        return await (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async indexInformation(name, options) {\n        return await this.collection(name).indexInformation((0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @remarks\n     * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n     * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n     * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n     * event.\n     *\n     * Note that if a change stream is consistently timing out when watching a collection, database or\n     * client that is being changed, then this may be due to the server timing out before it can finish\n     * processing the existing oplog. To address this, restart the change stream with a higher\n     * `timeoutMS`.\n     *\n     * If the change stream times out the initial aggregate operation to establish the change stream on\n     * the server, then the client will close the change stream. If the getMore calls to the server\n     * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n     * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n     * emitter mode.\n     *\n     * To determine whether or not the change stream is still open following a timeout, check the\n     * {@link ChangeStream.closed} getter.\n     *\n     * @example\n     * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n     * The next call can just be retried after this succeeds.\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * try {\n     *     await changeStream.next();\n     * } catch (e) {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *       await changeStream.next();\n     *     }\n     *     throw e;\n     * }\n     * ```\n     *\n     * @example\n     * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n     * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n     * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n     * this will automatically continue emitting change events once the resume attempt completes.\n     *\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * changeStream.on('change', console.log);\n     * changeStream.on('error', e => {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *         // do nothing\n     *     } else {\n     *         changeStream.close();\n     *     }\n     * });\n     * ```\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n    runCursorCommand(command, options) {\n        return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n}\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n//# sourceMappingURL=db.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.aws4 = void 0;\nexports.getKerberos = getKerberos;\nexports.getZstdLibrary = getZstdLibrary;\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nexports.getGcpMetadata = getGcpMetadata;\nexports.getSnappy = getSnappy;\nexports.getSocks = getSocks;\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;\nconst error_1 = require(\"./error\");\nfunction makeErrorModule(error) {\n    const props = error ? { kModuleError: error } : {};\n    return new Proxy(props, {\n        get: (_, key) => {\n            if (key === 'kModuleError') {\n                return error;\n            }\n            throw error;\n        },\n        set: () => {\n            throw error;\n        }\n    });\n}\nfunction getKerberos() {\n    let kerberos;\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        kerberos = require('kerberos');\n    }\n    catch (error) {\n        kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication', { cause: error, dependencyName: 'kerberos' }));\n    }\n    return kerberos;\n}\nfunction getZstdLibrary() {\n    let ZStandard;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        ZStandard = require('@mongodb-js/zstd');\n    }\n    catch (error) {\n        ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression', { cause: error, dependencyName: 'zstd' }));\n    }\n    return ZStandard;\n}\nfunction getAwsCredentialProvider() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const credentialProvider = require('@aws-sdk/credential-providers');\n        return credentialProvider;\n    }\n    catch (error) {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@aws-sdk/credential-providers` not found.' +\n            ' Please install it to enable getting aws credentials via the official sdk.', { cause: error, dependencyName: '@aws-sdk/credential-providers' }));\n    }\n}\nfunction getGcpMetadata() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const credentialProvider = require('gcp-metadata');\n        return credentialProvider;\n    }\n    catch (error) {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `gcp-metadata` not found.' +\n            ' Please install it to enable getting gcp credentials via the official sdk.', { cause: error, dependencyName: 'gcp-metadata' }));\n    }\n}\nfunction getSnappy() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const value = require('snappy');\n        return value;\n    }\n    catch (error) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression', { cause: error, dependencyName: 'snappy' });\n        return { kModuleError };\n    }\n}\nfunction getSocks() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const value = require('socks');\n        return value;\n    }\n    catch (error) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy', { cause: error, dependencyName: 'socks' });\n        return { kModuleError };\n    }\n}\nexports.aws4 = loadAws4();\nfunction loadAws4() {\n    let aws4;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        aws4 = require('aws4');\n    }\n    catch (error) {\n        aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication', { cause: error, dependencyName: 'aws4' }));\n    }\n    return aws4;\n}\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n    let mongodbClientEncryption = null;\n    try {\n        // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n        // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n        // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        mongodbClientEncryption = require('mongodb-client-encryption');\n    }\n    catch (error) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.', { cause: error, dependencyName: 'mongodb-client-encryption' });\n        return { kModuleError };\n    }\n    return mongodbClientEncryption;\n}\n//# sourceMappingURL=deps.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encrypter = void 0;\nconst auto_encrypter_1 = require(\"./client-side-encryption/auto_encrypter\");\nconst constants_1 = require(\"./constants\");\nconst deps_1 = require(\"./deps\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this.internalClient = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        let internalClient = this.internalClient;\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this.internalClient = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        const internalClient = this.internalClient;\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    async close(client) {\n        let error;\n        try {\n            await this.autoEncrypter.close();\n        }\n        catch (autoEncrypterError) {\n            error = autoEncrypterError;\n        }\n        const internalClient = this.internalClient;\n        if (internalClient != null && client !== internalClient) {\n            return await internalClient.close();\n        }\n        if (error != null) {\n            throw error;\n        }\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in mongodbClientEncryption) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project', {\n                cause: mongodbClientEncryption['kModuleError'],\n                dependencyName: 'mongodb-client-encryption'\n            });\n        }\n    }\n}\nexports.Encrypter = Encrypter;\n//# sourceMappingURL=encrypter.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExplainableCursor = exports.Explain = exports.ExplainVerbosity = void 0;\nexports.validateExplainTimeoutOptions = validateExplainTimeoutOptions;\nexports.decorateWithExplain = decorateWithExplain;\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n    queryPlanner: 'queryPlanner',\n    queryPlannerExtended: 'queryPlannerExtended',\n    executionStats: 'executionStats',\n    allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n    constructor(verbosity, maxTimeMS) {\n        if (typeof verbosity === 'boolean') {\n            this.verbosity = verbosity\n                ? exports.ExplainVerbosity.allPlansExecution\n                : exports.ExplainVerbosity.queryPlanner;\n        }\n        else {\n            this.verbosity = verbosity;\n        }\n        this.maxTimeMS = maxTimeMS;\n    }\n    static fromOptions({ explain } = {}) {\n        if (explain == null)\n            return;\n        if (typeof explain === 'boolean' || typeof explain === 'string') {\n            return new Explain(explain);\n        }\n        const { verbosity, maxTimeMS } = explain;\n        return new Explain(verbosity, maxTimeMS);\n    }\n}\nexports.Explain = Explain;\nfunction validateExplainTimeoutOptions(options, explain) {\n    const { maxTimeMS, timeoutMS } = options;\n    if (timeoutMS != null && (maxTimeMS != null || explain?.maxTimeMS != null)) {\n        throw new error_1.MongoAPIError('Cannot use maxTimeMS with timeoutMS for explain commands.');\n    }\n}\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n    const { verbosity, maxTimeMS } = explain;\n    const baseCommand = { explain: command, verbosity };\n    if (typeof maxTimeMS === 'number') {\n        baseCommand.maxTimeMS = maxTimeMS;\n    }\n    return baseCommand;\n}\n/**\n * @public\n *\n * A base class for any cursors that have `explain()` methods.\n */\nclass ExplainableCursor extends abstract_cursor_1.AbstractCursor {\n    resolveExplainTimeoutOptions(verbosity, options) {\n        let explain;\n        let timeout;\n        if (verbosity == null && options == null) {\n            explain = undefined;\n            timeout = undefined;\n        }\n        else if (verbosity != null && options == null) {\n            explain =\n                typeof verbosity !== 'object'\n                    ? verbosity\n                    : 'verbosity' in verbosity\n                        ? verbosity\n                        : undefined;\n            timeout = typeof verbosity === 'object' && 'timeoutMS' in verbosity ? verbosity : undefined;\n        }\n        else {\n            // @ts-expect-error TS isn't smart enough to determine that if both options are provided, the first is explain options\n            explain = verbosity;\n            timeout = options;\n        }\n        return { timeout, explain };\n    }\n}\nexports.ExplainableCursor = ExplainableCursor;\n//# sourceMappingURL=explain.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = require(\"stream\");\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\nconst error_1 = require(\"../error\");\nconst timeout_1 = require(\"../timeout\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */\n    constructor(chunks, files, readPreference, filter, options) {\n        super({ emitClose: true });\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference,\n            timeoutContext: options?.timeoutMS != null\n                ? new timeout_1.CSOTTimeoutContext({ timeoutMS: options.timeoutMS, serverSelectionTimeoutMS: 0 })\n                : undefined\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */\n    _read() {\n        if (this.destroyed)\n            return;\n        waitForFile(this, () => doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    async abort() {\n        this.push(null);\n        this.destroy();\n        const remainingTimeMS = this.s.timeoutContext?.getRemainingTimeMSOrThrow();\n        await this.s.cursor?.close({ timeoutMS: remainingTimeMS });\n    }\n}\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed)\n        return;\n    if (!stream.s.cursor)\n        return;\n    if (!stream.s.file)\n        return;\n    const handleReadResult = (doc) => {\n        if (stream.destroyed)\n            return;\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(undefined, error => stream.destroy(error));\n            return;\n        }\n        if (!stream.s.file)\n            return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        }\n        else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then(handleReadResult, error => {\n        if (stream.destroyed)\n            return;\n        stream.destroy(error);\n    });\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = (doc) => {\n        if (stream.destroyed)\n            return;\n        if (!doc) {\n            const identifier = stream.s.filter._id\n                ? stream.s.filter._id.toString()\n                : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n            return stream.destroy(err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.destroy();\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        const filter = { files_id: doc._id };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter['n'] = { $gte: skip };\n            }\n        }\n        let remainingTimeMS;\n        try {\n            remainingTimeMS = stream.s.timeoutContext?.getRemainingTimeMSOrThrow(`Download timed out after ${stream.s.timeoutContext?.timeoutMS}ms`);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        stream.s.cursor = stream.s.chunks\n            .find(filter, {\n            timeoutMode: stream.s.options.timeoutMS != null ? abstract_cursor_1.CursorTimeoutMode.LIFETIME : undefined,\n            timeoutMS: remainingTimeMS\n        })\n            .sort({ n: 1 });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    let remainingTimeMS;\n    try {\n        remainingTimeMS = stream.s.timeoutContext?.getRemainingTimeMSOrThrow(`Download timed out after ${stream.s.timeoutContext?.timeoutMS}ms`);\n    }\n    catch (error) {\n        if (!stream.destroyed)\n            stream.destroy(error);\n        return;\n    }\n    findOneOptions.timeoutMS = remainingTimeMS;\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then(handleReadResult, error => {\n        if (stream.destroyed)\n            return;\n        stream.destroy(error);\n    });\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once('file', () => {\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}\n//# sourceMappingURL=download.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridFSBucket = void 0;\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst download_1 = require(\"./download\");\nconst upload_1 = require(\"./upload\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: 'fs',\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.setMaxListeners(0);\n        const privateOptions = (0, utils_1.resolveOptions)(db, {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        });\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n            _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, {\n            timeoutMS: this.s.options.timeoutMS,\n            ...options\n        });\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, {\n            timeoutMS: this.s.options.timeoutMS,\n            ...options,\n            id\n        });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, { timeoutMS: this.s.options.timeoutMS, ...options });\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n    async delete(id, options) {\n        const { timeoutMS } = (0, utils_1.resolveOptions)(this.s.db, options);\n        let timeoutContext = undefined;\n        if (timeoutMS) {\n            timeoutContext = new timeout_1.CSOTTimeoutContext({\n                timeoutMS,\n                serverSelectionTimeoutMS: this.s.db.client.s.options.serverSelectionTimeoutMS\n            });\n        }\n        const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id }, { timeoutMS: timeoutContext?.remainingTimeMS });\n        const remainingTimeMS = timeoutContext?.remainingTimeMS;\n        if (remainingTimeMS != null && remainingTimeMS <= 0)\n            throw new error_1.MongoOperationTimeoutError(`Timed out after ${timeoutMS}ms`);\n        // Delete orphaned chunks before returning FileNotFound\n        await this.s._chunksCollection.deleteMany({ files_id: id }, { timeoutMS: remainingTimeMS });\n        if (deletedCount === 0) {\n            // TODO(NODE-3483): Replace with more appropriate error\n            // Consider creating new error MongoGridFSFileNotFoundError\n            throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n        }\n    }\n    /** Convenience wrapper around find on the files collection */\n    find(filter = {}, options = {}) {\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(filename, options) {\n        let sort = { uploadDate: -1 };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = { uploadDate: 1 };\n                skip = options.revision;\n            }\n            else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename }, { timeoutMS: this.s.options.timeoutMS, ...options, sort, skip });\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n    async rename(id, filename, options) {\n        const filter = { _id: id };\n        const update = { $set: { filename } };\n        const { matchedCount } = await this.s._filesCollection.updateOne(filter, update, options);\n        if (matchedCount === 0) {\n            throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n        }\n    }\n    /** Removes this bucket's files collection, followed by its chunks collection. */\n    async drop(options) {\n        const { timeoutMS } = (0, utils_1.resolveOptions)(this.s.db, options);\n        let timeoutContext = undefined;\n        if (timeoutMS) {\n            timeoutContext = new timeout_1.CSOTTimeoutContext({\n                timeoutMS,\n                serverSelectionTimeoutMS: this.s.db.client.s.options.serverSelectionTimeoutMS\n            });\n        }\n        if (timeoutContext) {\n            await this.s._filesCollection.drop({ timeoutMS: timeoutContext.remainingTimeMS });\n            const remainingTimeMS = timeoutContext.getRemainingTimeMSOrThrow(`Timed out after ${timeoutMS}ms`);\n            await this.s._chunksCollection.drop({ timeoutMS: remainingTimeMS });\n        }\n        else {\n            await this.s._filesCollection.drop();\n            await this.s._chunksCollection.drop();\n        }\n    }\n}\nexports.GridFSBucket = GridFSBucket;\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = require(\"stream\");\nconst bson_1 = require(\"../bson\");\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\nconst error_1 = require(\"../error\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"./../write_concern\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n    /**\n     * @param bucket - Handle for this stream's corresponding bucket\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     * @internal\n     */\n    constructor(bucket, filename, options) {\n        super();\n        /**\n         * The document containing information about the inserted file.\n         * This property is defined _after_ the finish event has been emitted.\n         * It will remain `null` if an error occurs.\n         *\n         * @example\n         * ```ts\n         * fs.createReadStream('file.txt')\n         *   .pipe(bucket.openUploadStream('file.txt'))\n         *   .on('finish', function () {\n         *     console.log(this.gridFSFile)\n         *   })\n         * ```\n         */\n        this.gridFSFile = null;\n        options = options ?? {};\n        this.bucket = bucket;\n        this.chunks = bucket.s._chunksCollection;\n        this.filename = filename;\n        this.files = bucket.s._filesCollection;\n        this.options = options;\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n        // Signals the write is all done\n        this.done = false;\n        this.id = options.id ? options.id : new bson_1.ObjectId();\n        // properly inherit the default chunksize from parent\n        this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n        this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n        this.length = 0;\n        this.n = 0;\n        this.pos = 0;\n        this.state = {\n            streamEnd: false,\n            outstandingRequests: 0,\n            errored: false,\n            aborted: false\n        };\n        if (options.timeoutMS != null)\n            this.timeoutContext = new timeout_1.CSOTTimeoutContext({\n                timeoutMS: options.timeoutMS,\n                serverSelectionTimeoutMS: (0, utils_1.resolveTimeoutOptions)(this.bucket.s.db.client, {})\n                    .serverSelectionTimeoutMS\n            });\n    }\n    /**\n     * @internal\n     *\n     * The stream is considered constructed when the indexes are done being created\n     */\n    _construct(callback) {\n        if (!this.bucket.s.calledOpenUploadStream) {\n            this.bucket.s.calledOpenUploadStream = true;\n            checkIndexes(this).then(() => {\n                this.bucket.s.checkedIndexes = true;\n                this.bucket.emit('index');\n                callback();\n            }, error => {\n                if (error instanceof error_1.MongoOperationTimeoutError) {\n                    return handleError(this, error, callback);\n                }\n                (0, utils_1.squashError)(error);\n                callback();\n            });\n        }\n        else {\n            return process.nextTick(callback);\n        }\n    }\n    /**\n     * @internal\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     */\n    _write(chunk, encoding, callback) {\n        doWrite(this, chunk, encoding, callback);\n    }\n    /** @internal */\n    _final(callback) {\n        if (this.state.streamEnd) {\n            return process.nextTick(callback);\n        }\n        this.state.streamEnd = true;\n        writeRemnant(this, callback);\n    }\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */\n    async abort() {\n        if (this.state.streamEnd) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n        }\n        if (this.state.aborted) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n        }\n        this.state.aborted = true;\n        const remainingTimeMS = this.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${this.timeoutContext?.timeoutMS}ms`);\n        await this.chunks.deleteMany({ files_id: this.id }, { timeoutMS: remainingTimeMS });\n    }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n    if (stream.state.errored) {\n        process.nextTick(callback);\n        return;\n    }\n    stream.state.errored = true;\n    process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n    return {\n        _id: new bson_1.ObjectId(),\n        files_id: filesId,\n        n,\n        data\n    };\n}\nasync function checkChunksIndex(stream) {\n    const index = { files_id: 1, n: 1 };\n    let remainingTimeMS;\n    remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n    let indexes;\n    try {\n        indexes = await stream.chunks\n            .listIndexes({\n            timeoutMode: remainingTimeMS != null ? abstract_cursor_1.CursorTimeoutMode.LIFETIME : undefined,\n            timeoutMS: remainingTimeMS\n        })\n            .toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasChunksIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasChunksIndex) {\n        remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n        await stream.chunks.createIndex(index, {\n            ...stream.writeConcern,\n            background: true,\n            unique: true,\n            timeoutMS: remainingTimeMS\n        });\n    }\n}\nfunction checkDone(stream, callback) {\n    if (stream.done) {\n        return process.nextTick(callback);\n    }\n    if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n        // Set done so we do not trigger duplicate createFilesDoc\n        stream.done = true;\n        // Create a new files doc\n        const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n        if (isAborted(stream, callback)) {\n            return;\n        }\n        const remainingTimeMS = stream.timeoutContext?.remainingTimeMS;\n        if (remainingTimeMS != null && remainingTimeMS <= 0) {\n            return handleError(stream, new error_1.MongoOperationTimeoutError(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`), callback);\n        }\n        stream.files\n            .insertOne(gridFSFile, { writeConcern: stream.writeConcern, timeoutMS: remainingTimeMS })\n            .then(() => {\n            stream.gridFSFile = gridFSFile;\n            callback();\n        }, error => {\n            return handleError(stream, error, callback);\n        });\n        return;\n    }\n    process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n    let remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n    const doc = await stream.files.findOne({}, {\n        projection: { _id: 1 },\n        timeoutMS: remainingTimeMS\n    });\n    if (doc != null) {\n        // If at least one document exists assume the collection has the required index\n        return;\n    }\n    const index = { filename: 1, uploadDate: 1 };\n    let indexes;\n    remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n    const listIndexesOptions = {\n        timeoutMode: remainingTimeMS != null ? abstract_cursor_1.CursorTimeoutMode.LIFETIME : undefined,\n        timeoutMS: remainingTimeMS\n    };\n    try {\n        indexes = await stream.files.listIndexes(listIndexesOptions).toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasFileIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasFileIndex) {\n        remainingTimeMS = stream.timeoutContext?.getRemainingTimeMSOrThrow(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`);\n        await stream.files.createIndex(index, { background: false, timeoutMS: remainingTimeMS });\n    }\n    await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n    const ret = {\n        _id,\n        length,\n        chunkSize,\n        uploadDate: new Date(),\n        filename\n    };\n    if (contentType) {\n        ret.contentType = contentType;\n    }\n    if (aliases) {\n        ret.aliases = aliases;\n    }\n    if (metadata) {\n        ret.metadata = metadata;\n    }\n    return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    stream.length += inputBuf.length;\n    // Input is small enough to fit in our buffer\n    if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n        inputBuf.copy(stream.bufToStore, stream.pos);\n        stream.pos += inputBuf.length;\n        process.nextTick(callback);\n        return;\n    }\n    // Otherwise, buffer is too big for current chunk, so we need to flush\n    // to MongoDB.\n    let inputBufRemaining = inputBuf.length;\n    let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n    let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n    let outstandingRequests = 0;\n    while (inputBufRemaining > 0) {\n        const inputBufPos = inputBuf.length - inputBufRemaining;\n        inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n        stream.pos += numToCopy;\n        spaceRemaining -= numToCopy;\n        let doc;\n        if (spaceRemaining === 0) {\n            doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n            const remainingTimeMS = stream.timeoutContext?.remainingTimeMS;\n            if (remainingTimeMS != null && remainingTimeMS <= 0) {\n                return handleError(stream, new error_1.MongoOperationTimeoutError(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`), callback);\n            }\n            ++stream.state.outstandingRequests;\n            ++outstandingRequests;\n            if (isAborted(stream, callback)) {\n                return;\n            }\n            stream.chunks\n                .insertOne(doc, { writeConcern: stream.writeConcern, timeoutMS: remainingTimeMS })\n                .then(() => {\n                --stream.state.outstandingRequests;\n                --outstandingRequests;\n                if (!outstandingRequests) {\n                    checkDone(stream, callback);\n                }\n            }, error => {\n                return handleError(stream, error, callback);\n            });\n            spaceRemaining = stream.chunkSizeBytes;\n            stream.pos = 0;\n            ++stream.n;\n        }\n        inputBufRemaining -= numToCopy;\n        numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n    }\n}\nfunction writeRemnant(stream, callback) {\n    // Buffer is empty, so don't bother to insert\n    if (stream.pos === 0) {\n        return checkDone(stream, callback);\n    }\n    // Create a new buffer to make sure the buffer isn't bigger than it needs\n    // to be.\n    const remnant = Buffer.alloc(stream.pos);\n    stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n    const doc = createChunkDoc(stream.id, stream.n, remnant);\n    // If the stream was aborted, do not write remnant\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const remainingTimeMS = stream.timeoutContext?.remainingTimeMS;\n    if (remainingTimeMS != null && remainingTimeMS <= 0) {\n        return handleError(stream, new error_1.MongoOperationTimeoutError(`Upload timed out after ${stream.timeoutContext?.timeoutMS}ms`), callback);\n    }\n    ++stream.state.outstandingRequests;\n    stream.chunks\n        .insertOne(doc, { writeConcern: stream.writeConcern, timeoutMS: remainingTimeMS })\n        .then(() => {\n        --stream.state.outstandingRequests;\n        checkDone(stream, callback);\n    }, error => {\n        return handleError(stream, error, callback);\n    });\n}\nfunction isAborted(stream, callback) {\n    if (stream.state.aborted) {\n        process.nextTick(callback, new error_1.MongoAPIError('Stream has been aborted'));\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=upload.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoServerClosedError = exports.MongoRuntimeError = exports.MongoParseError = exports.MongoOperationTimeoutError = exports.MongoOIDCError = exports.MongoNotConnectedError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoKerberosError = exports.MongoInvalidArgumentError = exports.MongoGridFSStreamError = exports.MongoGridFSChunkError = exports.MongoGCPError = exports.MongoExpiredSessionError = exports.MongoError = exports.MongoDriverError = exports.MongoDecompressionError = exports.MongoCursorInUseError = exports.MongoCursorExhaustedError = exports.MongoCompatibilityError = exports.MongoClientClosedError = exports.MongoClientBulkWriteExecutionError = exports.MongoClientBulkWriteError = exports.MongoClientBulkWriteCursorError = exports.MongoChangeStreamError = exports.MongoBatchReExecutionError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoAPIError = exports.ChangeStreamCursor = exports.ClientEncryption = exports.MongoBulkWriteError = exports.UUID = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.BSON = void 0;\nexports.CommandFailedEvent = exports.WriteConcern = exports.ReadPreference = exports.ReadConcern = exports.TopologyType = exports.ServerType = exports.ReadPreferenceMode = exports.ReadConcernLevel = exports.ProfilingLevel = exports.ReturnDocument = exports.SeverityLevel = exports.MongoLoggableComponent = exports.ServerApiVersion = exports.ExplainVerbosity = exports.MongoErrorLabel = exports.CursorTimeoutMode = exports.CURSOR_FLAGS = exports.Compressor = exports.AuthMechanism = exports.GSSAPICanonicalizationValue = exports.AutoEncryptionLoggerLevel = exports.BatchType = exports.UnorderedBulkOperation = exports.OrderedBulkOperation = exports.MongoClient = exports.ListIndexesCursor = exports.ListCollectionsCursor = exports.GridFSBucketWriteStream = exports.GridFSBucketReadStream = exports.GridFSBucket = exports.FindCursor = exports.ExplainableCursor = exports.Db = exports.Collection = exports.ClientSession = exports.ChangeStream = exports.CancellationToken = exports.AggregationCursor = exports.Admin = exports.AbstractCursor = exports.configureExplicitResourceManagement = exports.MongoWriteConcernError = exports.MongoUnexpectedServerResponseError = exports.MongoTransactionError = exports.MongoTopologyClosedError = exports.MongoTailableCursorError = exports.MongoSystemError = exports.MongoStalePrimaryError = exports.MongoServerSelectionError = exports.MongoServerError = void 0;\nexports.MongoClientAuthProviders = exports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptAzureKMSRequestError = exports.SrvPollingEvent = exports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.TopologyClosedEvent = exports.ServerOpeningEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.ServerHeartbeatFailedEvent = exports.ServerDescriptionChangedEvent = exports.ServerClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolMonitoringEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolClearedEvent = exports.ConnectionCreatedEvent = exports.ConnectionClosedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckedInEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst admin_1 = require(\"./admin\");\nObject.defineProperty(exports, \"Admin\", { enumerable: true, get: function () { return admin_1.Admin; } });\nconst ordered_1 = require(\"./bulk/ordered\");\nObject.defineProperty(exports, \"OrderedBulkOperation\", { enumerable: true, get: function () { return ordered_1.OrderedBulkOperation; } });\nconst unordered_1 = require(\"./bulk/unordered\");\nObject.defineProperty(exports, \"UnorderedBulkOperation\", { enumerable: true, get: function () { return unordered_1.UnorderedBulkOperation; } });\nconst change_stream_1 = require(\"./change_stream\");\nObject.defineProperty(exports, \"ChangeStream\", { enumerable: true, get: function () { return change_stream_1.ChangeStream; } });\nconst collection_1 = require(\"./collection\");\nObject.defineProperty(exports, \"Collection\", { enumerable: true, get: function () { return collection_1.Collection; } });\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nObject.defineProperty(exports, \"AbstractCursor\", { enumerable: true, get: function () { return abstract_cursor_1.AbstractCursor; } });\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nObject.defineProperty(exports, \"AggregationCursor\", { enumerable: true, get: function () { return aggregation_cursor_1.AggregationCursor; } });\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\nObject.defineProperty(exports, \"FindCursor\", { enumerable: true, get: function () { return find_cursor_1.FindCursor; } });\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nObject.defineProperty(exports, \"ListCollectionsCursor\", { enumerable: true, get: function () { return list_collections_cursor_1.ListCollectionsCursor; } });\nconst list_indexes_cursor_1 = require(\"./cursor/list_indexes_cursor\");\nObject.defineProperty(exports, \"ListIndexesCursor\", { enumerable: true, get: function () { return list_indexes_cursor_1.ListIndexesCursor; } });\nconst db_1 = require(\"./db\");\nObject.defineProperty(exports, \"Db\", { enumerable: true, get: function () { return db_1.Db; } });\nconst explain_1 = require(\"./explain\");\nObject.defineProperty(exports, \"ExplainableCursor\", { enumerable: true, get: function () { return explain_1.ExplainableCursor; } });\nconst gridfs_1 = require(\"./gridfs\");\nObject.defineProperty(exports, \"GridFSBucket\", { enumerable: true, get: function () { return gridfs_1.GridFSBucket; } });\nconst download_1 = require(\"./gridfs/download\");\nObject.defineProperty(exports, \"GridFSBucketReadStream\", { enumerable: true, get: function () { return download_1.GridFSBucketReadStream; } });\nconst upload_1 = require(\"./gridfs/upload\");\nObject.defineProperty(exports, \"GridFSBucketWriteStream\", { enumerable: true, get: function () { return upload_1.GridFSBucketWriteStream; } });\nconst mongo_client_1 = require(\"./mongo_client\");\nObject.defineProperty(exports, \"MongoClient\", { enumerable: true, get: function () { return mongo_client_1.MongoClient; } });\nconst mongo_types_1 = require(\"./mongo_types\");\nObject.defineProperty(exports, \"CancellationToken\", { enumerable: true, get: function () { return mongo_types_1.CancellationToken; } });\nconst sessions_1 = require(\"./sessions\");\nObject.defineProperty(exports, \"ClientSession\", { enumerable: true, get: function () { return sessions_1.ClientSession; } });\n/** @public */\nvar bson_1 = require(\"./bson\");\nObject.defineProperty(exports, \"BSON\", { enumerable: true, get: function () { return bson_1.BSON; } });\nvar bson_2 = require(\"./bson\");\nObject.defineProperty(exports, \"Binary\", { enumerable: true, get: function () { return bson_2.Binary; } });\nObject.defineProperty(exports, \"BSONRegExp\", { enumerable: true, get: function () { return bson_2.BSONRegExp; } });\nObject.defineProperty(exports, \"BSONSymbol\", { enumerable: true, get: function () { return bson_2.BSONSymbol; } });\nObject.defineProperty(exports, \"BSONType\", { enumerable: true, get: function () { return bson_2.BSONType; } });\nObject.defineProperty(exports, \"Code\", { enumerable: true, get: function () { return bson_2.Code; } });\nObject.defineProperty(exports, \"DBRef\", { enumerable: true, get: function () { return bson_2.DBRef; } });\nObject.defineProperty(exports, \"Decimal128\", { enumerable: true, get: function () { return bson_2.Decimal128; } });\nObject.defineProperty(exports, \"Double\", { enumerable: true, get: function () { return bson_2.Double; } });\nObject.defineProperty(exports, \"Int32\", { enumerable: true, get: function () { return bson_2.Int32; } });\nObject.defineProperty(exports, \"Long\", { enumerable: true, get: function () { return bson_2.Long; } });\nObject.defineProperty(exports, \"MaxKey\", { enumerable: true, get: function () { return bson_2.MaxKey; } });\nObject.defineProperty(exports, \"MinKey\", { enumerable: true, get: function () { return bson_2.MinKey; } });\nObject.defineProperty(exports, \"ObjectId\", { enumerable: true, get: function () { return bson_2.ObjectId; } });\nObject.defineProperty(exports, \"Timestamp\", { enumerable: true, get: function () { return bson_2.Timestamp; } });\nObject.defineProperty(exports, \"UUID\", { enumerable: true, get: function () { return bson_2.UUID; } });\nvar common_1 = require(\"./bulk/common\");\nObject.defineProperty(exports, \"MongoBulkWriteError\", { enumerable: true, get: function () { return common_1.MongoBulkWriteError; } });\nvar client_encryption_1 = require(\"./client-side-encryption/client_encryption\");\nObject.defineProperty(exports, \"ClientEncryption\", { enumerable: true, get: function () { return client_encryption_1.ClientEncryption; } });\nvar change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nObject.defineProperty(exports, \"ChangeStreamCursor\", { enumerable: true, get: function () { return change_stream_cursor_1.ChangeStreamCursor; } });\nvar error_1 = require(\"./error\");\nObject.defineProperty(exports, \"MongoAPIError\", { enumerable: true, get: function () { return error_1.MongoAPIError; } });\nObject.defineProperty(exports, \"MongoAWSError\", { enumerable: true, get: function () { return error_1.MongoAWSError; } });\nObject.defineProperty(exports, \"MongoAzureError\", { enumerable: true, get: function () { return error_1.MongoAzureError; } });\nObject.defineProperty(exports, \"MongoBatchReExecutionError\", { enumerable: true, get: function () { return error_1.MongoBatchReExecutionError; } });\nObject.defineProperty(exports, \"MongoChangeStreamError\", { enumerable: true, get: function () { return error_1.MongoChangeStreamError; } });\nObject.defineProperty(exports, \"MongoClientBulkWriteCursorError\", { enumerable: true, get: function () { return error_1.MongoClientBulkWriteCursorError; } });\nObject.defineProperty(exports, \"MongoClientBulkWriteError\", { enumerable: true, get: function () { return error_1.MongoClientBulkWriteError; } });\nObject.defineProperty(exports, \"MongoClientBulkWriteExecutionError\", { enumerable: true, get: function () { return error_1.MongoClientBulkWriteExecutionError; } });\nObject.defineProperty(exports, \"MongoClientClosedError\", { enumerable: true, get: function () { return error_1.MongoClientClosedError; } });\nObject.defineProperty(exports, \"MongoCompatibilityError\", { enumerable: true, get: function () { return error_1.MongoCompatibilityError; } });\nObject.defineProperty(exports, \"MongoCursorExhaustedError\", { enumerable: true, get: function () { return error_1.MongoCursorExhaustedError; } });\nObject.defineProperty(exports, \"MongoCursorInUseError\", { enumerable: true, get: function () { return error_1.MongoCursorInUseError; } });\nObject.defineProperty(exports, \"MongoDecompressionError\", { enumerable: true, get: function () { return error_1.MongoDecompressionError; } });\nObject.defineProperty(exports, \"MongoDriverError\", { enumerable: true, get: function () { return error_1.MongoDriverError; } });\nObject.defineProperty(exports, \"MongoError\", { enumerable: true, get: function () { return error_1.MongoError; } });\nObject.defineProperty(exports, \"MongoExpiredSessionError\", { enumerable: true, get: function () { return error_1.MongoExpiredSessionError; } });\nObject.defineProperty(exports, \"MongoGCPError\", { enumerable: true, get: function () { return error_1.MongoGCPError; } });\nObject.defineProperty(exports, \"MongoGridFSChunkError\", { enumerable: true, get: function () { return error_1.MongoGridFSChunkError; } });\nObject.defineProperty(exports, \"MongoGridFSStreamError\", { enumerable: true, get: function () { return error_1.MongoGridFSStreamError; } });\nObject.defineProperty(exports, \"MongoInvalidArgumentError\", { enumerable: true, get: function () { return error_1.MongoInvalidArgumentError; } });\nObject.defineProperty(exports, \"MongoKerberosError\", { enumerable: true, get: function () { return error_1.MongoKerberosError; } });\nObject.defineProperty(exports, \"MongoMissingCredentialsError\", { enumerable: true, get: function () { return error_1.MongoMissingCredentialsError; } });\nObject.defineProperty(exports, \"MongoMissingDependencyError\", { enumerable: true, get: function () { return error_1.MongoMissingDependencyError; } });\nObject.defineProperty(exports, \"MongoNetworkError\", { enumerable: true, get: function () { return error_1.MongoNetworkError; } });\nObject.defineProperty(exports, \"MongoNetworkTimeoutError\", { enumerable: true, get: function () { return error_1.MongoNetworkTimeoutError; } });\nObject.defineProperty(exports, \"MongoNotConnectedError\", { enumerable: true, get: function () { return error_1.MongoNotConnectedError; } });\nObject.defineProperty(exports, \"MongoOIDCError\", { enumerable: true, get: function () { return error_1.MongoOIDCError; } });\nObject.defineProperty(exports, \"MongoOperationTimeoutError\", { enumerable: true, get: function () { return error_1.MongoOperationTimeoutError; } });\nObject.defineProperty(exports, \"MongoParseError\", { enumerable: true, get: function () { return error_1.MongoParseError; } });\nObject.defineProperty(exports, \"MongoRuntimeError\", { enumerable: true, get: function () { return error_1.MongoRuntimeError; } });\nObject.defineProperty(exports, \"MongoServerClosedError\", { enumerable: true, get: function () { return error_1.MongoServerClosedError; } });\nObject.defineProperty(exports, \"MongoServerError\", { enumerable: true, get: function () { return error_1.MongoServerError; } });\nObject.defineProperty(exports, \"MongoServerSelectionError\", { enumerable: true, get: function () { return error_1.MongoServerSelectionError; } });\nObject.defineProperty(exports, \"MongoStalePrimaryError\", { enumerable: true, get: function () { return error_1.MongoStalePrimaryError; } });\nObject.defineProperty(exports, \"MongoSystemError\", { enumerable: true, get: function () { return error_1.MongoSystemError; } });\nObject.defineProperty(exports, \"MongoTailableCursorError\", { enumerable: true, get: function () { return error_1.MongoTailableCursorError; } });\nObject.defineProperty(exports, \"MongoTopologyClosedError\", { enumerable: true, get: function () { return error_1.MongoTopologyClosedError; } });\nObject.defineProperty(exports, \"MongoTransactionError\", { enumerable: true, get: function () { return error_1.MongoTransactionError; } });\nObject.defineProperty(exports, \"MongoUnexpectedServerResponseError\", { enumerable: true, get: function () { return error_1.MongoUnexpectedServerResponseError; } });\nObject.defineProperty(exports, \"MongoWriteConcernError\", { enumerable: true, get: function () { return error_1.MongoWriteConcernError; } });\nvar resource_management_1 = require(\"./resource_management\");\nObject.defineProperty(exports, \"configureExplicitResourceManagement\", { enumerable: true, get: function () { return resource_management_1.configureExplicitResourceManagement; } });\n// enums\nvar common_2 = require(\"./bulk/common\");\nObject.defineProperty(exports, \"BatchType\", { enumerable: true, get: function () { return common_2.BatchType; } });\nvar auto_encrypter_1 = require(\"./client-side-encryption/auto_encrypter\");\nObject.defineProperty(exports, \"AutoEncryptionLoggerLevel\", { enumerable: true, get: function () { return auto_encrypter_1.AutoEncryptionLoggerLevel; } });\nvar gssapi_1 = require(\"./cmap/auth/gssapi\");\nObject.defineProperty(exports, \"GSSAPICanonicalizationValue\", { enumerable: true, get: function () { return gssapi_1.GSSAPICanonicalizationValue; } });\nvar providers_1 = require(\"./cmap/auth/providers\");\nObject.defineProperty(exports, \"AuthMechanism\", { enumerable: true, get: function () { return providers_1.AuthMechanism; } });\nvar compression_1 = require(\"./cmap/wire_protocol/compression\");\nObject.defineProperty(exports, \"Compressor\", { enumerable: true, get: function () { return compression_1.Compressor; } });\nvar abstract_cursor_2 = require(\"./cursor/abstract_cursor\");\nObject.defineProperty(exports, \"CURSOR_FLAGS\", { enumerable: true, get: function () { return abstract_cursor_2.CURSOR_FLAGS; } });\nObject.defineProperty(exports, \"CursorTimeoutMode\", { enumerable: true, get: function () { return abstract_cursor_2.CursorTimeoutMode; } });\nvar error_2 = require(\"./error\");\nObject.defineProperty(exports, \"MongoErrorLabel\", { enumerable: true, get: function () { return error_2.MongoErrorLabel; } });\nvar explain_2 = require(\"./explain\");\nObject.defineProperty(exports, \"ExplainVerbosity\", { enumerable: true, get: function () { return explain_2.ExplainVerbosity; } });\nvar mongo_client_2 = require(\"./mongo_client\");\nObject.defineProperty(exports, \"ServerApiVersion\", { enumerable: true, get: function () { return mongo_client_2.ServerApiVersion; } });\nvar mongo_logger_1 = require(\"./mongo_logger\");\nObject.defineProperty(exports, \"MongoLoggableComponent\", { enumerable: true, get: function () { return mongo_logger_1.MongoLoggableComponent; } });\nObject.defineProperty(exports, \"SeverityLevel\", { enumerable: true, get: function () { return mongo_logger_1.SeverityLevel; } });\nvar find_and_modify_1 = require(\"./operations/find_and_modify\");\nObject.defineProperty(exports, \"ReturnDocument\", { enumerable: true, get: function () { return find_and_modify_1.ReturnDocument; } });\nvar set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nObject.defineProperty(exports, \"ProfilingLevel\", { enumerable: true, get: function () { return set_profiling_level_1.ProfilingLevel; } });\nvar read_concern_1 = require(\"./read_concern\");\nObject.defineProperty(exports, \"ReadConcernLevel\", { enumerable: true, get: function () { return read_concern_1.ReadConcernLevel; } });\nvar read_preference_1 = require(\"./read_preference\");\nObject.defineProperty(exports, \"ReadPreferenceMode\", { enumerable: true, get: function () { return read_preference_1.ReadPreferenceMode; } });\nvar common_3 = require(\"./sdam/common\");\nObject.defineProperty(exports, \"ServerType\", { enumerable: true, get: function () { return common_3.ServerType; } });\nObject.defineProperty(exports, \"TopologyType\", { enumerable: true, get: function () { return common_3.TopologyType; } });\nvar read_concern_2 = require(\"./read_concern\");\nObject.defineProperty(exports, \"ReadConcern\", { enumerable: true, get: function () { return read_concern_2.ReadConcern; } });\nvar read_preference_2 = require(\"./read_preference\");\nObject.defineProperty(exports, \"ReadPreference\", { enumerable: true, get: function () { return read_preference_2.ReadPreference; } });\nvar write_concern_1 = require(\"./write_concern\");\nObject.defineProperty(exports, \"WriteConcern\", { enumerable: true, get: function () { return write_concern_1.WriteConcern; } });\n// events\nvar command_monitoring_events_1 = require(\"./cmap/command_monitoring_events\");\nObject.defineProperty(exports, \"CommandFailedEvent\", { enumerable: true, get: function () { return command_monitoring_events_1.CommandFailedEvent; } });\nObject.defineProperty(exports, \"CommandStartedEvent\", { enumerable: true, get: function () { return command_monitoring_events_1.CommandStartedEvent; } });\nObject.defineProperty(exports, \"CommandSucceededEvent\", { enumerable: true, get: function () { return command_monitoring_events_1.CommandSucceededEvent; } });\nvar connection_pool_events_1 = require(\"./cmap/connection_pool_events\");\nObject.defineProperty(exports, \"ConnectionCheckedInEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedInEvent; } });\nObject.defineProperty(exports, \"ConnectionCheckedOutEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedOutEvent; } });\nObject.defineProperty(exports, \"ConnectionCheckOutFailedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutFailedEvent; } });\nObject.defineProperty(exports, \"ConnectionCheckOutStartedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutStartedEvent; } });\nObject.defineProperty(exports, \"ConnectionClosedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionClosedEvent; } });\nObject.defineProperty(exports, \"ConnectionCreatedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionCreatedEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolClearedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClearedEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolClosedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClosedEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolCreatedEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolCreatedEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolMonitoringEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolMonitoringEvent; } });\nObject.defineProperty(exports, \"ConnectionPoolReadyEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolReadyEvent; } });\nObject.defineProperty(exports, \"ConnectionReadyEvent\", { enumerable: true, get: function () { return connection_pool_events_1.ConnectionReadyEvent; } });\nvar events_1 = require(\"./sdam/events\");\nObject.defineProperty(exports, \"ServerClosedEvent\", { enumerable: true, get: function () { return events_1.ServerClosedEvent; } });\nObject.defineProperty(exports, \"ServerDescriptionChangedEvent\", { enumerable: true, get: function () { return events_1.ServerDescriptionChangedEvent; } });\nObject.defineProperty(exports, \"ServerHeartbeatFailedEvent\", { enumerable: true, get: function () { return events_1.ServerHeartbeatFailedEvent; } });\nObject.defineProperty(exports, \"ServerHeartbeatStartedEvent\", { enumerable: true, get: function () { return events_1.ServerHeartbeatStartedEvent; } });\nObject.defineProperty(exports, \"ServerHeartbeatSucceededEvent\", { enumerable: true, get: function () { return events_1.ServerHeartbeatSucceededEvent; } });\nObject.defineProperty(exports, \"ServerOpeningEvent\", { enumerable: true, get: function () { return events_1.ServerOpeningEvent; } });\nObject.defineProperty(exports, \"TopologyClosedEvent\", { enumerable: true, get: function () { return events_1.TopologyClosedEvent; } });\nObject.defineProperty(exports, \"TopologyDescriptionChangedEvent\", { enumerable: true, get: function () { return events_1.TopologyDescriptionChangedEvent; } });\nObject.defineProperty(exports, \"TopologyOpeningEvent\", { enumerable: true, get: function () { return events_1.TopologyOpeningEvent; } });\nvar server_selection_events_1 = require(\"./sdam/server_selection_events\");\nObject.defineProperty(exports, \"ServerSelectionEvent\", { enumerable: true, get: function () { return server_selection_events_1.ServerSelectionEvent; } });\nObject.defineProperty(exports, \"ServerSelectionFailedEvent\", { enumerable: true, get: function () { return server_selection_events_1.ServerSelectionFailedEvent; } });\nObject.defineProperty(exports, \"ServerSelectionStartedEvent\", { enumerable: true, get: function () { return server_selection_events_1.ServerSelectionStartedEvent; } });\nObject.defineProperty(exports, \"ServerSelectionSucceededEvent\", { enumerable: true, get: function () { return server_selection_events_1.ServerSelectionSucceededEvent; } });\nObject.defineProperty(exports, \"WaitingForSuitableServerEvent\", { enumerable: true, get: function () { return server_selection_events_1.WaitingForSuitableServerEvent; } });\nvar srv_polling_1 = require(\"./sdam/srv_polling\");\nObject.defineProperty(exports, \"SrvPollingEvent\", { enumerable: true, get: function () { return srv_polling_1.SrvPollingEvent; } });\nvar errors_1 = require(\"./client-side-encryption/errors\");\nObject.defineProperty(exports, \"MongoCryptAzureKMSRequestError\", { enumerable: true, get: function () { return errors_1.MongoCryptAzureKMSRequestError; } });\nObject.defineProperty(exports, \"MongoCryptCreateDataKeyError\", { enumerable: true, get: function () { return errors_1.MongoCryptCreateDataKeyError; } });\nObject.defineProperty(exports, \"MongoCryptCreateEncryptedCollectionError\", { enumerable: true, get: function () { return errors_1.MongoCryptCreateEncryptedCollectionError; } });\nObject.defineProperty(exports, \"MongoCryptError\", { enumerable: true, get: function () { return errors_1.MongoCryptError; } });\nObject.defineProperty(exports, \"MongoCryptInvalidArgumentError\", { enumerable: true, get: function () { return errors_1.MongoCryptInvalidArgumentError; } });\nObject.defineProperty(exports, \"MongoCryptKMSRequestNetworkTimeoutError\", { enumerable: true, get: function () { return errors_1.MongoCryptKMSRequestNetworkTimeoutError; } });\nvar mongo_client_auth_providers_1 = require(\"./mongo_client_auth_providers\");\nObject.defineProperty(exports, \"MongoClientAuthProviders\", { enumerable: true, get: function () { return mongo_client_auth_providers_1.MongoClientAuthProviders; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = require(\"fs\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst client_metadata_1 = require(\"./cmap/handshake/client_metadata\");\nconst connection_string_1 = require(\"./connection_string\");\nconst constants_1 = require(\"./constants\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_auth_providers_1 = require(\"./mongo_client_auth_providers\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst executor_1 = require(\"./operations/client_bulk_write/executor\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst read_preference_1 = require(\"./read_preference\");\nconst resource_management_1 = require(\"./resource_management\");\nconst server_selection_1 = require(\"./sdam/server_selection\");\nconst topology_1 = require(\"./sdam/topology\");\nconst sessions_1 = require(\"./sessions\");\nconst utils_1 = require(\"./utils\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n    v1: '1'\n});\n/**\n * @public\n *\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n *\n * **NOTE:** The programmatically provided options take precedence over the URI options.\n *\n * @remarks\n *\n * A MongoClient is the entry point to connecting to a MongoDB server.\n *\n * It handles a multitude of features on your application's behalf:\n * - **Server Host Connection Configuration**: A MongoClient is responsible for reading TLS cert, ca, and crl files if provided.\n * - **SRV Record Polling**: A \"`mongodb+srv`\" style connection string is used to have the MongoClient resolve DNS SRV records of all server hostnames which the driver periodically monitors for changes and adjusts its current view of hosts correspondingly.\n * - **Server Monitoring**: The MongoClient automatically keeps monitoring the health of server nodes in your cluster to reach out to the correct and lowest latency one available.\n * - **Connection Pooling**: To avoid paying the cost of rebuilding a connection to the server on every operation the MongoClient keeps idle connections preserved for reuse.\n * - **Session Pooling**: The MongoClient creates logical sessions that enable retryable writes, causal consistency, and transactions. It handles pooling these sessions for reuse in subsequent operations.\n * - **Cursor Operations**: A MongoClient's cursors use the health monitoring system to send the request for more documents to the same server the query began on.\n * - **Mongocryptd process**: When using auto encryption, a MongoClient will launch a `mongocryptd` instance for handling encryption if the mongocrypt shared library isn't in use.\n *\n * There are many more features of a MongoClient that are not listed above.\n *\n * In order to enable these features, a number of asynchronous Node.js resources are established by the driver: Timers, FS Requests, Sockets, etc.\n * For details on cleanup, please refer to the MongoClient `close()` documentation.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017?appName=mflix', { monitorCommands: true });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n    constructor(url, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.options = (0, connection_string_1.parseOptions)(url, this, options);\n        const shouldSetLogger = Object.values(this.options.mongoLoggerOptions.componentSeverities).some(value => value !== mongo_logger_1.SeverityLevel.OFF);\n        this.mongoLogger = shouldSetLogger\n            ? new mongo_logger_1.MongoLogger(this.options.mongoLoggerOptions)\n            : undefined;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const client = this;\n        // The internal state\n        this.s = {\n            url,\n            bsonOptions: (0, bson_1.resolveBSONOptions)(this.options),\n            namespace: (0, utils_1.ns)('admin'),\n            hasBeenClosed: false,\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            activeSessions: new Set(),\n            activeCursors: new Set(),\n            authProviders: new mongo_client_auth_providers_1.MongoClientAuthProviders(),\n            get options() {\n                return client.options;\n            },\n            get readConcern() {\n                return client.options.readConcern;\n            },\n            get writeConcern() {\n                return client.options.writeConcern;\n            },\n            get readPreference() {\n                return client.options.readPreference;\n            },\n            get isMongoClient() {\n                return true;\n            }\n        };\n        this.checkForNonGenuineHosts();\n    }\n    /** @internal */\n    async asyncDispose() {\n        await this.close();\n    }\n    /**\n     * Append metadata to the client metadata after instantiation.\n     * @param driverInfo - Information about the application or library.\n     */\n    appendMetadata(driverInfo) {\n        this.options.additionalDriverInfo.push(driverInfo);\n        this.options.metadata = (0, client_metadata_1.makeClientMetadata)(this.options);\n        this.options.extendedMetadata = (0, client_metadata_1.addContainerMetadata)(this.options.metadata)\n            .then(undefined, utils_1.squashError)\n            .then(result => result ?? {}); // ensure Promise<Document>\n    }\n    /** @internal */\n    checkForNonGenuineHosts() {\n        const documentDBHostnames = this.options.hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n        const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this.options.srvHost);\n        const cosmosDBHostnames = this.options.hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n        const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this.options.srvHost);\n        if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n            this.mongoLogger?.info('client', utils_1.DOCUMENT_DB_MSG);\n        }\n        else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n            this.mongoLogger?.info('client', utils_1.COSMOS_DB_MSG);\n        }\n    }\n    get serverApi() {\n        return this.options.serverApi && Object.freeze({ ...this.options.serverApi });\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */\n    get monitorCommands() {\n        return this.options.monitorCommands;\n    }\n    set monitorCommands(value) {\n        this.options.monitorCommands = value;\n    }\n    /** @internal */\n    get autoEncrypter() {\n        return this.options.autoEncrypter;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get readPreference() {\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get timeoutMS() {\n        return this.s.options.timeoutMS;\n    }\n    /**\n     * Executes a client bulk write operation, available on server 8.0+.\n     * @param models - The client bulk write models.\n     * @param options - The client bulk write options.\n     * @returns A ClientBulkWriteResult for acknowledged writes and ok: 1 for unacknowledged writes.\n     */\n    async bulkWrite(models, options) {\n        if (this.autoEncrypter) {\n            throw new error_1.MongoInvalidArgumentError('MongoClient bulkWrite does not currently support automatic encryption.');\n        }\n        // We do not need schema type information past this point (\"as any\" is fine)\n        return await new executor_1.ClientBulkWriteExecutor(this, models, (0, utils_1.resolveOptions)(this, options)).execute();\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n     * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n     * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n     * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n     * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n     *\n     * @remarks\n     * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n     * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    async connect() {\n        if (this.connectionLock) {\n            return await this.connectionLock;\n        }\n        try {\n            this.connectionLock = this._connect();\n            await this.connectionLock;\n        }\n        finally {\n            // release\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */\n    async _connect() {\n        if (this.topology && this.topology.isConnected()) {\n            return this;\n        }\n        const options = this.options;\n        if (options.tls) {\n            if (typeof options.tlsCAFile === 'string') {\n                options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n            }\n            if (typeof options.tlsCRLFile === 'string') {\n                options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n            }\n            if (typeof options.tlsCertificateKeyFile === 'string') {\n                if (!options.key || !options.cert) {\n                    const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n                    options.key ??= contents;\n                    options.cert ??= contents;\n                }\n            }\n        }\n        if (typeof options.srvHost === 'string') {\n            const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n            for (const [index, host] of hosts.entries()) {\n                options.hosts[index] = host;\n            }\n        }\n        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n        // but BEFORE we even attempt connecting with a potentially not allowed hostname\n        if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n            const isServiceAuth = !!options.credentials?.mechanismProperties?.ENVIRONMENT;\n            if (!isServiceAuth) {\n                for (const host of options.hosts) {\n                    if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n                        throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(',')}'`);\n                    }\n                }\n            }\n        }\n        this.topology = new topology_1.Topology(this, options.hosts, options);\n        // Events can be emitted before initialization is complete so we have to\n        // save the reference to the topology on the client ASAP if the event handlers need to access it\n        this.topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n        for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n            this.topology.on(event, (...args) => this.emit(event, ...args));\n        }\n        const topologyConnect = async () => {\n            try {\n                await this.topology?.connect(options);\n            }\n            catch (error) {\n                this.topology?.close();\n                throw error;\n            }\n        };\n        if (this.autoEncrypter) {\n            await this.autoEncrypter?.init();\n            await topologyConnect();\n            await options.encrypter.connectInternalClient();\n        }\n        else {\n            await topologyConnect();\n        }\n        return this;\n    }\n    /**\n     * Cleans up resources managed by the MongoClient.\n     *\n     * The close method clears and closes all resources whose lifetimes are managed by the MongoClient.\n     * Please refer to the `MongoClient` class documentation for a high level overview of the client's key features and responsibilities.\n     *\n     * **However,** the close method does not handle the cleanup of resources explicitly created by the user.\n     * Any user-created driver resource with its own `close()` method should be explicitly closed by the user before calling MongoClient.close().\n     * This method is written as a \"best effort\" attempt to leave behind the least amount of resources server-side when possible.\n     *\n     * The following list defines ideal preconditions and consequent pitfalls if they are not met.\n     * The MongoClient, ClientSession, Cursors and ChangeStreams all support [explicit resource management](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html).\n     * By using explicit resource management to manage the lifetime of driver resources instead of manually managing their lifetimes, the pitfalls outlined below can be avoided.\n     *\n     * The close method performs the following in the order listed:\n     * - Client-side:\n     *   - **Close in-use connections**: Any connections that are currently waiting on a response from the server will be closed.\n     *     This is performed _first_ to avoid reaching the next step (server-side clean up) and having no available connections to check out.\n     *     - _Ideal_: All operations have been awaited or cancelled, and the outcomes, regardless of success or failure, have been processed before closing the client servicing the operation.\n     *     - _Pitfall_: When `client.close()` is called and all connections are in use, after closing them, the client must create new connections for cleanup operations, which comes at the cost of new TLS/TCP handshakes and authentication steps.\n     * - Server-side:\n     *   - **Close active cursors**: All cursors that haven't been completed will have a `killCursor` operation sent to the server they were initialized on, freeing the server-side resource.\n     *     - _Ideal_: Cursors are explicitly closed or completed before `client.close()` is called.\n     *     - _Pitfall_: `killCursors` may have to build a new connection if the in-use closure ended all pooled connections.\n     *   - **End active sessions**: In-use sessions created with `client.startSession()` or `client.withSession()` or implicitly by the driver will have their `.endSession()` method called.\n     *     Contrary to the name of the method, `endSession()` returns the session to the client's pool of sessions rather than end them on the server.\n     *     - _Ideal_: Transaction outcomes are awaited and their corresponding explicit sessions are ended before `client.close()` is called.\n     *     - _Pitfall_: **This step aborts in-progress transactions**. It is advisable to observe the outcome of a transaction before closing your client.\n     *   - **End all pooled sessions**: The `endSessions` command with all session IDs the client has pooled is sent to the server to inform the cluster it can clean them up.\n     *     - _Ideal_: No user intervention is expected.\n     *     - _Pitfall_: None.\n     *\n     * The remaining shutdown is of the MongoClient resources that are intended to be entirely internal but is documented here as their existence relates to the JS event loop.\n     *\n     * - Client-side (again):\n     *   - **Stop all server monitoring**: Connections kept live for detecting cluster changes and roundtrip time measurements are shutdown.\n     *   - **Close all pooled connections**: Each server node in the cluster has a corresponding connection pool and all connections in the pool are closed. Any operations waiting to check out a connection will have an error thrown instead of a connection returned.\n     *   - **Clear out server selection queue**: Any operations that are in the process of waiting for a server to be selected will have an error thrown instead of a server returned.\n     *   - **Close encryption-related resources**: An internal MongoClient created for communicating with `mongocryptd` or other encryption purposes is closed. (Using this same method of course!)\n     *\n     * After the close method completes there should be no MongoClient related resources [ref-ed in Node.js' event loop](https://docs.libuv.org/en/v1.x/handle.html#reference-counting).\n     * This should allow Node.js to exit gracefully if MongoClient resources were the only active handles in the event loop.\n     *\n     * @param _force - currently an unused flag that has no effect. Defaults to `false`.\n     */\n    async close(_force = false) {\n        if (this.closeLock) {\n            return await this.closeLock;\n        }\n        try {\n            this.closeLock = this._close();\n            await this.closeLock;\n        }\n        finally {\n            // release\n            this.closeLock = undefined;\n        }\n    }\n    /* @internal */\n    async _close() {\n        // There's no way to set hasBeenClosed back to false\n        Object.defineProperty(this.s, 'hasBeenClosed', {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false\n        });\n        this.topology?.closeCheckedOutConnections();\n        const activeCursorCloses = Array.from(this.s.activeCursors, cursor => cursor.close());\n        this.s.activeCursors.clear();\n        await Promise.all(activeCursorCloses);\n        const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n        this.s.activeSessions.clear();\n        await Promise.all(activeSessionEnds);\n        if (this.topology == null) {\n            return;\n        }\n        // If we would attempt to select a server and get nothing back we short circuit\n        // to avoid the server selection timeout.\n        const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n        const topologyDescription = this.topology.description;\n        const serverDescriptions = Array.from(topologyDescription.servers.values());\n        const servers = selector(topologyDescription, serverDescriptions);\n        if (servers.length !== 0) {\n            const endSessions = Array.from(this.s.sessionPool.sessions, ({ id }) => id);\n            if (endSessions.length !== 0) {\n                try {\n                    await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({ endSessions }, { readPreference: read_preference_1.ReadPreference.primaryPreferred, noResponse: true }));\n                }\n                catch (error) {\n                    (0, utils_1.squashError)(error);\n                }\n            }\n        }\n        // clear out references to old topology\n        const topology = this.topology;\n        this.topology = undefined;\n        topology.close();\n        const { encrypter } = this.options;\n        if (encrypter) {\n            await encrypter.close(this);\n        }\n    }\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n    db(dbName, options) {\n        options = options ?? {};\n        // Default to db from connection string if not provided\n        if (!dbName) {\n            dbName = this.s.options.dbName;\n        }\n        // Copy the options and add out internal override of the not shared flag\n        const finalOptions = Object.assign({}, this.options, options);\n        // Return the db object\n        const db = new db_1.Db(this, dbName, finalOptions);\n        // Return the database\n        return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n     * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n     * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n     * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n     * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @remarks\n     * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n     * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n    static async connect(url, options) {\n        const client = new this(url, options);\n        return await client.connect();\n    }\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */\n    startSession(options) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, { explicit: true, ...options }, this.options);\n        this.s.activeSessions.add(session);\n        session.once('ended', () => {\n            this.s.activeSessions.delete(session);\n        });\n        return session;\n    }\n    async withSession(optionsOrExecutor, executor) {\n        const options = {\n            // Always define an owner\n            owner: Symbol(),\n            // If it's an object inherit the options\n            ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n        };\n        const withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n        if (withSessionCallback == null) {\n            throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n        }\n        const session = this.startSession(options);\n        try {\n            return await withSessionCallback(session);\n        }\n        finally {\n            try {\n                await session.endSession();\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n        }\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @remarks\n     * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n     * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n     * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n     * event.\n     *\n     * Note that if a change stream is consistently timing out when watching a collection, database or\n     * client that is being changed, then this may be due to the server timing out before it can finish\n     * processing the existing oplog. To address this, restart the change stream with a higher\n     * `timeoutMS`.\n     *\n     * If the change stream times out the initial aggregate operation to establish the change stream on\n     * the server, then the client will close the change stream. If the getMore calls to the server\n     * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n     * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n     * emitter mode.\n     *\n     * To determine whether or not the change stream is still open following a timeout, check the\n     * {@link ChangeStream.closed} getter.\n     *\n     * @example\n     * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n     * The next call can just be retried after this succeeds.\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * try {\n     *     await changeStream.next();\n     * } catch (e) {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *       await changeStream.next();\n     *     }\n     *     throw e;\n     * }\n     * ```\n     *\n     * @example\n     * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n     * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n     * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n     * this will automatically continue emitting change events once the resume attempt completes.\n     *\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * changeStream.on('change', console.log);\n     * changeStream.on('error', e => {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *         // do nothing\n     *     } else {\n     *         changeStream.close();\n     *     }\n     * });\n     * ```\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.MongoClient = MongoClient;\n(0, resource_management_1.configureResourceManagement)(MongoClient.prototype);\n//# sourceMappingURL=mongo_client.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoClientAuthProviders = void 0;\nconst gssapi_1 = require(\"./cmap/auth/gssapi\");\nconst mongodb_aws_1 = require(\"./cmap/auth/mongodb_aws\");\nconst mongodb_oidc_1 = require(\"./cmap/auth/mongodb_oidc\");\nconst automated_callback_workflow_1 = require(\"./cmap/auth/mongodb_oidc/automated_callback_workflow\");\nconst human_callback_workflow_1 = require(\"./cmap/auth/mongodb_oidc/human_callback_workflow\");\nconst token_cache_1 = require(\"./cmap/auth/mongodb_oidc/token_cache\");\nconst plain_1 = require(\"./cmap/auth/plain\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst scram_1 = require(\"./cmap/auth/scram\");\nconst x509_1 = require(\"./cmap/auth/x509\");\nconst error_1 = require(\"./error\");\n/** @internal */\nconst AUTH_PROVIDERS = new Map([\n    [\n        providers_1.AuthMechanism.MONGODB_AWS,\n        ({ AWS_CREDENTIAL_PROVIDER }) => new mongodb_aws_1.MongoDBAWS(AWS_CREDENTIAL_PROVIDER)\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_CR,\n        () => {\n            throw new error_1.MongoInvalidArgumentError('MONGODB-CR is no longer a supported auth mechanism in MongoDB 4.0+');\n        }\n    ],\n    [providers_1.AuthMechanism.MONGODB_GSSAPI, () => new gssapi_1.GSSAPI()],\n    [providers_1.AuthMechanism.MONGODB_OIDC, properties => new mongodb_oidc_1.MongoDBOIDC(getWorkflow(properties))],\n    [providers_1.AuthMechanism.MONGODB_PLAIN, () => new plain_1.Plain()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, () => new scram_1.ScramSHA1()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, () => new scram_1.ScramSHA256()],\n    [providers_1.AuthMechanism.MONGODB_X509, () => new x509_1.X509()]\n]);\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nclass MongoClientAuthProviders {\n    constructor() {\n        this.existingProviders = new Map();\n    }\n    /**\n     * Get or create an authentication provider based on the provided mechanism.\n     * We don't want to create all providers at once, as some providers may not be used.\n     * @param name - The name of the provider to get or create.\n     * @param credentials - The credentials.\n     * @returns The provider.\n     * @throws MongoInvalidArgumentError if the mechanism is not supported.\n     * @internal\n     */\n    getOrCreateProvider(name, authMechanismProperties) {\n        const authProvider = this.existingProviders.get(name);\n        if (authProvider) {\n            return authProvider;\n        }\n        const providerFunction = AUTH_PROVIDERS.get(name);\n        if (!providerFunction) {\n            throw new error_1.MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n        }\n        const provider = providerFunction(authMechanismProperties);\n        this.existingProviders.set(name, provider);\n        return provider;\n    }\n}\nexports.MongoClientAuthProviders = MongoClientAuthProviders;\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(authMechanismProperties) {\n    if (authMechanismProperties.OIDC_HUMAN_CALLBACK) {\n        return new human_callback_workflow_1.HumanCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_HUMAN_CALLBACK);\n    }\n    else if (authMechanismProperties.OIDC_CALLBACK) {\n        return new automated_callback_workflow_1.AutomatedCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_CALLBACK);\n    }\n    else {\n        const environment = authMechanismProperties.ENVIRONMENT;\n        const workflow = mongodb_oidc_1.OIDC_WORKFLOWS.get(environment)?.();\n        if (!workflow) {\n            throw new error_1.MongoInvalidArgumentError(`Could not load workflow for environment ${authMechanismProperties.ENVIRONMENT}`);\n        }\n        return workflow;\n    }\n}\n//# sourceMappingURL=mongo_client_auth_providers.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nexports.parseSeverityFromString = parseSeverityFromString;\nexports.createStdioLogger = createStdioLogger;\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nexports.defaultLogTransform = defaultLogTransform;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/**\n * @public\n * Severity levels align with unix syslog.\n * Most typical driver functions will log to debug.\n */\nexports.SeverityLevel = Object.freeze({\n    EMERGENCY: 'emergency',\n    ALERT: 'alert',\n    CRITICAL: 'critical',\n    ERROR: 'error',\n    WARNING: 'warn',\n    NOTICE: 'notice',\n    INFORMATIONAL: 'info',\n    DEBUG: 'debug',\n    TRACE: 'trace',\n    OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n    constructor(entries) {\n        const newEntries = [];\n        for (const [level, value] of entries) {\n            newEntries.push([value, level]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [exports.SeverityLevel.OFF, -Infinity],\n    [exports.SeverityLevel.EMERGENCY, 0],\n    [exports.SeverityLevel.ALERT, 1],\n    [exports.SeverityLevel.CRITICAL, 2],\n    [exports.SeverityLevel.ERROR, 3],\n    [exports.SeverityLevel.WARNING, 4],\n    [exports.SeverityLevel.NOTICE, 5],\n    [exports.SeverityLevel.INFORMATIONAL, 6],\n    [exports.SeverityLevel.DEBUG, 7],\n    [exports.SeverityLevel.TRACE, 8]\n]);\n/** @public */\nexports.MongoLoggableComponent = Object.freeze({\n    COMMAND: 'command',\n    TOPOLOGY: 'topology',\n    SERVER_SELECTION: 'serverSelection',\n    CONNECTION: 'connection',\n    CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n    return {\n        write: (0, util_1.promisify)((log, cb) => {\n            const logLine = (0, util_1.inspect)(log, { compact: true, breakLength: Infinity });\n            stream.write(`${logLine}\\n`, 'utf-8', cb);\n            return;\n        })\n    };\n}\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n        return { mongodbLogPath: mongodbLogPath, mongodbLogPathIsStdErr: false };\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n    return (parseSeverityFromString(clientOption) ??\n        parseSeverityFromString(environmentOption) ??\n        defaultSeverity);\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength, options = {}) {\n    let strToTruncate = '';\n    let currentLength = 0;\n    const maxDocumentLengthEnsurer = function maxDocumentLengthEnsurer(key, value) {\n        if (currentLength >= maxDocumentLength) {\n            return undefined;\n        }\n        // Account for root document\n        if (key === '') {\n            // Account for starting brace\n            currentLength += 1;\n            return value;\n        }\n        // +4 accounts for 2 quotation marks, colon and comma after value\n        // Note that this potentially undercounts since it does not account for escape sequences which\n        // will have an additional backslash added to them once passed through JSON.stringify.\n        currentLength += key.length + 4;\n        if (value == null)\n            return value;\n        switch (typeof value) {\n            case 'string':\n                // +2 accounts for quotes\n                // Note that this potentially undercounts similarly to the key length calculation\n                currentLength += value.length + 2;\n                break;\n            case 'number':\n            case 'bigint':\n                currentLength += String(value).length;\n                break;\n            case 'boolean':\n                currentLength += value ? 4 : 5;\n                break;\n            case 'object':\n                if ((0, utils_1.isUint8Array)(value)) {\n                    // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n                    // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n                    // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n                    currentLength += (22 + value.byteLength + value.byteLength * 0.33 + 18) | 0;\n                }\n                else if ('_bsontype' in value) {\n                    const v = value;\n                    switch (v._bsontype) {\n                        case 'Int32':\n                            currentLength += String(v.value).length;\n                            break;\n                        case 'Double':\n                            // Account for representing integers as <value>.0\n                            currentLength +=\n                                (v.value | 0) === v.value ? String(v.value).length + 2 : String(v.value).length;\n                            break;\n                        case 'Long':\n                            currentLength += v.toString().length;\n                            break;\n                        case 'ObjectId':\n                            // '{\"$oid\":\"XXXXXXXXXXXXXXXXXXXXXXXX\"}'\n                            currentLength += 35;\n                            break;\n                        case 'MaxKey':\n                        case 'MinKey':\n                            // '{\"$maxKey\":1}' or '{\"$minKey\":1}'\n                            currentLength += 13;\n                            break;\n                        case 'Binary':\n                            // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n                            // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n                            // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n                            currentLength += (22 + value.position + value.position * 0.33 + 18) | 0;\n                            break;\n                        case 'Timestamp':\n                            // '{\"$timestamp\":{\"t\":<t>,\"i\":<i>}}'\n                            currentLength += 19 + String(v.t).length + 5 + String(v.i).length + 2;\n                            break;\n                        case 'Code':\n                            // '{\"$code\":\"<code>\"}' or '{\"$code\":\"<code>\",\"$scope\":<scope>}'\n                            if (v.scope == null) {\n                                currentLength += v.code.length + 10 + 2;\n                            }\n                            else {\n                                // Ignoring actual scope object, so this undercounts by a significant amount\n                                currentLength += v.code.length + 10 + 11;\n                            }\n                            break;\n                        case 'BSONRegExp':\n                            // '{\"$regularExpression\":{\"pattern\":\"<pattern>\",\"options\":\"<options>\"}}'\n                            currentLength += 34 + v.pattern.length + 13 + v.options.length + 3;\n                            break;\n                    }\n                }\n        }\n        return value;\n    };\n    if (typeof value === 'string') {\n        strToTruncate = value;\n    }\n    else if (typeof value === 'function') {\n        strToTruncate = value.name;\n    }\n    else {\n        try {\n            if (maxDocumentLength !== 0) {\n                strToTruncate = bson_1.EJSON.stringify(value, maxDocumentLengthEnsurer, 0, options);\n            }\n            else {\n                strToTruncate = bson_1.EJSON.stringify(value, options);\n            }\n        }\n        catch (e) {\n            strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n        }\n    }\n    // handle truncation that occurs in the middle of multi-byte codepoints\n    if (maxDocumentLength !== 0 &&\n        strToTruncate.length > maxDocumentLength &&\n        strToTruncate.charCodeAt(maxDocumentLength - 1) !==\n            strToTruncate.codePointAt(maxDocumentLength - 1)) {\n        maxDocumentLength--;\n        if (maxDocumentLength === 0) {\n            return '';\n        }\n    }\n    return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength\n        ? `${strToTruncate.slice(0, maxDocumentLength)}...`\n        : strToTruncate;\n}\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n    log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n    log.operation = operation;\n    log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n    log.message = message;\n    return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    log.databaseName = commandEvent.databaseName;\n    log.serverConnectionId = commandEvent.serverConnectionId;\n    return log;\n}\nfunction attachConnectionFields(log, event) {\n    const { host, port } = utils_1.HostAddress.fromString(event.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n    log.topologyId = sdamEvent.topologyId;\n    return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n    const { awaited, connectionId } = serverHeartbeatEvent;\n    log.awaited = awaited;\n    log.driverConnectionId = serverHeartbeatEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch (logObject.name) {\n        case constants_1.SERVER_SELECTION_STARTED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            return log;\n        case constants_1.SERVER_SELECTION_FAILED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.SERVER_SELECTION_SUCCEEDED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.serverHost = logObject.serverHost;\n            log.serverPort = logObject.serverPort;\n            return log;\n        case constants_1.WAITING_FOR_SUITABLE_SERVER:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.remainingTimeMS = logObject.remainingTimeMS;\n            return log;\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command started';\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, { relaxed: true });\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command succeeded';\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message ?? '(redacted)';\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool created';\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool ready';\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool cleared';\n            if (logObject.serviceId?._bsontype === 'ObjectId') {\n                log.serviceId = logObject.serviceId?.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool closed';\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection created';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection ready';\n            log.driverConnectionId = logObject.connectionId;\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection closed';\n            log.driverConnectionId = logObject.connectionId;\n            switch (logObject.reason) {\n                case 'stale':\n                    log.reason = 'Connection became stale because the pool was cleared';\n                    break;\n                case 'idle':\n                    log.reason =\n                        'Connection has been available but unused for longer than the configured max idle time';\n                    break;\n                case 'error':\n                    log.reason = 'An error occurred while using the connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout started';\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout failed';\n            switch (logObject.reason) {\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                case 'timeout':\n                    log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n                    break;\n                case 'connectionError':\n                    log.reason = 'An error occurred while trying to establish a new connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked out';\n            log.driverConnectionId = logObject.connectionId;\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked in';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.SERVER_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Starting server monitoring';\n            return log;\n        case constants_1.SERVER_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Stopped server monitoring';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_STARTED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat started';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat succeeded';\n            log.durationMS = logObject.duration;\n            log.serverConnectionId = logObject.serverConnectionId;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.SERVER_HEARTBEAT_FAILED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.TOPOLOGY_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Starting topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Stopped topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Topology description changed';\n            log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n            log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)) {\n                if (value != null)\n                    log[key] = value;\n            }\n    }\n    return log;\n}\n/** @internal */\nclass MongoLogger {\n    constructor(options) {\n        this.pendingLog = null;\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */\n        this.error = this.log.bind(this, 'error');\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */\n        this.warn = this.log.bind(this, 'warn');\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */\n        this.info = this.log.bind(this, 'info');\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */\n        this.debug = this.log.bind(this, 'debug');\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */\n        this.trace = this.log.bind(this, 'trace');\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n        this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n        this.severities = this.createLoggingSeverities();\n    }\n    createLoggingSeverities() {\n        const severities = Object();\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            severities[component] = {};\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                severities[component][severityLevel] =\n                    compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n            }\n        }\n        return severities;\n    }\n    turnOffSeverities() {\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            this.componentSeverities[component] = exports.SeverityLevel.OFF;\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                this.severities[component][severityLevel] = false;\n            }\n        }\n    }\n    logWriteFailureHandler(error) {\n        if (this.logDestinationIsStdErr) {\n            this.turnOffSeverities();\n            this.clearPendingLog();\n            return;\n        }\n        this.logDestination = createStdioLogger(process.stderr);\n        this.logDestinationIsStdErr = true;\n        this.clearPendingLog();\n        this.error(exports.MongoLoggableComponent.CLIENT, {\n            toLog: function () {\n                return {\n                    message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n                    error: error.message\n                };\n            }\n        });\n        this.turnOffSeverities();\n        this.clearPendingLog();\n    }\n    clearPendingLog() {\n        this.pendingLog = null;\n    }\n    willLog(component, severity) {\n        if (severity === exports.SeverityLevel.OFF)\n            return false;\n        return this.severities[component][severity];\n    }\n    log(severity, component, message) {\n        if (!this.willLog(component, severity))\n            return;\n        let logMessage = { t: new Date(), c: component, s: severity };\n        if (typeof message === 'string') {\n            logMessage.message = message;\n        }\n        else if (typeof message === 'object') {\n            if (isLogConvertible(message)) {\n                logMessage = { ...logMessage, ...message.toLog() };\n            }\n            else {\n                logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n            }\n        }\n        if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n            this.pendingLog = this.pendingLog\n                .then(() => this.logDestination.write(logMessage))\n                .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            return;\n        }\n        try {\n            const logResult = this.logDestination.write(logMessage);\n            if ((0, utils_1.isPromiseLike)(logResult)) {\n                this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            }\n        }\n        catch (error) {\n            this.logWriteFailureHandler(error);\n        }\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */\n    static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolvedLogPath.mongodbLogPath,\n            mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n        };\n        const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n        return {\n            componentSeverities: {\n                command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n                topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n                serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n                connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n                client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n                default: defaultSeverity\n            },\n            maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ??\n                (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n                1000,\n            logDestination: combinedOptions.mongodbLogPath,\n            logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n        };\n    }\n}\nexports.MongoLogger = MongoLogger;\n//# sourceMappingURL=mongo_logger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationToken = exports.TypedEventEmitter = void 0;\nconst events_1 = require(\"events\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst utils_1 = require(\"./utils\");\n/**\n * Typescript type safe event emitter\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass TypedEventEmitter extends events_1.EventEmitter {\n    /** @internal */\n    emitAndLog(event, ...args) {\n        this.emit(event, ...args);\n        if (this.component)\n            this.mongoLogger?.debug(this.component, args[0]);\n    }\n    /** @internal */\n    emitAndLogHeartbeat(event, topologyId, serverConnectionId, ...args) {\n        this.emit(event, ...args);\n        if (this.component) {\n            const loggableHeartbeatEvent = {\n                topologyId: topologyId,\n                serverConnectionId: serverConnectionId ?? null,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(this.component, loggableHeartbeatEvent);\n        }\n    }\n    /** @internal */\n    emitAndLogCommand(monitorCommands, event, databaseName, connectionEstablished, ...args) {\n        if (monitorCommands) {\n            this.emit(event, ...args);\n        }\n        if (connectionEstablished) {\n            const loggableCommandEvent = {\n                databaseName: databaseName,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.COMMAND, loggableCommandEvent);\n        }\n    }\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n/**\n * @public\n * @deprecated Will be removed in favor of `AbortSignal` in the next major release.\n */\nclass CancellationToken extends TypedEventEmitter {\n    constructor(...args) {\n        super(...args);\n        this.on('error', utils_1.noop);\n    }\n}\nexports.CancellationToken = CancellationToken;\n//# sourceMappingURL=mongo_types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst responses_1 = require(\"../cmap/wire_protocol/responses\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nexports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\nclass AggregateOperation extends command_1.CommandOperation {\n    constructor(ns, pipeline, options) {\n        super(undefined, { ...options, dbName: ns.db });\n        this.options = { ...options };\n        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n        this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n        this.pipeline = pipeline;\n        // determine if we have a write stage, override read preference if so\n        this.hasWriteStage = false;\n        if (typeof options?.out === 'string') {\n            this.pipeline = this.pipeline.concat({ $out: options.out });\n            this.hasWriteStage = true;\n        }\n        else if (pipeline.length > 0) {\n            const finalStage = pipeline[pipeline.length - 1];\n            if (finalStage.$out || finalStage.$merge) {\n                this.hasWriteStage = true;\n            }\n        }\n        if (this.hasWriteStage) {\n            this.trySecondaryWrite = true;\n        }\n        else {\n            delete this.options.writeConcern;\n        }\n        if (this.explain && this.writeConcern) {\n            throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n        }\n        if (options?.cursor != null && typeof options.cursor !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n        }\n    }\n    get commandName() {\n        return 'aggregate';\n    }\n    get canRetryRead() {\n        return !this.hasWriteStage;\n    }\n    addToPipeline(stage) {\n        this.pipeline.push(stage);\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const command = { aggregate: this.target, pipeline: this.pipeline };\n        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n            this.readConcern = undefined;\n        }\n        if (this.hasWriteStage && this.writeConcern) {\n            write_concern_1.WriteConcern.apply(command, this.writeConcern);\n        }\n        if (options.bypassDocumentValidation === true) {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (typeof options.allowDiskUse === 'boolean') {\n            command.allowDiskUse = options.allowDiskUse;\n        }\n        if (options.hint) {\n            command.hint = options.hint;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        command.cursor = options.cursor || {};\n        if (options.batchSize && !this.hasWriteStage) {\n            command.cursor.batchSize = options.batchSize;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext, this.explain ? responses_1.ExplainedCursorResponse : responses_1.CursorResponse);\n    }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=aggregate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BulkWriteOperation = void 0;\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n    constructor(collection, operations, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.operations = operations;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    async execute(server, session, timeoutContext) {\n        const coll = this.collection;\n        const operations = this.operations;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            timeoutContext\n        };\n        // Create the bulk operation\n        const bulk = options.ordered === false\n            ? coll.initializeUnorderedBulkOp(options)\n            : coll.initializeOrderedBulkOp(options);\n        // for each op go through and add to the bulk\n        for (let i = 0; i < operations.length; i++) {\n            bulk.raw(operations[i]);\n        }\n        // Execute the bulk\n        return await bulk.execute({ ...options, session });\n    }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=bulk_write.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientBulkWriteOperation = void 0;\nconst beta_1 = require(\"../../beta\");\nconst responses_1 = require(\"../../cmap/wire_protocol/responses\");\nconst utils_1 = require(\"../../utils\");\nconst command_1 = require(\"../command\");\nconst operation_1 = require(\"../operation\");\n/**\n * Executes a single client bulk write operation within a potential batch.\n * @internal\n */\nclass ClientBulkWriteOperation extends command_1.CommandOperation {\n    get commandName() {\n        return 'bulkWrite';\n    }\n    constructor(commandBuilder, options) {\n        super(undefined, options);\n        this.commandBuilder = commandBuilder;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    resetBatch() {\n        return this.commandBuilder.resetBatch();\n    }\n    get canRetryWrite() {\n        return this.commandBuilder.isBatchRetryable;\n    }\n    /**\n     * Execute the command. Superclass will handle write concern, etc.\n     * @param server - The server.\n     * @param session - The session.\n     * @returns The response.\n     */\n    async execute(server, session, timeoutContext) {\n        let command;\n        if (server.description.type === beta_1.ServerType.LoadBalancer) {\n            if (session) {\n                let connection;\n                if (!session.pinnedConnection) {\n                    // Checkout a connection to build the command.\n                    connection = await server.pool.checkOut({ timeoutContext });\n                    // Pin the connection to the session so it get used to execute the command and we do not\n                    // perform a double check-in/check-out.\n                    session.pin(connection);\n                }\n                else {\n                    connection = session.pinnedConnection;\n                }\n                command = this.commandBuilder.buildBatch(connection.hello?.maxMessageSizeBytes, connection.hello?.maxWriteBatchSize, connection.hello?.maxBsonObjectSize);\n            }\n            else {\n                throw new beta_1.MongoClientBulkWriteExecutionError('Session provided to the client bulk write operation must be present.');\n            }\n        }\n        else {\n            // At this point we have a server and the auto connect code has already\n            // run in executeOperation, so the server description will be populated.\n            // We can use that to build the command.\n            if (!server.description.maxWriteBatchSize ||\n                !server.description.maxMessageSizeBytes ||\n                !server.description.maxBsonObjectSize) {\n                throw new beta_1.MongoClientBulkWriteExecutionError('In order to execute a client bulk write, both maxWriteBatchSize, maxMessageSizeBytes and maxBsonObjectSize must be provided by the servers hello response.');\n            }\n            command = this.commandBuilder.buildBatch(server.description.maxMessageSizeBytes, server.description.maxWriteBatchSize, server.description.maxBsonObjectSize);\n        }\n        // Check after the batch is built if we cannot retry it and override the option.\n        if (!this.canRetryWrite) {\n            this.options.willRetryWrite = false;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext, responses_1.ClientBulkWriteCursorResponse);\n    }\n}\nexports.ClientBulkWriteOperation = ClientBulkWriteOperation;\n// Skipping the collation as it goes on the individual ops.\n(0, operation_1.defineAspects)(ClientBulkWriteOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION,\n    operation_1.Aspect.CURSOR_CREATING,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.COMMAND_BATCHING\n]);\n//# sourceMappingURL=client_bulk_write.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildReplaceOneOperation = exports.buildUpdateManyOperation = exports.buildUpdateOneOperation = exports.buildDeleteManyOperation = exports.buildDeleteOneOperation = exports.buildInsertOneOperation = exports.ClientBulkWriteCommandBuilder = void 0;\nexports.buildOperation = buildOperation;\nconst bson_1 = require(\"../../bson\");\nconst commands_1 = require(\"../../cmap/commands\");\nconst error_1 = require(\"../../error\");\nconst sort_1 = require(\"../../sort\");\nconst utils_1 = require(\"../../utils\");\n/**\n * The bytes overhead for the extra fields added post command generation.\n */\nconst MESSAGE_OVERHEAD_BYTES = 1000;\n/** @internal */\nclass ClientBulkWriteCommandBuilder {\n    /**\n     * Create the command builder.\n     * @param models - The client write models.\n     */\n    constructor(models, options, pkFactory) {\n        this.models = models;\n        this.options = options;\n        this.pkFactory = pkFactory ?? utils_1.DEFAULT_PK_FACTORY;\n        this.currentModelIndex = 0;\n        this.previousModelIndex = 0;\n        this.lastOperations = [];\n        this.isBatchRetryable = true;\n    }\n    /**\n     * Gets the errorsOnly value for the command, which is the inverse of the\n     * user provided verboseResults option. Defaults to true.\n     */\n    get errorsOnly() {\n        if ('verboseResults' in this.options) {\n            return !this.options.verboseResults;\n        }\n        return true;\n    }\n    /**\n     * Determines if there is another batch to process.\n     * @returns True if not all batches have been built.\n     */\n    hasNextBatch() {\n        return this.currentModelIndex < this.models.length;\n    }\n    /**\n     * When we need to retry a command we need to set the current\n     * model index back to its previous value.\n     */\n    resetBatch() {\n        this.currentModelIndex = this.previousModelIndex;\n        return true;\n    }\n    /**\n     * Build a single batch of a client bulk write command.\n     * @param maxMessageSizeBytes - The max message size in bytes.\n     * @param maxWriteBatchSize - The max write batch size.\n     * @returns The client bulk write command.\n     */\n    buildBatch(maxMessageSizeBytes, maxWriteBatchSize, maxBsonObjectSize) {\n        // We start by assuming the batch has no multi-updates, so it is retryable\n        // until we find them.\n        this.isBatchRetryable = true;\n        let commandLength = 0;\n        let currentNamespaceIndex = 0;\n        const command = this.baseCommand();\n        const namespaces = new Map();\n        // In the case of retries we need to mark where we started this batch.\n        this.previousModelIndex = this.currentModelIndex;\n        while (this.currentModelIndex < this.models.length) {\n            const model = this.models[this.currentModelIndex];\n            const ns = model.namespace;\n            const nsIndex = namespaces.get(ns);\n            // Multi updates are not retryable.\n            if (model.name === 'deleteMany' || model.name === 'updateMany') {\n                this.isBatchRetryable = false;\n            }\n            if (nsIndex != null) {\n                // Build the operation and serialize it to get the bytes buffer.\n                const operation = buildOperation(model, nsIndex, this.pkFactory, this.options);\n                let operationBuffer;\n                try {\n                    operationBuffer = bson_1.BSON.serialize(operation);\n                }\n                catch (cause) {\n                    throw new error_1.MongoInvalidArgumentError(`Could not serialize operation to BSON`, { cause });\n                }\n                validateBufferSize('ops', operationBuffer, maxBsonObjectSize);\n                // Check if the operation buffer can fit in the command. If it can,\n                // then add the operation to the document sequence and increment the\n                // current length as long as the ops don't exceed the maxWriteBatchSize.\n                if (commandLength + operationBuffer.length < maxMessageSizeBytes &&\n                    command.ops.documents.length < maxWriteBatchSize) {\n                    // Pushing to the ops document sequence returns the total byte length of the document sequence.\n                    commandLength = MESSAGE_OVERHEAD_BYTES + command.ops.push(operation, operationBuffer);\n                    // Increment the builder's current model index.\n                    this.currentModelIndex++;\n                }\n                else {\n                    // The operation cannot fit in the current command and will need to\n                    // go in the next batch. Exit the loop.\n                    break;\n                }\n            }\n            else {\n                // The namespace is not already in the nsInfo so we will set it in the map, and\n                // construct our nsInfo and ops documents and buffers.\n                namespaces.set(ns, currentNamespaceIndex);\n                const nsInfo = { ns: ns };\n                const operation = buildOperation(model, currentNamespaceIndex, this.pkFactory, this.options);\n                let nsInfoBuffer;\n                let operationBuffer;\n                try {\n                    nsInfoBuffer = bson_1.BSON.serialize(nsInfo);\n                    operationBuffer = bson_1.BSON.serialize(operation);\n                }\n                catch (cause) {\n                    throw new error_1.MongoInvalidArgumentError(`Could not serialize ns info to BSON`, { cause });\n                }\n                validateBufferSize('nsInfo', nsInfoBuffer, maxBsonObjectSize);\n                validateBufferSize('ops', operationBuffer, maxBsonObjectSize);\n                // Check if the operation and nsInfo buffers can fit in the command. If they\n                // can, then add the operation and nsInfo to their respective document\n                // sequences and increment the current length as long as the ops don't exceed\n                // the maxWriteBatchSize.\n                if (commandLength + nsInfoBuffer.length + operationBuffer.length < maxMessageSizeBytes &&\n                    command.ops.documents.length < maxWriteBatchSize) {\n                    // Pushing to the ops document sequence returns the total byte length of the document sequence.\n                    commandLength =\n                        MESSAGE_OVERHEAD_BYTES +\n                            command.nsInfo.push(nsInfo, nsInfoBuffer) +\n                            command.ops.push(operation, operationBuffer);\n                    // We've added a new namespace, increment the namespace index.\n                    currentNamespaceIndex++;\n                    // Increment the builder's current model index.\n                    this.currentModelIndex++;\n                }\n                else {\n                    // The operation cannot fit in the current command and will need to\n                    // go in the next batch. Exit the loop.\n                    break;\n                }\n            }\n        }\n        // Set the last operations and return the command.\n        this.lastOperations = command.ops.documents;\n        return command;\n    }\n    baseCommand() {\n        const command = {\n            bulkWrite: 1,\n            errorsOnly: this.errorsOnly,\n            ordered: this.options.ordered ?? true,\n            ops: new commands_1.DocumentSequence('ops'),\n            nsInfo: new commands_1.DocumentSequence('nsInfo')\n        };\n        // Add bypassDocumentValidation if it was present in the options.\n        if (this.options.bypassDocumentValidation != null) {\n            command.bypassDocumentValidation = this.options.bypassDocumentValidation;\n        }\n        // Add let if it was present in the options.\n        if (this.options.let) {\n            command.let = this.options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ClientBulkWriteCommandBuilder = ClientBulkWriteCommandBuilder;\nfunction validateBufferSize(name, buffer, maxBsonObjectSize) {\n    if (buffer.length > maxBsonObjectSize) {\n        throw new error_1.MongoInvalidArgumentError(`Client bulk write operation ${name} of length ${buffer.length} exceeds the max bson object size of ${maxBsonObjectSize}`);\n    }\n}\n/**\n * Build the insert one operation.\n * @param model - The insert one model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildInsertOneOperation = (model, index, pkFactory) => {\n    const document = {\n        insert: index,\n        document: model.document\n    };\n    document.document._id = model.document._id ?? pkFactory.createPk();\n    return document;\n};\nexports.buildInsertOneOperation = buildInsertOneOperation;\n/**\n * Build the delete one operation.\n * @param model - The insert many model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildDeleteOneOperation = (model, index) => {\n    return createDeleteOperation(model, index, false);\n};\nexports.buildDeleteOneOperation = buildDeleteOneOperation;\n/**\n * Build the delete many operation.\n * @param model - The delete many model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildDeleteManyOperation = (model, index) => {\n    return createDeleteOperation(model, index, true);\n};\nexports.buildDeleteManyOperation = buildDeleteManyOperation;\n/**\n * Creates a delete operation based on the parameters.\n */\nfunction createDeleteOperation(model, index, multi) {\n    const document = {\n        delete: index,\n        multi: multi,\n        filter: model.filter\n    };\n    if (model.hint) {\n        document.hint = model.hint;\n    }\n    if (model.collation) {\n        document.collation = model.collation;\n    }\n    return document;\n}\n/**\n * Build the update one operation.\n * @param model - The update one model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildUpdateOneOperation = (model, index, options) => {\n    return createUpdateOperation(model, index, false, options);\n};\nexports.buildUpdateOneOperation = buildUpdateOneOperation;\n/**\n * Build the update many operation.\n * @param model - The update many model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildUpdateManyOperation = (model, index, options) => {\n    return createUpdateOperation(model, index, true, options);\n};\nexports.buildUpdateManyOperation = buildUpdateManyOperation;\n/**\n * Validate the update document.\n * @param update - The update document.\n */\nfunction validateUpdate(update, options) {\n    if (!(0, utils_1.hasAtomicOperators)(update, options)) {\n        throw new error_1.MongoAPIError('Client bulk write update models must only contain atomic modifiers (start with $) and must not be empty.');\n    }\n}\n/**\n * Creates a delete operation based on the parameters.\n */\nfunction createUpdateOperation(model, index, multi, options) {\n    // Update documents provided in UpdateOne and UpdateMany write models are\n    // required only to contain atomic modifiers (i.e. keys that start with \"$\").\n    // Drivers MUST throw an error if an update document is empty or if the\n    // document's first key does not start with \"$\".\n    validateUpdate(model.update, options);\n    const document = {\n        update: index,\n        multi: multi,\n        filter: model.filter,\n        updateMods: model.update\n    };\n    if (model.hint) {\n        document.hint = model.hint;\n    }\n    if (model.upsert) {\n        document.upsert = model.upsert;\n    }\n    if (model.arrayFilters) {\n        document.arrayFilters = model.arrayFilters;\n    }\n    if (model.collation) {\n        document.collation = model.collation;\n    }\n    if (!multi && 'sort' in model && model.sort != null) {\n        document.sort = (0, sort_1.formatSort)(model.sort);\n    }\n    return document;\n}\n/**\n * Build the replace one operation.\n * @param model - The replace one model.\n * @param index - The namespace index.\n * @returns the operation.\n */\nconst buildReplaceOneOperation = (model, index) => {\n    if ((0, utils_1.hasAtomicOperators)(model.replacement)) {\n        throw new error_1.MongoAPIError('Client bulk write replace models must not contain atomic modifiers (start with $) and must not be empty.');\n    }\n    const document = {\n        update: index,\n        multi: false,\n        filter: model.filter,\n        updateMods: model.replacement\n    };\n    if (model.hint) {\n        document.hint = model.hint;\n    }\n    if (model.upsert) {\n        document.upsert = model.upsert;\n    }\n    if (model.collation) {\n        document.collation = model.collation;\n    }\n    if (model.sort != null) {\n        document.sort = (0, sort_1.formatSort)(model.sort);\n    }\n    return document;\n};\nexports.buildReplaceOneOperation = buildReplaceOneOperation;\n/** @internal */\nfunction buildOperation(model, index, pkFactory, options) {\n    switch (model.name) {\n        case 'insertOne':\n            return (0, exports.buildInsertOneOperation)(model, index, pkFactory);\n        case 'deleteOne':\n            return (0, exports.buildDeleteOneOperation)(model, index);\n        case 'deleteMany':\n            return (0, exports.buildDeleteManyOperation)(model, index);\n        case 'updateOne':\n            return (0, exports.buildUpdateOneOperation)(model, index, options);\n        case 'updateMany':\n            return (0, exports.buildUpdateManyOperation)(model, index, options);\n        case 'replaceOne':\n            return (0, exports.buildReplaceOneOperation)(model, index);\n    }\n}\n//# sourceMappingURL=command_builder.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientBulkWriteExecutor = void 0;\nconst abstract_cursor_1 = require(\"../../cursor/abstract_cursor\");\nconst client_bulk_write_cursor_1 = require(\"../../cursor/client_bulk_write_cursor\");\nconst error_1 = require(\"../../error\");\nconst timeout_1 = require(\"../../timeout\");\nconst utils_1 = require(\"../../utils\");\nconst write_concern_1 = require(\"../../write_concern\");\nconst execute_operation_1 = require(\"../execute_operation\");\nconst client_bulk_write_1 = require(\"./client_bulk_write\");\nconst command_builder_1 = require(\"./command_builder\");\nconst results_merger_1 = require(\"./results_merger\");\n/**\n * Responsible for executing a client bulk write.\n * @internal\n */\nclass ClientBulkWriteExecutor {\n    /**\n     * Instantiate the executor.\n     * @param client - The mongo client.\n     * @param operations - The user supplied bulk write models.\n     * @param options - The bulk write options.\n     */\n    constructor(client, operations, options) {\n        if (operations.length === 0) {\n            throw new error_1.MongoClientBulkWriteExecutionError('No client bulk write models were provided.');\n        }\n        this.client = client;\n        this.operations = operations;\n        this.options = {\n            ordered: true,\n            bypassDocumentValidation: false,\n            verboseResults: false,\n            ...options\n        };\n        // If no write concern was provided, we inherit one from the client.\n        if (!this.options.writeConcern) {\n            this.options.writeConcern = write_concern_1.WriteConcern.fromOptions(this.client.s.options);\n        }\n        if (this.options.writeConcern?.w === 0) {\n            if (this.options.verboseResults) {\n                throw new error_1.MongoInvalidArgumentError('Cannot request unacknowledged write concern and verbose results');\n            }\n            if (this.options.ordered) {\n                throw new error_1.MongoInvalidArgumentError('Cannot request unacknowledged write concern and ordered writes');\n            }\n        }\n    }\n    /**\n     * Execute the client bulk write. Will split commands into batches and exhaust the cursors\n     * for each, then merge the results into one.\n     * @returns The result.\n     */\n    async execute() {\n        // The command builder will take the user provided models and potential split the batch\n        // into multiple commands due to size.\n        const pkFactory = this.client.s.options.pkFactory;\n        const commandBuilder = new command_builder_1.ClientBulkWriteCommandBuilder(this.operations, this.options, pkFactory);\n        // Unacknowledged writes need to execute all batches and return { ok: 1}\n        const resolvedOptions = (0, utils_1.resolveTimeoutOptions)(this.client, this.options);\n        const context = timeout_1.TimeoutContext.create(resolvedOptions);\n        if (this.options.writeConcern?.w === 0) {\n            while (commandBuilder.hasNextBatch()) {\n                const operation = new client_bulk_write_1.ClientBulkWriteOperation(commandBuilder, this.options);\n                await (0, execute_operation_1.executeOperation)(this.client, operation, context);\n            }\n            return results_merger_1.ClientBulkWriteResultsMerger.unacknowledged();\n        }\n        else {\n            const resultsMerger = new results_merger_1.ClientBulkWriteResultsMerger(this.options);\n            // For each command will will create and exhaust a cursor for the results.\n            while (commandBuilder.hasNextBatch()) {\n                const cursorContext = new abstract_cursor_1.CursorTimeoutContext(context, Symbol());\n                const options = {\n                    ...this.options,\n                    timeoutContext: cursorContext,\n                    ...(resolvedOptions.timeoutMS != null && { timeoutMode: abstract_cursor_1.CursorTimeoutMode.LIFETIME })\n                };\n                const cursor = new client_bulk_write_cursor_1.ClientBulkWriteCursor(this.client, commandBuilder, options);\n                try {\n                    await resultsMerger.merge(cursor);\n                }\n                catch (error) {\n                    // Write concern errors are recorded in the writeConcernErrors field on MongoClientBulkWriteError.\n                    // When a write concern error is encountered, it should not terminate execution of the bulk write\n                    // for either ordered or unordered bulk writes. However, drivers MUST throw an exception at the end\n                    // of execution if any write concern errors were observed.\n                    if (error instanceof error_1.MongoServerError && !(error instanceof error_1.MongoClientBulkWriteError)) {\n                        // Server side errors need to be wrapped inside a MongoClientBulkWriteError, where the root\n                        // cause is the error property and a partial result is to be included.\n                        const bulkWriteError = new error_1.MongoClientBulkWriteError({\n                            message: 'Mongo client bulk write encountered an error during execution'\n                        });\n                        bulkWriteError.cause = error;\n                        bulkWriteError.partialResult = resultsMerger.bulkWriteResult;\n                        throw bulkWriteError;\n                    }\n                    else {\n                        // Client side errors are just thrown.\n                        throw error;\n                    }\n                }\n            }\n            // If we have write concern errors or unordered write errors at the end we throw.\n            if (resultsMerger.writeConcernErrors.length > 0 || resultsMerger.writeErrors.size > 0) {\n                const error = new error_1.MongoClientBulkWriteError({\n                    message: 'Mongo client bulk write encountered errors during execution.'\n                });\n                error.writeConcernErrors = resultsMerger.writeConcernErrors;\n                error.writeErrors = resultsMerger.writeErrors;\n                error.partialResult = resultsMerger.bulkWriteResult;\n                throw error;\n            }\n            return resultsMerger.bulkWriteResult;\n        }\n    }\n}\nexports.ClientBulkWriteExecutor = ClientBulkWriteExecutor;\n//# sourceMappingURL=executor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientBulkWriteResultsMerger = void 0;\nconst __1 = require(\"../..\");\nconst error_1 = require(\"../../error\");\n/**\n * Unacknowledged bulk writes are always the same.\n */\nconst UNACKNOWLEDGED = {\n    acknowledged: false,\n    insertedCount: 0,\n    upsertedCount: 0,\n    matchedCount: 0,\n    modifiedCount: 0,\n    deletedCount: 0,\n    insertResults: undefined,\n    updateResults: undefined,\n    deleteResults: undefined\n};\n/**\n * Merges client bulk write cursor responses together into a single result.\n * @internal\n */\nclass ClientBulkWriteResultsMerger {\n    /**\n     * @returns The standard unacknowledged bulk write result.\n     */\n    static unacknowledged() {\n        return UNACKNOWLEDGED;\n    }\n    /**\n     * Instantiate the merger.\n     * @param options - The options.\n     */\n    constructor(options) {\n        this.options = options;\n        this.currentBatchOffset = 0;\n        this.writeConcernErrors = [];\n        this.writeErrors = new Map();\n        this.result = {\n            acknowledged: true,\n            insertedCount: 0,\n            upsertedCount: 0,\n            matchedCount: 0,\n            modifiedCount: 0,\n            deletedCount: 0,\n            insertResults: undefined,\n            updateResults: undefined,\n            deleteResults: undefined\n        };\n        if (options.verboseResults) {\n            this.result.insertResults = new Map();\n            this.result.updateResults = new Map();\n            this.result.deleteResults = new Map();\n        }\n    }\n    /**\n     * Get the bulk write result object.\n     */\n    get bulkWriteResult() {\n        return {\n            acknowledged: this.result.acknowledged,\n            insertedCount: this.result.insertedCount,\n            upsertedCount: this.result.upsertedCount,\n            matchedCount: this.result.matchedCount,\n            modifiedCount: this.result.modifiedCount,\n            deletedCount: this.result.deletedCount,\n            insertResults: this.result.insertResults,\n            updateResults: this.result.updateResults,\n            deleteResults: this.result.deleteResults\n        };\n    }\n    /**\n     * Merge the results in the cursor to the existing result.\n     * @param currentBatchOffset - The offset index to the original models.\n     * @param response - The cursor response.\n     * @param documents - The documents in the cursor.\n     * @returns The current result.\n     */\n    async merge(cursor) {\n        let writeConcernErrorResult;\n        try {\n            for await (const document of cursor) {\n                // Only add to maps if ok: 1\n                if (document.ok === 1) {\n                    if (this.options.verboseResults) {\n                        this.processDocument(cursor, document);\n                    }\n                }\n                else {\n                    // If an individual write error is encountered during an ordered bulk write, drivers MUST\n                    // record the error in writeErrors and immediately throw the exception. Otherwise, drivers\n                    // MUST continue to iterate the results cursor and execute any further bulkWrite batches.\n                    if (this.options.ordered) {\n                        const error = new error_1.MongoClientBulkWriteError({\n                            message: 'Mongo client ordered bulk write encountered a write error.'\n                        });\n                        error.writeErrors.set(document.idx + this.currentBatchOffset, {\n                            code: document.code,\n                            message: document.errmsg\n                        });\n                        error.partialResult = this.result;\n                        throw error;\n                    }\n                    else {\n                        this.writeErrors.set(document.idx + this.currentBatchOffset, {\n                            code: document.code,\n                            message: document.errmsg\n                        });\n                    }\n                }\n            }\n        }\n        catch (error) {\n            if (error instanceof __1.MongoWriteConcernError) {\n                const result = error.result;\n                writeConcernErrorResult = {\n                    insertedCount: result.nInserted,\n                    upsertedCount: result.nUpserted,\n                    matchedCount: result.nMatched,\n                    modifiedCount: result.nModified,\n                    deletedCount: result.nDeleted,\n                    writeConcernError: result.writeConcernError\n                };\n                if (this.options.verboseResults && result.cursor.firstBatch) {\n                    for (const document of result.cursor.firstBatch) {\n                        if (document.ok === 1) {\n                            this.processDocument(cursor, document);\n                        }\n                    }\n                }\n            }\n            else {\n                throw error;\n            }\n        }\n        finally {\n            // Update the counts from the cursor response.\n            if (cursor.response) {\n                const response = cursor.response;\n                this.incrementCounts(response);\n            }\n            // Increment the batch offset.\n            this.currentBatchOffset += cursor.operations.length;\n        }\n        // If we have write concern errors ensure they are added.\n        if (writeConcernErrorResult) {\n            const writeConcernError = writeConcernErrorResult.writeConcernError;\n            this.incrementCounts(writeConcernErrorResult);\n            this.writeConcernErrors.push({\n                code: writeConcernError.code,\n                message: writeConcernError.errmsg\n            });\n        }\n        return this.result;\n    }\n    /**\n     * Process an individual document in the results.\n     * @param cursor - The cursor.\n     * @param document - The document to process.\n     */\n    processDocument(cursor, document) {\n        // Get the corresponding operation from the command.\n        const operation = cursor.operations[document.idx];\n        // Handle insert results.\n        if ('insert' in operation) {\n            this.result.insertResults?.set(document.idx + this.currentBatchOffset, {\n                insertedId: operation.document._id\n            });\n        }\n        // Handle update results.\n        if ('update' in operation) {\n            const result = {\n                matchedCount: document.n,\n                modifiedCount: document.nModified ?? 0,\n                // Check if the bulk did actually upsert.\n                didUpsert: document.upserted != null\n            };\n            if (document.upserted) {\n                result.upsertedId = document.upserted._id;\n            }\n            this.result.updateResults?.set(document.idx + this.currentBatchOffset, result);\n        }\n        // Handle delete results.\n        if ('delete' in operation) {\n            this.result.deleteResults?.set(document.idx + this.currentBatchOffset, {\n                deletedCount: document.n\n            });\n        }\n    }\n    /**\n     * Increment the result counts.\n     * @param document - The document with the results.\n     */\n    incrementCounts(document) {\n        this.result.insertedCount += document.insertedCount;\n        this.result.upsertedCount += document.upsertedCount;\n        this.result.matchedCount += document.matchedCount;\n        this.result.modifiedCount += document.modifiedCount;\n        this.result.deletedCount += document.deletedCount;\n    }\n}\nexports.ClientBulkWriteResultsMerger = ClientBulkWriteResultsMerger;\n//# sourceMappingURL=results_merger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CollectionsOperation = void 0;\nconst collection_1 = require(\"../collection\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass CollectionsOperation extends operation_1.AbstractOperation {\n    constructor(db, options) {\n        super(options);\n        this.options = options;\n        this.db = db;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        // Let's get the collection names\n        const documents = await this.db\n            .listCollections({}, { ...this.options, nameOnly: true, readPreference: this.readPreference, session })\n            .toArray();\n        const collections = [];\n        for (const { name } of documents) {\n            if (!name.includes('$')) {\n                // Filter collections removing any illegal ones\n                collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n            }\n        }\n        // Return the collection objects\n        return collections;\n    }\n}\nexports.CollectionsOperation = CollectionsOperation;\n//# sourceMappingURL=collections.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommandOperation = void 0;\nconst error_1 = require(\"../error\");\nconst explain_1 = require(\"../explain\");\nconst read_concern_1 = require(\"../read_concern\");\nconst server_selection_1 = require(\"../sdam/server_selection\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options) {\n        super(options);\n        this.options = options ?? {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = options?.dbName || options?.authdb;\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n        }\n        else {\n            this.ns = parent\n                ? parent.s.namespace.withCollection('$cmd')\n                : new utils_1.MongoDBNamespace('admin', '$cmd');\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n            if (this.explain)\n                (0, explain_1.validateExplainTimeoutOptions)(this.options, this.explain);\n        }\n        else if (options?.explain != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return super.canRetryWrite;\n    }\n    async executeCommand(server, session, cmd, timeoutContext, responseType) {\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            timeoutContext,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n            Object.assign(cmd, { readConcern: this.readConcern });\n        }\n        if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n            options.omitReadPreference = true;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n        }\n        if (options.collation &&\n            typeof options.collation === 'object' &&\n            !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n            Object.assign(cmd, { collation: options.collation });\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            cmd = (0, explain_1.decorateWithExplain)(cmd, this.explain);\n        }\n        return await server.command(this.ns, cmd, options, responseType);\n    }\n}\nexports.CommandOperation = CommandOperation;\n//# sourceMappingURL=command.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CountOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass CountOperation extends command_1.CommandOperation {\n    constructor(namespace, filter, options) {\n        super({ s: { namespace: namespace } }, options);\n        this.options = options;\n        this.collectionName = namespace.collection;\n        this.query = filter;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options;\n        const cmd = {\n            count: this.collectionName,\n            query: this.query\n        };\n        if (typeof options.limit === 'number') {\n            cmd.limit = options.limit;\n        }\n        if (typeof options.skip === 'number') {\n            cmd.skip = options.skip;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        const result = await super.executeCommand(server, session, cmd, timeoutContext);\n        return result ? result.n : 0;\n    }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=count.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = require(\"../cmap/wire_protocol/constants\");\nconst collection_1 = require(\"../collection\");\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst indexes_1 = require(\"./indexes\");\nconst operation_1 = require(\"./operation\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    'w',\n    'wtimeout',\n    'timeoutMS',\n    'j',\n    'fsync',\n    'autoIndexId',\n    'pkFactory',\n    'raw',\n    'readPreference',\n    'session',\n    'readConcern',\n    'writeConcern',\n    'raw',\n    'fieldsAsRaw',\n    'useBigInt64',\n    'promoteLongs',\n    'promoteValues',\n    'promoteBuffers',\n    'bsonRegExp',\n    'serializeFunctions',\n    'ignoreUndefined',\n    'enableUtf8Validation'\n]);\n/* @internal */\nconst INVALID_QE_VERSION = 'Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.';\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    get commandName() {\n        return 'create';\n    }\n    async execute(server, session, timeoutContext) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const encryptedFields = options.encryptedFields ??\n            db.client.s.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (encryptedFields) {\n            // Creating a QE collection required min server of 7.0.0\n            // TODO(NODE-5353): Get wire version information from connection.\n            if (!server.loadBalanced &&\n                server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n                throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n            }\n            // Create auxilliary collections for queryable encryption support.\n            const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                const createOp = new CreateCollectionOperation(db, collectionName, {\n                    clusteredIndex: {\n                        key: { _id: 1 },\n                        unique: true\n                    }\n                });\n                await createOp.executeWithoutEncryptedFieldsCheck(server, session, timeoutContext);\n            }\n            if (!options.encryptedFields) {\n                this.options = { ...this.options, encryptedFields };\n            }\n        }\n        const coll = await this.executeWithoutEncryptedFieldsCheck(server, session, timeoutContext);\n        if (encryptedFields) {\n            // Create the required index for queryable encryption support.\n            const createIndexOp = indexes_1.CreateIndexesOperation.fromIndexSpecification(db, name, { __safeContent__: 1 }, {});\n            await createIndexOp.execute(server, session, timeoutContext);\n        }\n        return coll;\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session, timeoutContext) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const cmd = { create: name };\n        for (const n in options) {\n            if (options[n] != null &&\n                typeof options[n] !== 'function' &&\n                !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                cmd[n] = options[n];\n            }\n        }\n        // otherwise just execute the command\n        await super.executeCommand(server, session, cmd, timeoutContext);\n        return new collection_1.Collection(db, name, options);\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=create_collection.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\nexports.makeDeleteStatement = makeDeleteStatement;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DeleteOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'delete';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => (op.limit != null ? op.limit > 0 : true));\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            delete: this.ns.collection,\n            deletes: this.statements,\n            ordered\n        };\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        const res = await super.executeCommand(server, session, command, timeoutContext);\n        return res;\n    }\n}\nexports.DeleteOperation = DeleteOperation;\nclass DeleteOneOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, { ...options, limit: 1 })], options);\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteOneOperation = DeleteOneOperation;\nclass DeleteManyOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteManyOperation = DeleteManyOperation;\nfunction makeDeleteStatement(filter, options) {\n    const op = {\n        q: filter,\n        limit: typeof options.limit === 'number' ? options.limit : 0\n    };\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    return op;\n}\n(0, operation_1.defineAspects)(DeleteOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=delete.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DistinctOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nclass DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */\n    constructor(collection, key, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    get commandName() {\n        return 'distinct';\n    }\n    async execute(server, session, timeoutContext) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof options.comment !== 'undefined') {\n            cmd.comment = options.comment;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        const result = await super.executeCommand(server, session, cmd, timeoutContext);\n        // @ts-expect-error: Explain always returns a document\n        return this.explain ? result : result.values;\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    get commandName() {\n        return 'drop';\n    }\n    async execute(server, session, timeoutContext) {\n        const db = this.db;\n        const options = this.options;\n        const name = this.name;\n        const encryptedFieldsMap = db.client.s.options.autoEncryption?.encryptedFieldsMap;\n        let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (!encryptedFields && encryptedFieldsMap) {\n            // If the MongoClient was configured with an encryptedFieldsMap,\n            // and no encryptedFields config was available in it or explicitly\n            // passed as an argument, the spec tells us to look one up using\n            // listCollections().\n            const listCollectionsResult = await db\n                .listCollections({ name }, { nameOnly: false })\n                .toArray();\n            encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n        }\n        if (encryptedFields) {\n            const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                const dropOp = new DropCollectionOperation(db, collectionName);\n                try {\n                    await dropOp.executeWithoutEncryptedFieldsCheck(server, session, timeoutContext);\n                }\n                catch (err) {\n                    if (!(err instanceof error_1.MongoServerError) ||\n                        err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return await this.executeWithoutEncryptedFieldsCheck(server, session, timeoutContext);\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session, timeoutContext) {\n        await super.executeCommand(server, session, { drop: this.name }, timeoutContext);\n        return true;\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dropDatabase';\n    }\n    async execute(server, session, timeoutContext) {\n        await super.executeCommand(server, session, { dropDatabase: 1 }, timeoutContext);\n        return true;\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=drop.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n    constructor(collection, options = {}) {\n        super(collection, options);\n        this.options = options;\n        this.collectionName = collection.collectionName;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session, timeoutContext) {\n        const cmd = { count: this.collectionName };\n        if (typeof this.options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = this.options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        const response = await super.executeCommand(server, session, cmd, timeoutContext);\n        return response?.n || 0;\n    }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=estimated_document_count.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.executeOperation = executeOperation;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst server_selection_1 = require(\"../sdam/server_selection\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * Allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided.\n *\n * The expectation is that this function:\n * - Connects the MongoClient if it has not already been connected, see {@link autoConnect}\n * - Creates a session if none is provided and cleans up the session it creates\n * - Tries an operation and retries under certain conditions, see {@link tryOperation}\n *\n * @typeParam T - The operation's type\n * @typeParam TResult - The type of the operation's result, calculated from T\n *\n * @param client - The MongoClient to execute this operation with\n * @param operation - The operation to execute\n */\nasync function executeOperation(client, operation, timeoutContext) {\n    if (!(operation instanceof operation_1.AbstractOperation)) {\n        // TODO(NODE-3483): Extend MongoRuntimeError\n        throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n    }\n    const topology = client.topology == null\n        ? await (0, utils_1.abortable)(autoConnect(client), operation.options)\n        : client.topology;\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (session == null) {\n        owner = Symbol();\n        session = client.startSession({ owner, explicit: false });\n    }\n    else if (session.hasEnded) {\n        throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n    }\n    else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n    else if (session.client !== client) {\n        throw new error_1.MongoInvalidArgumentError('ClientSession must be from the same MongoClient');\n    }\n    const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n    const inTransaction = !!session?.inTransaction();\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    if (inTransaction &&\n        !readPreference.equals(read_preference_1.ReadPreference.primary) &&\n        (hasReadAspect || operation.commandName === 'runCommand')) {\n        throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n    }\n    if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n        session.unpin();\n    }\n    timeoutContext ??= timeout_1.TimeoutContext.create({\n        session,\n        serverSelectionTimeoutMS: client.s.options.serverSelectionTimeoutMS,\n        waitQueueTimeoutMS: client.s.options.waitQueueTimeoutMS,\n        timeoutMS: operation.options.timeoutMS\n    });\n    try {\n        return await tryOperation(operation, {\n            topology,\n            timeoutContext,\n            session,\n            readPreference\n        });\n    }\n    finally {\n        if (session?.owner != null && session.owner === owner) {\n            await session.endSession();\n        }\n    }\n}\n/**\n * Connects a client if it has not yet been connected\n * @internal\n */\nasync function autoConnect(client) {\n    if (client.topology == null) {\n        if (client.s.hasBeenClosed) {\n            throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n        }\n        client.s.options.__skipPingOnConnect = true;\n        try {\n            await client.connect();\n            if (client.topology == null) {\n                throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n            }\n            return client.topology;\n        }\n        finally {\n            delete client.s.options.__skipPingOnConnect;\n        }\n    }\n    return client.topology;\n}\n/**\n * Executes an operation and retries as appropriate\n * @internal\n *\n * @remarks\n * Implements behaviour described in [Retryable Reads](https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.md) and [Retryable\n * Writes](https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.md) specification\n *\n * This function:\n * - performs initial server selection\n * - attempts to execute an operation\n * - retries the operation if it meets the criteria for a retryable read or a retryable write\n *\n * @typeParam T - The operation's type\n * @typeParam TResult - The type of the operation's result, calculated from T\n *\n * @param operation - The operation to execute\n * */\nasync function tryOperation(operation, { topology, timeoutContext, session, readPreference }) {\n    let selector;\n    if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n        // GetMore and KillCursor operations must always select the same server, but run through\n        // server selection to potentially force monitor checks if the server is\n        // in an unknown state.\n        selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n    }\n    else if (operation.trySecondaryWrite) {\n        // If operation should try to write to secondary use the custom server selector\n        // otherwise provide the read preference.\n        selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n    }\n    else {\n        selector = readPreference;\n    }\n    let server = await topology.selectServer(selector, {\n        session,\n        operationName: operation.commandName,\n        timeoutContext,\n        signal: operation.options.signal\n    });\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const inTransaction = session?.inTransaction() ?? false;\n    const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n    const willRetryWrite = topology.s.options.retryWrites &&\n        !inTransaction &&\n        (0, utils_1.supportsRetryableWrites)(server) &&\n        operation.canRetryWrite;\n    const willRetry = operation.hasAspect(operation_1.Aspect.RETRYABLE) &&\n        session != null &&\n        ((hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite));\n    if (hasWriteAspect && willRetryWrite && session != null) {\n        operation.options.willRetryWrite = true;\n        session.incrementTransactionNumber();\n    }\n    const maxTries = willRetry ? (timeoutContext.csotEnabled() ? Infinity : 2) : 1;\n    let previousOperationError;\n    let previousServer;\n    for (let tries = 0; tries < maxTries; tries++) {\n        if (previousOperationError) {\n            if (hasWriteAspect && previousOperationError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n                throw new error_1.MongoServerError({\n                    message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n                    errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n                    originalError: previousOperationError\n                });\n            }\n            if (operation.hasAspect(operation_1.Aspect.COMMAND_BATCHING) && !operation.canRetryWrite) {\n                throw previousOperationError;\n            }\n            if (hasWriteAspect && !(0, error_1.isRetryableWriteError)(previousOperationError))\n                throw previousOperationError;\n            if (hasReadAspect && !(0, error_1.isRetryableReadError)(previousOperationError))\n                throw previousOperationError;\n            if (previousOperationError instanceof error_1.MongoNetworkError &&\n                operation.hasAspect(operation_1.Aspect.CURSOR_CREATING) &&\n                session != null &&\n                session.isPinned &&\n                !session.inTransaction()) {\n                session.unpin({ force: true, forceClear: true });\n            }\n            server = await topology.selectServer(selector, {\n                session,\n                operationName: operation.commandName,\n                previousServer,\n                signal: operation.options.signal\n            });\n            if (hasWriteAspect && !(0, utils_1.supportsRetryableWrites)(server)) {\n                throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n            }\n        }\n        try {\n            // If tries > 0 and we are command batching we need to reset the batch.\n            if (tries > 0 && operation.hasAspect(operation_1.Aspect.COMMAND_BATCHING)) {\n                operation.resetBatch();\n            }\n            return await operation.execute(server, session, timeoutContext);\n        }\n        catch (operationError) {\n            if (!(operationError instanceof error_1.MongoError))\n                throw operationError;\n            if (previousOperationError != null &&\n                operationError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n                throw previousOperationError;\n            }\n            previousServer = server.description;\n            previousOperationError = operationError;\n            // Reset timeouts\n            timeoutContext.clear();\n        }\n    }\n    throw (previousOperationError ??\n        new error_1.MongoRuntimeError('Tried to propagate retryability error, but no error was found.'));\n}\n//# sourceMappingURL=execute_operation.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindOperation = void 0;\nconst responses_1 = require(\"../cmap/wire_protocol/responses\");\nconst error_1 = require(\"../error\");\nconst explain_1 = require(\"../explain\");\nconst read_concern_1 = require(\"../read_concern\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n    constructor(ns, filter = {}, options = {}) {\n        super(undefined, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.ns = ns;\n        if (typeof filter !== 'object' || Array.isArray(filter)) {\n            throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n        }\n        // special case passing in an ObjectId as a filter\n        this.filter = filter != null && filter._bsontype === 'ObjectId' ? { _id: filter } : filter;\n    }\n    get commandName() {\n        return 'find';\n    }\n    async execute(server, session, timeoutContext) {\n        this.server = server;\n        const options = this.options;\n        let findCommand = makeFindCommand(this.ns, this.filter, options);\n        if (this.explain) {\n            (0, explain_1.validateExplainTimeoutOptions)(this.options, this.explain);\n            findCommand = (0, explain_1.decorateWithExplain)(findCommand, this.explain);\n        }\n        return await server.command(this.ns, findCommand, {\n            ...this.options,\n            ...this.bsonOptions,\n            documentsReturnedIn: 'firstBatch',\n            session,\n            timeoutContext\n        }, this.explain ? responses_1.ExplainedCursorResponse : responses_1.CursorResponse);\n    }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n    const findCommand = {\n        find: ns.collection,\n        filter\n    };\n    if (options.sort) {\n        findCommand.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    if (options.projection) {\n        let projection = options.projection;\n        if (projection && Array.isArray(projection)) {\n            projection = projection.length\n                ? projection.reduce((result, field) => {\n                    result[field] = 1;\n                    return result;\n                }, {})\n                : { _id: 1 };\n        }\n        findCommand.projection = projection;\n    }\n    if (options.hint) {\n        findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n    }\n    if (typeof options.skip === 'number') {\n        findCommand.skip = options.skip;\n    }\n    if (typeof options.limit === 'number') {\n        if (options.limit < 0) {\n            findCommand.limit = -options.limit;\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.limit = options.limit;\n        }\n    }\n    if (typeof options.batchSize === 'number') {\n        if (options.batchSize < 0) {\n            if (options.limit &&\n                options.limit !== 0 &&\n                Math.abs(options.batchSize) < Math.abs(options.limit)) {\n                findCommand.limit = -options.batchSize;\n            }\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.batchSize = options.batchSize;\n        }\n    }\n    if (typeof options.singleBatch === 'boolean') {\n        findCommand.singleBatch = options.singleBatch;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n        findCommand.comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n        findCommand.maxTimeMS = options.maxTimeMS;\n    }\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n        findCommand.readConcern = readConcern.toJSON();\n    }\n    if (options.max) {\n        findCommand.max = options.max;\n    }\n    if (options.min) {\n        findCommand.min = options.min;\n    }\n    if (typeof options.returnKey === 'boolean') {\n        findCommand.returnKey = options.returnKey;\n    }\n    if (typeof options.showRecordId === 'boolean') {\n        findCommand.showRecordId = options.showRecordId;\n    }\n    if (typeof options.tailable === 'boolean') {\n        findCommand.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === 'boolean') {\n        findCommand.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === 'boolean') {\n        findCommand.noCursorTimeout = !options.timeout;\n    }\n    else if (typeof options.noCursorTimeout === 'boolean') {\n        findCommand.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === 'boolean') {\n        findCommand.awaitData = options.awaitData;\n    }\n    if (typeof options.allowPartialResults === 'boolean') {\n        findCommand.allowPartialResults = options.allowPartialResults;\n    }\n    if (options.collation) {\n        findCommand.collation = options.collation;\n    }\n    if (typeof options.allowDiskUse === 'boolean') {\n        findCommand.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.let) {\n        findCommand.let = options.let;\n    }\n    return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=find.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.FindAndModifyOperation = exports.ReturnDocument = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        options.includeResultMetadata ??= false;\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    get commandName() {\n        return 'findAndModify';\n    }\n    async execute(server, session, timeoutContext) {\n        const coll = this.collection;\n        const query = this.query;\n        const options = { ...this.options, ...this.bsonOptions };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = this.writeConcern?.w === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');\n            }\n            cmd.hint = options.hint;\n        }\n        // Execute the command\n        const result = await super.executeCommand(server, session, cmd, timeoutContext);\n        return options.includeResultMetadata ? result : (result.value ?? null);\n    }\n}\nexports.FindAndModifyOperation = FindAndModifyOperation;\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options) {\n        // Basic validation\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update, options)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]);\n//# sourceMappingURL=find_and_modify.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetMoreOperation = void 0;\nconst responses_1 = require(\"../cmap/wire_protocol/responses\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass GetMoreOperation extends operation_1.AbstractOperation {\n    constructor(ns, cursorId, server, options) {\n        super(options);\n        this.options = options;\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'getMore';\n    }\n    /**\n     * Although there is a server already associated with the get more operation, the signature\n     * for execute passes a server so we will just use that one.\n     */\n    async execute(server, _session, timeoutContext) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Getmore must run on the same server operation began on');\n        }\n        if (this.cursorId == null || this.cursorId.isZero()) {\n            throw new error_1.MongoRuntimeError('Unable to iterate cursor with no id');\n        }\n        const collection = this.ns.collection;\n        if (collection == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before getMore');\n        }\n        const getMoreCmd = {\n            getMore: this.cursorId,\n            collection\n        };\n        if (typeof this.options.batchSize === 'number') {\n            getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n        }\n        if (typeof this.options.maxAwaitTimeMS === 'number') {\n            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n            getMoreCmd.comment = this.options.comment;\n        }\n        const commandOptions = {\n            returnFieldSelector: null,\n            documentsReturnedIn: 'nextBatch',\n            timeoutContext,\n            ...this.options\n        };\n        return await server.command(this.ns, getMoreCmd, commandOptions, responses_1.CursorResponse);\n    }\n}\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=get_more.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListIndexesOperation = exports.DropIndexOperation = exports.CreateIndexesOperation = void 0;\nconst responses_1 = require(\"../cmap/wire_protocol/responses\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\nconst VALID_INDEX_OPTIONS = new Set([\n    'background',\n    'unique',\n    'name',\n    'partialFilterExpression',\n    'sparse',\n    'hidden',\n    'expireAfterSeconds',\n    'storageEngine',\n    'collation',\n    'version',\n    // text indexes\n    'weights',\n    'default_language',\n    'language_override',\n    'textIndexVersion',\n    // 2d-sphere indexes\n    '2dsphereIndexVersion',\n    // 2d indexes\n    'bits',\n    'min',\n    'max',\n    // geoHaystack Indexes\n    'bucketSize',\n    // wildcard indexes\n    'wildcardProjection'\n]);\nfunction isIndexDirection(x) {\n    return (typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack');\n}\nfunction isSingleIndexTuple(t) {\n    return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\n/**\n * Converts an `IndexSpecification`, which can be specified in multiple formats, into a\n * valid `key` for the createIndexes command.\n */\nfunction constructIndexDescriptionMap(indexSpec) {\n    const key = new Map();\n    const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n    // Iterate through array and handle different types\n    for (const spec of indexSpecs) {\n        if (typeof spec === 'string') {\n            key.set(spec, 1);\n        }\n        else if (Array.isArray(spec)) {\n            key.set(spec[0], spec[1] ?? 1);\n        }\n        else if (spec instanceof Map) {\n            for (const [property, value] of spec) {\n                key.set(property, value);\n            }\n        }\n        else if ((0, utils_1.isObject)(spec)) {\n            for (const [property, value] of Object.entries(spec)) {\n                key.set(property, value);\n            }\n        }\n    }\n    return key;\n}\n/**\n * Receives an index description and returns a modified index description which has had invalid options removed\n * from the description and has mapped the `version` option to the `v` option.\n */\nfunction resolveIndexDescription(description) {\n    const validProvidedOptions = Object.entries(description).filter(([optionName]) => VALID_INDEX_OPTIONS.has(optionName));\n    return Object.fromEntries(\n    // we support the `version` option, but the `createIndexes` command expects it to be the `v`\n    validProvidedOptions.map(([name, value]) => (name === 'version' ? ['v', value] : [name, value])));\n}\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n    constructor(parent, collectionName, indexes, options) {\n        super(parent, options);\n        this.options = options ?? {};\n        this.collectionName = collectionName;\n        this.indexes = indexes.map((userIndex) => {\n            // Ensure the key is a Map to preserve index key ordering\n            const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n            const name = userIndex.name ?? Array.from(key).flat().join('_');\n            const validIndexOptions = resolveIndexDescription(userIndex);\n            return {\n                ...validIndexOptions,\n                name,\n                key\n            };\n        });\n    }\n    static fromIndexDescriptionArray(parent, collectionName, indexes, options) {\n        return new CreateIndexesOperation(parent, collectionName, indexes, options);\n    }\n    static fromIndexSpecification(parent, collectionName, indexSpec, options = {}) {\n        const key = constructIndexDescriptionMap(indexSpec);\n        const description = { ...options, key };\n        return new CreateIndexesOperation(parent, collectionName, [description], options);\n    }\n    get commandName() {\n        return 'createIndexes';\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options;\n        const indexes = this.indexes;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cmd = { createIndexes: this.collectionName, indexes };\n        if (options.commitQuorum != null) {\n            if (serverWireVersion < 9) {\n                throw new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4');\n            }\n            cmd.commitQuorum = options.commitQuorum;\n        }\n        // collation is set on each index, it should not be defined at the root\n        this.options.collation = undefined;\n        await super.executeCommand(server, session, cmd, timeoutContext);\n        const indexNames = indexes.map(index => index.name || '');\n        return indexNames;\n    }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n    constructor(collection, indexName, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.indexName = indexName;\n    }\n    get commandName() {\n        return 'dropIndexes';\n    }\n    async execute(server, session, timeoutContext) {\n        const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n        return await super.executeCommand(server, session, cmd, timeoutContext);\n    }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n    constructor(collection, options) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.collectionNamespace = collection.s.namespace;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session, timeoutContext) {\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n        const command = { listIndexes: this.collectionNamespace.collection, cursor };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext, responses_1.CursorResponse);\n    }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=indexes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst bulk_write_1 = require(\"./bulk_write\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options) {\n        super(undefined, options);\n        this.options = { ...options, checkKeys: options.checkKeys ?? false };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options) {\n        super(collection.s.namespace, (0, utils_1.maybeAddIdToDocuments)(collection, [doc], options), options);\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options) {\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session, timeoutContext) {\n        const coll = this.collection;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, this.docs.map(document => ({\n            insertOne: { document }\n        })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session, timeoutContext);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        }\n        catch (err) {\n            if (err && err.message === 'Operation must be an object with an operation key') {\n                throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=insert.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IsCappedOperation = void 0;\nconst error_1 = require(\"../error\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass IsCappedOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return !!collection.options?.capped;\n    }\n}\nexports.IsCappedOperation = IsCappedOperation;\n//# sourceMappingURL=is_capped.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KillCursorsOperation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\nclass KillCursorsOperation extends operation_1.AbstractOperation {\n    constructor(cursorId, ns, server, options) {\n        super(options);\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'killCursors';\n    }\n    async execute(server, session, timeoutContext) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Killcursor must run on the same server operation began on');\n        }\n        const killCursors = this.ns.collection;\n        if (killCursors == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before killCursors');\n        }\n        const killCursorsCommand = {\n            killCursors,\n            cursors: [this.cursorId]\n        };\n        try {\n            await server.command(this.ns, killCursorsCommand, {\n                session,\n                timeoutContext\n            });\n        }\n        catch (error) {\n            // The driver should never emit errors from killCursors, this is spec-ed behavior\n            (0, utils_1.squashError)(error);\n        }\n    }\n}\nexports.KillCursorsOperation = KillCursorsOperation;\n(0, operation_1.defineAspects)(KillCursorsOperation, [operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=kill_cursors.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCollectionsOperation = void 0;\nconst responses_1 = require(\"../cmap/wire_protocol/responses\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options) {\n        super(db, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        this.authorizedCollections = !!this.options.authorizedCollections;\n        if (typeof this.options.batchSize === 'number') {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session, timeoutContext) {\n        return await super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)), timeoutContext, responses_1.CursorResponse);\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */\n    generateCommand(wireVersion) {\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n            nameOnly: this.nameOnly,\n            authorizedCollections: this.authorizedCollections\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (wireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=list_collections.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass ListDatabasesOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options ?? {};\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'listDatabases';\n    }\n    async execute(server, session, timeoutContext) {\n        const cmd = { listDatabases: 1 };\n        if (typeof this.options.nameOnly === 'boolean') {\n            cmd.nameOnly = this.options.nameOnly;\n        }\n        if (this.options.filter) {\n            cmd.filter = this.options.filter;\n        }\n        if (typeof this.options.authorizedDatabases === 'boolean') {\n            cmd.authorizedDatabases = this.options.authorizedDatabases;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        return await super.executeCommand(server, session, cmd, timeoutContext);\n    }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=list_databases.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractOperation = exports.Aspect = void 0;\nexports.defineAspects = defineAspects;\nconst bson_1 = require(\"../bson\");\nconst read_preference_1 = require(\"../read_preference\");\nexports.Aspect = {\n    READ_OPERATION: Symbol('READ_OPERATION'),\n    WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n    RETRYABLE: Symbol('RETRYABLE'),\n    EXPLAINABLE: Symbol('EXPLAINABLE'),\n    SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n    CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n    MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER'),\n    COMMAND_BATCHING: Symbol('COMMAND_BATCHING')\n};\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n    constructor(options = {}) {\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION)\n            ? read_preference_1.ReadPreference.primary\n            : (read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary);\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this._session = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    // Make sure the session is not writable from outside this class.\n    get session() {\n        return this._session;\n    }\n    clearSession() {\n        this._session = undefined;\n    }\n    resetBatch() {\n        return true;\n    }\n    get canRetryRead() {\n        return this.hasAspect(exports.Aspect.RETRYABLE) && this.hasAspect(exports.Aspect.READ_OPERATION);\n    }\n    get canRetryWrite() {\n        return this.hasAspect(exports.Aspect.RETRYABLE) && this.hasAspect(exports.Aspect.WRITE_OPERATION);\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [aspects];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, 'aspects', {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\n//# sourceMappingURL=operation.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OptionsOperation = void 0;\nconst error_1 = require(\"../error\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass OptionsOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return collection.options;\n    }\n}\nexports.OptionsOperation = OptionsOperation;\n//# sourceMappingURL=options_operation.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\n/** @internal */\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session, timeoutContext) {\n        const doc = await super.executeCommand(server, session, { profile: -1 }, timeoutContext);\n        if (doc.ok === 1) {\n            const was = doc.was;\n            if (was === 0)\n                return 'off';\n            if (was === 1)\n                return 'slow_only';\n            if (was === 2)\n                return 'all';\n            throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);\n        }\n        else {\n            throw new error_1.MongoUnexpectedServerResponseError('Error with profile command');\n        }\n    }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation;\n//# sourceMappingURL=profiling_level.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoveUserOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass RemoveUserOperation extends command_1.CommandOperation {\n    constructor(db, username, options) {\n        super(db, options);\n        this.options = options;\n        this.username = username;\n    }\n    get commandName() {\n        return 'dropUser';\n    }\n    async execute(server, session, timeoutContext) {\n        await super.executeCommand(server, session, { dropUser: this.username }, timeoutContext);\n        return true;\n    }\n}\nexports.RemoveUserOperation = RemoveUserOperation;\n(0, operation_1.defineAspects)(RemoveUserOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=remove_user.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RenameOperation = void 0;\nconst collection_1 = require(\"../collection\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass RenameOperation extends command_1.CommandOperation {\n    constructor(collection, newName, options) {\n        super(collection, options);\n        this.collection = collection;\n        this.newName = newName;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'renameCollection';\n    }\n    async execute(server, session, timeoutContext) {\n        // Build the command\n        const renameCollection = this.collection.namespace;\n        const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n        const dropTarget = typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;\n        const command = {\n            renameCollection: renameCollection,\n            to: toCollection,\n            dropTarget: dropTarget\n        };\n        await super.executeCommand(server, session, command, timeoutContext);\n        return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n    }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=rename.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass RunCommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = parent.s.namespace.withCollection('$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session, timeoutContext) {\n        this.server = server;\n        const res = await server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session,\n            timeoutContext\n        }, this.options.responseType);\n        return res;\n    }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n    constructor(command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session, timeoutContext) {\n        this.server = server;\n        const res = await server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session,\n            timeoutContext\n        });\n        return res;\n    }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation;\n//# sourceMappingURL=run_command.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, descriptions) {\n        super();\n        this.collection = collection;\n        this.descriptions = descriptions;\n    }\n    get commandName() {\n        return 'createSearchIndexes';\n    }\n    async execute(server, session, timeoutContext) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            createSearchIndexes: namespace.collection,\n            indexes: this.descriptions\n        };\n        const res = await server.command(namespace, command, {\n            session,\n            timeoutContext\n        });\n        const indexesCreated = res?.indexesCreated ?? [];\n        return indexesCreated.map(({ name }) => name);\n    }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;\n//# sourceMappingURL=create.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = require(\"../../error\");\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass DropSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name) {\n        super();\n        this.collection = collection;\n        this.name = name;\n    }\n    get commandName() {\n        return 'dropSearchIndex';\n    }\n    async execute(server, session, timeoutContext) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            dropSearchIndex: namespace.collection\n        };\n        if (typeof this.name === 'string') {\n            command.name = this.name;\n        }\n        try {\n            await server.command(namespace, command, { session, timeoutContext });\n        }\n        catch (error) {\n            const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n            if (!isNamespaceNotFoundError) {\n                throw error;\n            }\n        }\n    }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation;\n//# sourceMappingURL=drop.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateSearchIndexOperation = void 0;\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass UpdateSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name, definition) {\n        super();\n        this.collection = collection;\n        this.name = name;\n        this.definition = definition;\n    }\n    get commandName() {\n        return 'updateSearchIndex';\n    }\n    async execute(server, session, timeoutContext) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            updateSearchIndex: namespace.collection,\n            name: this.name,\n            definition: this.definition\n        };\n        await server.command(namespace, command, { session, timeoutContext });\n        return;\n    }\n}\nexports.UpdateSearchIndexOperation = UpdateSearchIndexOperation;\n//# sourceMappingURL=update.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\nexports.ProfilingLevel = Object.freeze({\n    off: 'off',\n    slowOnly: 'slow_only',\n    all: 'all'\n});\n/** @internal */\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, level, options) {\n        super(db, options);\n        this.options = options;\n        switch (level) {\n            case exports.ProfilingLevel.off:\n                this.profile = 0;\n                break;\n            case exports.ProfilingLevel.slowOnly:\n                this.profile = 1;\n                break;\n            case exports.ProfilingLevel.all:\n                this.profile = 2;\n                break;\n            default:\n                this.profile = 0;\n                break;\n        }\n        this.level = level;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session, timeoutContext) {\n        const level = this.level;\n        if (!levelValues.has(level)) {\n            throw new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`);\n        }\n        // TODO(NODE-3483): Determine error to put here\n        await super.executeCommand(server, session, { profile: this.profile }, timeoutContext);\n        return level;\n    }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;\n//# sourceMappingURL=set_profiling_level.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DbStatsOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DbStatsOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dbStats';\n    }\n    async execute(server, session, timeoutContext) {\n        const command = { dbStats: true };\n        if (this.options.scale != null) {\n            command.scale = this.options.scale;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext);\n    }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(DbStatsOperation, [operation_1.Aspect.READ_OPERATION]);\n//# sourceMappingURL=stats.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nexports.makeUpdateStatement = makeUpdateStatement;\nconst error_1 = require(\"../error\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nclass UpdateOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'update';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => op.multi == null || op.multi === false);\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            update: this.ns.collection,\n            updates: this.statements,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        const res = await super.executeCommand(server, session, command, timeoutContext);\n        return res;\n    }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: false })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update, options)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: true })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update, options)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n    constructor(collection, filter, replacement, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, replacement, { ...options, multi: false })], options);\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n    }\n    if (update == null || typeof update !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n    }\n    const op = { q: filter, u: update };\n    if (typeof options.upsert === 'boolean') {\n        op.upsert = options.upsert;\n    }\n    if (options.multi) {\n        op.multi = options.multi;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    if (options.arrayFilters) {\n        op.arrayFilters = options.arrayFilters;\n    }\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (!options.multi && options.sort != null) {\n        op.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    return op;\n}\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=update.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidateCollectionOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\n/** @internal */\nclass ValidateCollectionOperation extends command_1.CommandOperation {\n    constructor(admin, collectionName, options) {\n        // Decorate command with extra options\n        const command = { validate: collectionName };\n        const keys = Object.keys(options);\n        for (let i = 0; i < keys.length; i++) {\n            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n                command[keys[i]] = options[keys[i]];\n            }\n        }\n        super(admin.s.db, options);\n        this.options = options;\n        this.command = command;\n        this.collectionName = collectionName;\n    }\n    get commandName() {\n        return 'validate';\n    }\n    async execute(server, session, timeoutContext) {\n        const collectionName = this.collectionName;\n        const doc = await super.executeCommand(server, session, this.command, timeoutContext);\n        if (doc.result != null && typeof doc.result !== 'string')\n            throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');\n        if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        if (doc.valid != null && !doc.valid)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        return doc;\n    }\n}\nexports.ValidateCollectionOperation = ValidateCollectionOperation;\n//# sourceMappingURL=validate_collection.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n    local: 'local',\n    majority: 'majority',\n    linearizable: 'linearizable',\n    available: 'available',\n    snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level) {\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.md#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */\n        this.level = exports.ReadConcernLevel[level] ?? level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            }\n            else if (typeof readConcern === 'string') {\n                return new ReadConcern(readConcern);\n            }\n            else if ('level' in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n        return;\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return { level: this.level };\n    }\n}\nexports.ReadConcern = ReadConcern;\n//# sourceMappingURL=read_concern.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        if (!options)\n            return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nexports.ReadPreference = ReadPreference;\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\n//# sourceMappingURL=read_preference.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.configureResourceManagement = configureResourceManagement;\nexports.configureExplicitResourceManagement = configureExplicitResourceManagement;\n/** @internal */\nfunction configureResourceManagement(target) {\n    Symbol.asyncDispose &&\n        Object.defineProperty(target, Symbol.asyncDispose, {\n            value: async function asyncDispose() {\n                await this.asyncDispose();\n            },\n            enumerable: false,\n            configurable: true,\n            writable: true\n        });\n}\n/**\n * @beta\n * @experimental\n *\n * Attaches `Symbol.asyncDispose` methods to the MongoClient, Cursors, sessions and change streams\n * if Symbol.asyncDispose is defined.\n *\n * It's usually not necessary to call this method - the driver attempts to attach these methods\n * itself when its loaded.  However, sometimes the driver may be loaded before `Symbol.asyncDispose`\n * is defined, in which case it is necessary to call this method directly.  This can happen if the\n * application is polyfilling `Symbol.asyncDispose`.\n *\n * Example:\n *\n * ```typescript\n * import { configureExplicitResourceManagement, MongoClient } from 'mongodb/lib/beta';\n *\n * Symbol.asyncDispose ??= Symbol('dispose');\n * load();\n *\n * await using client = new MongoClient(...);\n * ```\n */\nfunction configureExplicitResourceManagement() {\n    // We must import lazily here, because there's a circular dependency between the resource management\n    // file and each resources' file.  We could move `configureResourceManagement` to a separate\n    // function, but keeping all resource-management related code together seemed preferable and I chose\n    // lazy requiring of resources instead.\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { MongoClient } = require('./mongo_client');\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { ClientSession } = require('./sessions');\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { AbstractCursor } = require('./cursor/abstract_cursor');\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const { ChangeStream } = require('./change_stream');\n    configureResourceManagement(MongoClient.prototype);\n    configureResourceManagement(ClientSession.prototype);\n    configureResourceManagement(AbstractCursor.prototype);\n    configureResourceManagement(ChangeStream.prototype);\n}\n//# sourceMappingURL=resource_management.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nexports._advanceClusterTime = _advanceClusterTime;\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n    Single: 'Single',\n    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n    Sharded: 'Sharded',\n    Unknown: 'Unknown',\n    LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n    Standalone: 'Standalone',\n    Mongos: 'Mongos',\n    PossiblePrimary: 'PossiblePrimary',\n    RSPrimary: 'RSPrimary',\n    RSSecondary: 'RSSecondary',\n    RSArbiter: 'RSArbiter',\n    RSOther: 'RSOther',\n    RSGhost: 'RSGhost',\n    Unknown: 'Unknown',\n    LoadBalancer: 'LoadBalancer'\n});\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    }\n    else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\nconst constants_1 = require(\"../constants\");\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, address, previousDescription, newDescription) {\n        this.name = constants_1.SERVER_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_OPENING;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_CLOSED;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, previousDescription, newDescription) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_OPENING;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_CLOSED;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n    /** @internal */\n    constructor(connectionId, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_STARTED;\n        this.connectionId = connectionId;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n    /** @internal */\n    constructor(connectionId, duration, reply, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply ?? {};\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n    /** @internal */\n    constructor(connectionId, duration, failure, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_FAILED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;\n//# sourceMappingURL=events.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RTTSampler = exports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst connect_1 = require(\"../cmap/connect\");\nconst client_metadata_1 = require(\"../cmap/handshake/client_metadata\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n    [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n    [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */\nexports.ServerMonitoringMode = Object.freeze({\n    auto: 'auto',\n    poll: 'poll',\n    stream: 'stream'\n});\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        /** @internal */\n        this.component = mongo_logger_1.MongoLoggableComponent.TOPOLOGY;\n        this.on('error', utils_1.noop);\n        this.server = server;\n        this.connection = null;\n        this.cancellationToken = new mongo_types_1.CancellationToken();\n        this.cancellationToken.setMaxListeners(Infinity);\n        this.monitorId = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n            serverMonitoringMode: options.serverMonitoringMode\n        });\n        this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n        this.mongoLogger = this.server.topology.client?.mongoLogger;\n        this.rttSampler = new RTTSampler(10);\n        const cancellationToken = this.cancellationToken;\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = {\n            id: '<monitor>',\n            generation: server.pool.generation,\n            cancellationToken,\n            hostAddress: server.description.hostAddress,\n            ...options,\n            // force BSON serialization options\n            raw: false,\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        };\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this.monitorId = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        this.monitorId?.wake();\n    }\n    reset() {\n        const topologyVersion = this.server.description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this.monitorId = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit('close');\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n    get roundTripTime() {\n        return this.rttSampler.average();\n    }\n    get minRoundTripTime() {\n        return this.rttSampler.min();\n    }\n    get latestRtt() {\n        return this.rttSampler.last;\n    }\n    addRttSample(rtt) {\n        this.rttSampler.addSample(rtt);\n    }\n    clearRttSamples() {\n        this.rttSampler.clear();\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    monitor.monitorId?.stop();\n    monitor.monitorId = undefined;\n    monitor.rttPinger?.close();\n    monitor.rttPinger = undefined;\n    monitor.cancellationToken.emit('cancel');\n    monitor.connection?.destroy();\n    monitor.connection = null;\n    monitor.clearRttSamples();\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n    // If we have no topology version we always poll no matter\n    // what the user provided, since the server does not support\n    // the streaming protocol.\n    if (topologyVersion == null)\n        return false;\n    const serverMonitoringMode = monitor.options.serverMonitoringMode;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.poll)\n        return false;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.stream)\n        return true;\n    // If we are in auto mode, we need to figure out if we're in a FaaS\n    // environment or not and choose the appropriate mode.\n    if (monitor.isRunningInFaasEnv)\n        return false;\n    return true;\n}\nfunction checkServer(monitor, callback) {\n    let start;\n    let awaited;\n    const topologyVersion = monitor.server.description.topologyVersion;\n    const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor.server.topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n    function onHeartbeatFailed(err) {\n        monitor.connection?.destroy();\n        monitor.connection = null;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_FAILED, monitor.server.topology.s.id, undefined, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n        const error = !(err instanceof error_1.MongoError)\n            ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), { cause: err })\n            : err;\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        }\n        monitor.emit('resetServer', error);\n        callback(err);\n    }\n    function onHeartbeatSucceeded(hello) {\n        if (!('isWritablePrimary' in hello)) {\n            // Provide hello-style response document.\n            hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n        }\n        // NOTE: here we use the latestRtt as this measurement corresponds with the value\n        // obtained for this successful heartbeat, if there is no latestRtt, then we calculate the\n        // duration\n        const duration = isAwaitable && monitor.rttPinger\n            ? (monitor.rttPinger.latestRtt ?? (0, utils_1.calculateDurationInMs)(start))\n            : (0, utils_1.calculateDurationInMs)(start);\n        monitor.addRttSample(duration);\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor.server.topology.s.id, hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n        if (isAwaitable) {\n            // If we are using the streaming protocol then we immediately issue another 'started'\n            // event, otherwise the \"check\" is complete and return to the main monitor loop\n            monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor.server.topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n            // We have not actually sent an outgoing handshake, but when we get the next response we\n            // want the duration to reflect the time since we last heard from the server\n            start = (0, utils_1.now)();\n        }\n        else {\n            monitor.rttPinger?.close();\n            monitor.rttPinger = undefined;\n            callback(undefined, hello);\n        }\n    }\n    const { connection } = monitor;\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const cmd = {\n            [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n            ...(isAwaitable && topologyVersion\n                ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n                : {})\n        };\n        const options = isAwaitable\n            ? {\n                socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n                exhaustAllowed: true\n            }\n            : { socketTimeoutMS: connectTimeoutMS };\n        if (isAwaitable && monitor.rttPinger == null) {\n            monitor.rttPinger = new RTTPinger(monitor);\n        }\n        // Record new start time before sending handshake\n        start = (0, utils_1.now)();\n        if (isAwaitable) {\n            awaited = true;\n            return connection.exhaustCommand((0, utils_1.ns)('admin.$cmd'), cmd, options, (error, hello) => {\n                if (error)\n                    return onHeartbeatFailed(error);\n                return onHeartbeatSucceeded(hello);\n            });\n        }\n        awaited = false;\n        connection\n            .command((0, utils_1.ns)('admin.$cmd'), cmd, options)\n            .then(onHeartbeatSucceeded, onHeartbeatFailed);\n        return;\n    }\n    // connecting does an implicit `hello`\n    (async () => {\n        const socket = await (0, connect_1.makeSocket)(monitor.connectOptions);\n        const connection = (0, connect_1.makeConnection)(monitor.connectOptions, socket);\n        // The start time is after socket creation but before the handshake\n        start = (0, utils_1.now)();\n        try {\n            await (0, connect_1.performInitialHandshake)(connection, monitor.connectOptions);\n            return connection;\n        }\n        catch (error) {\n            connection.destroy();\n            throw error;\n        }\n    })().then(connection => {\n        if (isInCloseState(monitor)) {\n            connection.destroy();\n            return;\n        }\n        const duration = (0, utils_1.calculateDurationInMs)(start);\n        monitor.addRttSample(duration);\n        monitor.connection = connection;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor.server.topology.s.id, connection.hello?.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, connection.hello, useStreamingProtocol(monitor, connection.hello?.topologyVersion)));\n        callback(undefined, connection.hello);\n    }, error => {\n        monitor.connection = null;\n        awaited = false;\n        onHeartbeatFailed(error);\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback) => {\n        if (monitor.s.state === STATE_MONITORING) {\n            process.nextTick(callback);\n            return;\n        }\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, hello) => {\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor.server.description.type === common_1.ServerType.Unknown) {\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n                (0, timers_1.setTimeout)(() => {\n                    if (!isInCloseState(monitor)) {\n                        monitor.monitorId?.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */\nclass RTTPinger {\n    constructor(monitor) {\n        this.connection = undefined;\n        this.cancellationToken = monitor.cancellationToken;\n        this.closed = false;\n        this.monitor = monitor;\n        this.latestRtt = monitor.latestRtt ?? undefined;\n        const heartbeatFrequencyMS = monitor.options.heartbeatFrequencyMS;\n        this.monitorId = (0, timers_1.setTimeout)(() => this.measureRoundTripTime(), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this.monitor.roundTripTime;\n    }\n    get minRoundTripTime() {\n        return this.monitor.minRoundTripTime;\n    }\n    close() {\n        this.closed = true;\n        (0, timers_1.clearTimeout)(this.monitorId);\n        this.connection?.destroy();\n        this.connection = undefined;\n    }\n    measureAndReschedule(start, conn) {\n        if (this.closed) {\n            conn?.destroy();\n            return;\n        }\n        if (this.connection == null) {\n            this.connection = conn;\n        }\n        this.latestRtt = (0, utils_1.calculateDurationInMs)(start);\n        this.monitorId = (0, timers_1.setTimeout)(() => this.measureRoundTripTime(), this.monitor.options.heartbeatFrequencyMS);\n    }\n    measureRoundTripTime() {\n        const start = (0, utils_1.now)();\n        if (this.closed) {\n            return;\n        }\n        const connection = this.connection;\n        if (connection == null) {\n            (0, connect_1.connect)(this.monitor.connectOptions).then(connection => {\n                this.measureAndReschedule(start, connection);\n            }, () => {\n                this.connection = undefined;\n            });\n            return;\n        }\n        const commandName = connection.serverApi?.version || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;\n        connection.command((0, utils_1.ns)('admin.$cmd'), { [commandName]: 1 }, undefined).then(() => this.measureAndReschedule(start), () => {\n            this.connection?.destroy();\n            this.connection = undefined;\n            return;\n        });\n    }\n}\nexports.RTTPinger = RTTPinger;\n/**\n * @internal\n */\nclass MonitorInterval {\n    constructor(fn, options = {}) {\n        this.isExpeditedCallToFnScheduled = false;\n        this.stopped = false;\n        this.isExecutionInProgress = false;\n        this.hasExecutedOnce = false;\n        this._executeAndReschedule = () => {\n            if (this.stopped)\n                return;\n            if (this.timerId) {\n                (0, timers_1.clearTimeout)(this.timerId);\n            }\n            this.isExpeditedCallToFnScheduled = false;\n            this.isExecutionInProgress = true;\n            this.fn(() => {\n                this.lastExecutionEnded = (0, utils_1.now)();\n                this.isExecutionInProgress = false;\n                this._reschedule(this.heartbeatFrequencyMS);\n            });\n        };\n        this.fn = fn;\n        this.lastExecutionEnded = -Infinity;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n        this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n        if (options.immediate) {\n            this._executeAndReschedule();\n        }\n        else {\n            this._reschedule(undefined);\n        }\n    }\n    wake() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        // TODO(NODE-4674): Add error handling and logging to the monitor\n        if (timeSinceLastCall < 0) {\n            return this._executeAndReschedule();\n        }\n        if (this.isExecutionInProgress) {\n            return;\n        }\n        // debounce multiple calls to wake within the `minInterval`\n        if (this.isExpeditedCallToFnScheduled) {\n            return;\n        }\n        // reschedule a call as soon as possible, ensuring the call never happens\n        // faster than the `minInterval`\n        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n            this.isExpeditedCallToFnScheduled = true;\n            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n            return;\n        }\n        this._executeAndReschedule();\n    }\n    stop() {\n        this.stopped = true;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n            this.timerId = undefined;\n        }\n        this.lastExecutionEnded = -Infinity;\n        this.isExpeditedCallToFnScheduled = false;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n    toJSON() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        return {\n            timerId: this.timerId != null ? 'set' : 'cleared',\n            lastCallTime: this.lastExecutionEnded,\n            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n            stopped: this.stopped,\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n            currentTime,\n            timeSinceLastCall\n        };\n    }\n    _reschedule(ms) {\n        if (this.stopped)\n            return;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n        }\n        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n}\nexports.MonitorInterval = MonitorInterval;\n/** @internal\n * This class implements the RTT sampling logic specified for [CSOT](https://github.com/mongodb/specifications/blob/bbb335e60cd7ea1e0f7cd9a9443cb95fc9d3b64d/source/client-side-operations-timeout/client-side-operations-timeout.md#drivers-use-minimum-rtt-to-short-circuit-operations)\n *\n * This is implemented as a [circular buffer](https://en.wikipedia.org/wiki/Circular_buffer) keeping\n * the most recent `windowSize` samples\n * */\nclass RTTSampler {\n    constructor(windowSize = 10) {\n        this.rttSamples = new Float64Array(windowSize);\n        this.length = 0;\n        this.writeIndex = 0;\n    }\n    /**\n     * Adds an rtt sample to the end of the circular buffer\n     * When `windowSize` samples have been collected, `addSample` overwrites the least recently added\n     * sample\n     */\n    addSample(sample) {\n        this.rttSamples[this.writeIndex++] = sample;\n        if (this.length < this.rttSamples.length) {\n            this.length++;\n        }\n        this.writeIndex %= this.rttSamples.length;\n    }\n    /**\n     * When \\< 2 samples have been collected, returns 0\n     * Otherwise computes the minimum value samples contained in the buffer\n     */\n    min() {\n        if (this.length < 2)\n            return 0;\n        let min = this.rttSamples[0];\n        for (let i = 1; i < this.length; i++) {\n            if (this.rttSamples[i] < min)\n                min = this.rttSamples[i];\n        }\n        return min;\n    }\n    /**\n     * Returns mean of samples contained in the buffer\n     */\n    average() {\n        if (this.length === 0)\n            return 0;\n        let sum = 0;\n        for (let i = 0; i < this.length; i++) {\n            sum += this.rttSamples[i];\n        }\n        return sum / this.length;\n    }\n    /**\n     * Returns most recently inserted element in the buffer\n     * Returns null if the buffer is empty\n     * */\n    get last() {\n        if (this.length === 0)\n            return null;\n        return this.rttSamples[this.writeIndex === 0 ? this.length - 1 : this.writeIndex - 1];\n    }\n    /**\n     * Clear the buffer\n     * NOTE: this does not overwrite the data held in the internal array, just the pointers into\n     * this array\n     */\n    clear() {\n        this.length = 0;\n        this.writeIndex = 0;\n    }\n}\nexports.RTTSampler = RTTSampler;\n//# sourceMappingURL=monitor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = void 0;\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst errors_1 = require(\"../cmap/errors\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst common_1 = require(\"./common\");\nconst monitor_1 = require(\"./monitor\");\nconst server_description_1 = require(\"./server_description\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.topology = topology;\n        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n        this.s = {\n            description,\n            options,\n            state: common_1.STATE_CLOSED,\n            operationCount: 0\n        };\n        for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n            this.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this.monitor = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        this.monitor = new monitor_1.Monitor(this, this.s.options);\n        for (const event of constants_1.HEARTBEAT_EVENTS) {\n            this.monitor.on(event, (e) => this.emit(event, e));\n        }\n        this.monitor.on('resetServer', (error) => markServerUnknown(this, error));\n        this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: this.monitor?.roundTripTime,\n                minRoundTripTime: this.monitor?.minRoundTripTime\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this.monitor?.connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    closeCheckedOutConnections() {\n        return this.pool.closeCheckedOutConnections();\n    }\n    /** Destroy the server connection */\n    close() {\n        if (this.s.state === common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this.monitor?.close();\n        }\n        this.pool.close();\n        stateTransition(this, common_1.STATE_CLOSED);\n        this.emit('closed');\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        if (!this.loadBalanced) {\n            this.monitor?.requestCheck();\n        }\n    }\n    async command(ns, cmd, { ...options }, responseType) {\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            throw new error_1.MongoServerClosedError();\n        }\n        options.directConnection = this.topology.s.options.directConnection;\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (options.omitReadPreference) {\n            delete options.readPreference;\n        }\n        if (this.description.iscryptd) {\n            options.omitMaxTimeMS = true;\n        }\n        const session = options.session;\n        let conn = session?.pinnedConnection;\n        this.incrementOperationCount();\n        if (conn == null) {\n            try {\n                conn = await this.pool.checkOut(options);\n                if (this.loadBalanced && isPinnableCommand(cmd, session)) {\n                    session?.pin(conn);\n                }\n            }\n            catch (checkoutError) {\n                this.decrementOperationCount();\n                if (!(checkoutError instanceof errors_1.PoolClearedError))\n                    this.handleError(checkoutError);\n                throw checkoutError;\n            }\n        }\n        let reauthPromise = null;\n        try {\n            try {\n                const res = await conn.command(ns, cmd, options, responseType);\n                (0, write_concern_1.throwIfWriteConcernError)(res);\n                return res;\n            }\n            catch (commandError) {\n                throw this.decorateCommandError(conn, cmd, options, commandError);\n            }\n        }\n        catch (operationError) {\n            if (operationError instanceof error_1.MongoError &&\n                operationError.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                reauthPromise = this.pool.reauthenticate(conn);\n                reauthPromise.then(undefined, error => {\n                    reauthPromise = null;\n                    (0, utils_1.squashError)(error);\n                });\n                await (0, utils_1.abortable)(reauthPromise, options);\n                reauthPromise = null; // only reachable if reauth succeeds\n                try {\n                    const res = await conn.command(ns, cmd, options, responseType);\n                    (0, write_concern_1.throwIfWriteConcernError)(res);\n                    return res;\n                }\n                catch (commandError) {\n                    throw this.decorateCommandError(conn, cmd, options, commandError);\n                }\n            }\n            else {\n                throw operationError;\n            }\n        }\n        finally {\n            this.decrementOperationCount();\n            if (session?.pinnedConnection !== conn) {\n                if (reauthPromise != null) {\n                    // The reauth promise only exists if it hasn't thrown.\n                    const checkBackIn = () => {\n                        this.pool.checkIn(conn);\n                    };\n                    void reauthPromise.then(checkBackIn, checkBackIn);\n                }\n                else {\n                    this.pool.checkIn(conn);\n                }\n            }\n        }\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */\n    handleError(error, connection) {\n        if (!(error instanceof error_1.MongoError)) {\n            return;\n        }\n        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n        if (isStaleError) {\n            return;\n        }\n        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n        const isNetworkTimeoutBeforeHandshakeError = error instanceof error_1.MongoNetworkError && error.beforeHandshake;\n        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n            // In load balanced mode we never mark the server as unknown and always\n            // clear for the specific service id.\n            if (!this.loadBalanced) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                markServerUnknown(this, error);\n            }\n            else if (connection) {\n                this.pool.clear({ serviceId: connection.serviceId });\n            }\n        }\n        else {\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(this, error)) {\n                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n                    if (this.loadBalanced && connection && shouldClearPool) {\n                        this.pool.clear({ serviceId: connection.serviceId });\n                    }\n                    if (!this.loadBalanced) {\n                        if (shouldClearPool) {\n                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                        }\n                        markServerUnknown(this, error);\n                        process.nextTick(() => this.requestCheck());\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Ensure that error is properly decorated and internal state is updated before throwing\n     * @internal\n     */\n    decorateCommandError(connection, cmd, options, error) {\n        if (typeof error !== 'object' || error == null || !('name' in error)) {\n            throw new error_1.MongoRuntimeError('An unexpected error type: ' + typeof error);\n        }\n        if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof error_1.MongoError) {\n            error = error.cause;\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return error;\n        }\n        if (connectionIsStale(this.pool, connection)) {\n            return error;\n        }\n        const session = options?.session;\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) &&\n                !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, utils_1.supportsRetryableWrites)(this) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        else {\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(this), this.description.type) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        if (session &&\n            session.isPinned &&\n            error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({ force: true });\n        }\n        this.handleError(error, connection);\n        return error;\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */\n    decrementOperationCount() {\n        return (this.s.operationCount -= 1);\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */\n    incrementOperationCount() {\n        return (this.s.operationCount += 1);\n    }\n}\nexports.Server = Server;\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server.monitor?.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, { error }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            (session.transaction.isCommitted && 'commitTransaction' in cmd) ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd ||\n            'bulkWrite' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\n//# sourceMappingURL=server.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerDescription = void 0;\nexports.parseServerType = parseServerType;\nexports.compareTopologyVersion = compareTopologyVersion;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */\n    constructor(address, hello, options = {}) {\n        if (address == null || address === '') {\n            throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n        }\n        this.address =\n            typeof address === 'string'\n                ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n                : address.toString();\n        this.type = parseServerType(hello, options);\n        this.hosts = hello?.hosts?.map((host) => host.toLowerCase()) ?? [];\n        this.passives = hello?.passives?.map((host) => host.toLowerCase()) ?? [];\n        this.arbiters = hello?.arbiters?.map((host) => host.toLowerCase()) ?? [];\n        this.tags = hello?.tags ?? {};\n        this.minWireVersion = hello?.minWireVersion ?? 0;\n        this.maxWireVersion = hello?.maxWireVersion ?? 0;\n        this.roundTripTime = options?.roundTripTime ?? -1;\n        this.minRoundTripTime = options?.minRoundTripTime ?? 0;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n        // NOTE: This actually builds the stack string instead of holding onto the getter and all its\n        // associated references. This is done to prevent a memory leak.\n        this.error = options.error ?? null;\n        this.error?.stack;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n        this.setName = hello?.setName ?? null;\n        this.setVersion = hello?.setVersion ?? null;\n        this.electionId = hello?.electionId ?? null;\n        this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n        this.maxMessageSizeBytes = hello?.maxMessageSizeBytes ?? null;\n        this.maxWriteBatchSize = hello?.maxWriteBatchSize ?? null;\n        this.maxBsonObjectSize = hello?.maxBsonObjectSize ?? null;\n        this.primary = hello?.primary ?? null;\n        this.me = hello?.me?.toLowerCase() ?? null;\n        this.$clusterTime = hello?.$clusterTime ?? null;\n        this.iscryptd = Boolean(hello?.iscryptd);\n    }\n    get hostAddress() {\n        return utils_1.HostAddress.fromString(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/\n    get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */\n    get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */\n    get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(':').pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined in the SDAM specification.\n     * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md\n     */\n    equals(other) {\n        // Despite using the comparator that would determine a nullish topologyVersion as greater than\n        // for equality we should only always perform direct equality comparison\n        const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion ||\n            compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId != null && other?.electionId != null\n            ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0\n            : this.electionId === other?.electionId;\n        return (other != null &&\n            other.iscryptd === this.iscryptd &&\n            (0, utils_1.errorStrictEqual)(this.error, other.error) &&\n            this.type === other.type &&\n            this.minWireVersion === other.minWireVersion &&\n            (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) &&\n            tagsStrictEqual(this.tags, other.tags) &&\n            this.setName === other.setName &&\n            this.setVersion === other.setVersion &&\n            electionIdsEqual &&\n            this.primary === other.primary &&\n            this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n            topologyVersionsEqual);\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options?.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === 'isdbgrid') {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        }\n        else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        }\n        else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        }\n        else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        }\n        else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return (tagsKeys.length === tags2Keys.length &&\n        tagsKeys.every((key) => tags2[key] === tags[key]));\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nfunction compareTopologyVersion(currentTv, newTv) {\n    if (currentTv == null || newTv == null) {\n        return -1;\n    }\n    if (!currentTv.processId.equals(newTv.processId)) {\n        return -1;\n    }\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    const currentCounter = typeof currentTv.counter === 'bigint'\n        ? bson_1.Long.fromBigInt(currentTv.counter)\n        : bson_1.Long.isLong(currentTv.counter)\n            ? currentTv.counter\n            : bson_1.Long.fromNumber(currentTv.counter);\n    const newCounter = typeof newTv.counter === 'bigint'\n        ? bson_1.Long.fromBigInt(newTv.counter)\n        : bson_1.Long.isLong(newTv.counter)\n            ? newTv.counter\n            : bson_1.Long.fromNumber(newTv.counter);\n    return currentCounter.compare(newCounter);\n}\n//# sourceMappingURL=server_description.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nexports.writableServerSelector = writableServerSelector;\nexports.sameServerSelector = sameServerSelector;\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\nexports.readPreferenceServerSelector = readPreferenceServerSelector;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst common_1 = require(\"./common\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n    return function writableServer(topologyDescription, servers) {\n        return latencyWindowReducer(topologyDescription, servers.filter((s) => s.isWritable));\n    };\n}\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n    return function sameServerSelector(topologyDescription, servers) {\n        if (!description)\n            return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter(sd => {\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference ||\n        !wireVersion ||\n        (wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION)) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here:\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.md\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server) => {\n            const stalenessMS = server.lastUpdateTime -\n                server.lastWriteDate -\n                (primary.lastUpdateTime - primary.lastWriteDate) +\n                topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server) => {\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null ||\n        (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)) {\n        return servers;\n    }\n    for (let i = 0; i < readPreference.tags.length; ++i) {\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server) => {\n            if (tagSetMatch(tagSet, server.tags))\n                matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.md\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server) => Math.min(server.roundTripTime, min), Infinity);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server) => {\n        if (server.roundTripTime <= high && server.roundTripTime >= low)\n            result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n    }\n    return function readPreferenceServers(topologyDescription, servers, deprioritized = []) {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion &&\n            readPreference.minWireVersion &&\n            readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        if (topologyDescription.type === common_1.TopologyType.Sharded) {\n            const filtered = servers.filter(server => {\n                return !deprioritized.includes(server);\n            });\n            const selectable = filtered.length > 0 ? filtered : deprioritized;\n            return latencyWindowReducer(topologyDescription, selectable.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\n//# sourceMappingURL=server_selection.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;\nconst utils_1 = require(\".././utils\");\nconst constants_1 = require(\"../constants\");\n/**\n * The base export class for all logs published from server selection\n * @internal\n * @category Log Type\n */\nclass ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        this.selector = selector;\n        this.operation = operation;\n        this.topologyDescription = topologyDescription;\n    }\n}\nexports.ServerSelectionEvent = ServerSelectionEvent;\n/**\n * An event published when server selection starts\n * @internal\n * @category Event\n */\nclass ServerSelectionStartedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_STARTED;\n        this.message = 'Server selection started';\n    }\n}\nexports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;\n/**\n * An event published when a server selection fails\n * @internal\n * @category Event\n */\nclass ServerSelectionFailedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, error, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_FAILED;\n        this.message = 'Server selection failed';\n        this.failure = error;\n    }\n}\nexports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;\n/**\n * An event published when server selection succeeds\n * @internal\n * @category Event\n */\nclass ServerSelectionSucceededEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, address, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_SUCCEEDED;\n        this.message = 'Server selection succeeded';\n        const { host, port } = utils_1.HostAddress.fromString(address).toHostPort();\n        this.serverHost = host;\n        this.serverPort = port;\n    }\n}\nexports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;\n/**\n * An event published when server selection is waiting for a suitable server to become available\n * @internal\n * @category Event\n */\nclass WaitingForSuitableServerEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, remainingTimeMS, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;\n        this.message = 'Waiting for suitable server to become available';\n        this.remainingTimeMS = remainingTimeMS;\n    }\n}\nexports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent;\n//# sourceMappingURL=server_selection_events.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = require(\"dns\");\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        super();\n        this.on('error', utils_1.noop);\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => {\n            this._poll().then(undefined, utils_1.squashError);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        }\n        catch {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords) {\n            try {\n                (0, utils_1.checkParentDomainMatch)(record.name, this.srvHost);\n                finalAddresses.push(record);\n            }\n            catch (error) {\n                (0, utils_1.squashError)(error);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\nexports.SrvPoller = SrvPoller;\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\n//# sourceMappingURL=srv_polling.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerCapabilities = exports.Topology = void 0;\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst server_selection_events_1 = require(\"./server_selection_events\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(client, seeds, options) {\n        super();\n        this.on('error', utils_1.noop);\n        this.client = client;\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries())\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null ||\n            options.srvMaxHosts === 0 ||\n            options.srvMaxHosts >= seedlist.length\n            ? seedlist\n            : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this.waitQueue = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        this.mongoLogger = client.mongoLogger;\n        this.component = 'topology';\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                options.srvPoller ??\n                    new srv_polling_1.SrvPoller({\n                        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                        srvHost: options.srvHost,\n                        srvMaxHosts: options.srvMaxHosts,\n                        srvServiceName: options.srvServiceName\n                    });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n        this.connectionLock = undefined;\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get serverApi() {\n        return this.s.options.serverApi;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    /** Initiate server connect */\n    async connect(options) {\n        this.connectionLock ??= this._connect(options);\n        try {\n            await this.connectionLock;\n            return this;\n        }\n        finally {\n            this.connectionLock = undefined;\n        }\n    }\n    async _connect(options) {\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            return this;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map(serverDescription => [\n            serverDescription.address,\n            createAndConnectServer(this, serverDescription)\n        ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const serverSelectionTimeoutMS = this.client.s.options.serverSelectionTimeoutMS;\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        const timeoutContext = timeout_1.TimeoutContext.create({\n            // TODO(NODE-6448): auto-connect ignores timeoutMS; potential future feature\n            timeoutMS: undefined,\n            serverSelectionTimeoutMS,\n            waitQueueTimeoutMS: this.client.s.options.waitQueueTimeoutMS\n        });\n        const selectServerOptions = {\n            operationName: 'ping',\n            ...options,\n            timeoutContext\n        };\n        try {\n            const server = await this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions);\n            const skipPingOnConnect = this.s.options.__skipPingOnConnect === true;\n            if (!skipPingOnConnect && this.s.credentials) {\n                await server.command((0, utils_1.ns)('admin.$cmd'), { ping: 1 }, { timeoutContext });\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Topology.OPEN, this);\n                this.emit(Topology.CONNECT, this);\n                return this;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            return this;\n        }\n        catch (error) {\n            this.close();\n            throw error;\n        }\n    }\n    closeCheckedOutConnections() {\n        for (const server of this.s.servers.values()) {\n            return server.closeCheckedOutConnections();\n        }\n    }\n    /** Close this topology */\n    close() {\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return;\n        }\n        for (const server of this.s.servers.values()) {\n            closeServer(server, this);\n        }\n        this.s.servers.clear();\n        stateTransition(this, common_1.STATE_CLOSING);\n        drainWaitQueue(this.waitQueue, new error_1.MongoTopologyClosedError());\n        if (this.s.srvPoller) {\n            this.s.srvPoller.stop();\n            this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n        }\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        stateTransition(this, common_1.STATE_CLOSED);\n        // emit an event for close\n        this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */\n    async selectServer(selector, options) {\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS, ...options };\n        if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n        }\n        let timeout;\n        if (options.timeoutContext)\n            timeout = options.timeoutContext.serverSelectionTimeout;\n        else {\n            timeout = timeout_1.Timeout.expires(options.serverSelectionTimeoutMS ?? 0);\n        }\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n            }\n            if (options.timeoutContext?.clearServerSelectionTimeout)\n                timeout?.clear();\n            return transaction.server;\n        }\n        const { promise: serverPromise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n        const waitQueueMember = {\n            serverSelector,\n            topologyDescription: this.description,\n            mongoLogger: this.client.mongoLogger,\n            transaction,\n            resolve,\n            reject,\n            cancelled: false,\n            startTime: (0, utils_1.now)(),\n            operationName: options.operationName,\n            waitingLogged: false,\n            previousServer: options.previousServer\n        };\n        const abortListener = (0, utils_1.addAbortListener)(options.signal, function () {\n            waitQueueMember.cancelled = true;\n            reject(this.reason);\n        });\n        this.waitQueue.push(waitQueueMember);\n        processWaitQueue(this);\n        try {\n            timeout?.throwIfExpired();\n            const server = await (timeout ? Promise.race([serverPromise, timeout]) : serverPromise);\n            if (options.timeoutContext?.csotEnabled() && server.description.minRoundTripTime !== 0) {\n                options.timeoutContext.minRoundTripTime = server.description.minRoundTripTime;\n            }\n            return server;\n        }\n        catch (error) {\n            if (timeout_1.TimeoutError.is(error)) {\n                // Timeout\n                waitQueueMember.cancelled = true;\n                const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${timeout?.duration} ms`, this.description);\n                if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                    this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n                }\n                if (options.timeoutContext?.csotEnabled()) {\n                    throw new error_1.MongoOperationTimeoutError('Timed out during server selection', {\n                        cause: timeoutError\n                    });\n                }\n                throw timeoutError;\n            }\n            // Other server selection error\n            throw error;\n        }\n        finally {\n            abortListener?.[utils_1.kDispose]();\n            if (options.timeoutContext?.clearServerSelectionTimeout)\n                timeout?.clear();\n        }\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this.waitQueue.length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction closeServer(server, topology) {\n    for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.close();\n    topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.removeAllListeners(event);\n    }\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n    topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError &&\n                incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({ interruptInUseConnections });\n            }\n            else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing ||\n                    (incomingServerDescription.type !== common_1.ServerType.Unknown &&\n                        newTopologyType === common_1.TopologyType.Single);\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            closeServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, drainError) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (!waitQueueMember.cancelled) {\n            if (waitQueueMember.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                waitQueueMember.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, drainError, waitQueueMember.operationName));\n            }\n            waitQueueMember.reject(drainError);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology.waitQueue, new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology.waitQueue.length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology.waitQueue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember.cancelled) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            const previousServer = waitQueueMember.previousServer;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions, previousServer ? [previousServer] : [])\n                : serverDescriptions;\n        }\n        catch (selectorError) {\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, selectorError, waitQueueMember.operationName));\n            }\n            waitQueueMember.reject(selectorError);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            if (!waitQueueMember.waitingLogged) {\n                if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n                    topology.client.mongoLogger?.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0\n                        ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime)\n                        : -1, waitQueueMember.operationName));\n                }\n                waitQueueMember.waitingLogged = true;\n            }\n            topology.waitQueue.push(waitQueueMember);\n            continue;\n        }\n        else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        }\n        else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer =\n                server1 && server2 && server1.s.operationCount < server2.s.operationCount\n                    ? server1\n                    : server2;\n        }\n        if (!selectedServer) {\n            const serverSelectionError = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, serverSelectionError, waitQueueMember.operationName));\n            }\n            waitQueueMember.reject(serverSelectionError);\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n        }\n        waitQueueMember.resolve(selectedServer);\n    }\n    if (topology.waitQueue.length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return ((0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(hello) {\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TopologyDescription = void 0;\nconst bson_1 = require(\"../bson\");\nconst WIRE_CONSTANTS = require(\"../cmap/wire_protocol/constants\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst server_description_1 = require(\"./server_description\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.RSArbiter,\n    common_1.ServerType.RSOther\n]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nclass TopologyDescription {\n    /**\n     * Create a TopologyDescription\n     */\n    constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null) {\n        options = options ?? {};\n        this.type = topologyType ?? common_1.TopologyType.Unknown;\n        this.servers = serverDescriptions ?? new Map();\n        this.stale = false;\n        this.compatible = true;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n        this.localThresholdMS = options.localThresholdMS ?? 15;\n        this.setName = setName ?? null;\n        this.maxElectionId = maxElectionId ?? null;\n        this.maxSetVersion = maxSetVersion ?? null;\n        this.commonWireVersion = commonWireVersion ?? 0;\n        // determine server compatibility\n        for (const serverDescription of this.servers.values()) {\n            // Load balancer mode is always compatible.\n            if (serverDescription.type === common_1.ServerType.Unknown ||\n                serverDescription.type === common_1.ServerType.LoadBalancer) {\n                continue;\n            }\n            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n            }\n            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n                break;\n            }\n        }\n        // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n        // value among ServerDescriptions of all data-bearing server types. If any have a null\n        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n        // set to null.\n        this.logicalSessionTimeoutMinutes = null;\n        for (const [, server] of this.servers) {\n            if (server.isReadable) {\n                if (server.logicalSessionTimeoutMinutes == null) {\n                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n                    this.logicalSessionTimeoutMinutes = null;\n                    break;\n                }\n                if (this.logicalSessionTimeoutMinutes == null) {\n                    // First server with a non null logicalSessionsTimeout\n                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n                    continue;\n                }\n                // Always select the smaller of the:\n                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n            }\n        }\n    }\n    /**\n     * Returns a new TopologyDescription based on the SrvPollingEvent\n     * @internal\n     */\n    updateFromSrvPollingEvent(ev, srvMaxHosts = 0) {\n        /** The SRV addresses defines the set of addresses we should be using */\n        const incomingHostnames = ev.hostnames();\n        const currentHostnames = new Set(this.servers.keys());\n        const hostnamesToAdd = new Set(incomingHostnames);\n        const hostnamesToRemove = new Set();\n        for (const hostname of currentHostnames) {\n            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n            hostnamesToAdd.delete(hostname);\n            if (!incomingHostnames.has(hostname)) {\n                // If the SRV Records no longer include this hostname\n                // we have to stop using it\n                hostnamesToRemove.add(hostname);\n            }\n        }\n        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n            // No new hosts to add and none to remove\n            return this;\n        }\n        const serverDescriptions = new Map(this.servers);\n        for (const removedHost of hostnamesToRemove) {\n            serverDescriptions.delete(removedHost);\n        }\n        if (hostnamesToAdd.size > 0) {\n            if (srvMaxHosts === 0) {\n                // Add all!\n                for (const hostToAdd of hostnamesToAdd) {\n                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n                }\n            }\n            else if (serverDescriptions.size < srvMaxHosts) {\n                // Add only the amount needed to get us back to srvMaxHosts\n                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n                for (const selectedHostToAdd of selectedHosts) {\n                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n                }\n            }\n        }\n        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */\n    update(serverDescription) {\n        const address = serverDescription.address;\n        // potentially mutated values\n        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n        const serverType = serverDescription.type;\n        const serverDescriptions = new Map(this.servers);\n        // update common wire version\n        if (serverDescription.maxWireVersion !== 0) {\n            if (commonWireVersion == null) {\n                commonWireVersion = serverDescription.maxWireVersion;\n            }\n            else {\n                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n            }\n        }\n        if (typeof serverDescription.setName === 'string' &&\n            typeof setName === 'string' &&\n            serverDescription.setName !== setName) {\n            if (topologyType === common_1.TopologyType.Single) {\n                // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n                serverDescription = new server_description_1.ServerDescription(address);\n            }\n            else {\n                serverDescriptions.delete(address);\n            }\n        }\n        // update the actual server description\n        serverDescriptions.set(address, serverDescription);\n        if (topologyType === common_1.TopologyType.Single) {\n            // once we are defined as single, that never changes\n            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n        }\n        if (topologyType === common_1.TopologyType.Unknown) {\n            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n                serverDescriptions.delete(address);\n            }\n            else {\n                topologyType = topologyTypeForServerType(serverType);\n            }\n        }\n        if (topologyType === common_1.TopologyType.Sharded) {\n            if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n            if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n                topologyType = result[0];\n                setName = result[1];\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n            else if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n            }\n            else {\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n        }\n        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    get error() {\n        const descriptionsWithError = Array.from(this.servers.values()).filter((sd) => sd.error);\n        if (descriptionsWithError.length > 0) {\n            return descriptionsWithError[0].error;\n        }\n        return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */\n    get hasKnownServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.type !== common_1.ServerType.Unknown);\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n    get hasDataBearingServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.isDataBearing);\n    }\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */\n    hasServer(address) {\n        return this.servers.has(address);\n    }\n    /**\n     * Returns a JSON-serializable representation of the TopologyDescription.  This is primarily\n     * intended for use with JSON.stringify().\n     *\n     * This method will not throw.\n     */\n    toJSON() {\n        return bson_1.EJSON.serialize(this);\n    }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n    switch (serverType) {\n        case common_1.ServerType.Standalone:\n            return common_1.TopologyType.Single;\n        case common_1.ServerType.Mongos:\n            return common_1.TopologyType.Sharded;\n        case common_1.ServerType.RSPrimary:\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        case common_1.ServerType.RSOther:\n        case common_1.ServerType.RSSecondary:\n            return common_1.TopologyType.ReplicaSetNoPrimary;\n        default:\n            return common_1.TopologyType.Unknown;\n    }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription, setName = null, maxSetVersion = null, maxElectionId = null) {\n    const setVersionElectionIdMismatch = (serverDescription, maxSetVersion, maxElectionId) => {\n        return (`primary marked stale due to electionId/setVersion mismatch:` +\n            ` server setVersion: ${serverDescription.setVersion},` +\n            ` server electionId: ${serverDescription.electionId},` +\n            ` topology setVersion: ${maxSetVersion},` +\n            ` topology electionId: ${maxElectionId}`);\n    };\n    setName = setName || serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n    }\n    if (serverDescription.maxWireVersion >= 17) {\n        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n        const maxElectionIdIsEqual = electionIdComparison === 0;\n        const maxElectionIdIsLess = electionIdComparison === -1;\n        const maxSetVersionIsLessOrEqual = (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n        if (maxElectionIdIsLess || (maxElectionIdIsEqual && maxSetVersionIsLessOrEqual)) {\n            // The reported electionId was greater\n            // or the electionId was equal and reported setVersion was greater\n            // Always update both values, they are a tuple\n            maxElectionId = serverDescription.electionId;\n            maxSetVersion = serverDescription.setVersion;\n        }\n        else {\n            // Stale primary\n            // replace serverDescription with a default ServerDescription of type \"Unknown\"\n            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address, undefined, {\n                error: new error_1.MongoStalePrimaryError(setVersionElectionIdMismatch(serverDescription, maxSetVersion, maxElectionId))\n            }));\n            return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n        }\n    }\n    else {\n        const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n        if (serverDescription.setVersion && electionId) {\n            if (maxSetVersion && maxElectionId) {\n                if (maxSetVersion > serverDescription.setVersion ||\n                    (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n                    // this primary is stale, we must remove it\n                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address, undefined, {\n                        error: new error_1.MongoStalePrimaryError(setVersionElectionIdMismatch(serverDescription, maxSetVersion, maxElectionId))\n                    }));\n                    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n                }\n            }\n            maxElectionId = serverDescription.electionId;\n        }\n        if (serverDescription.setVersion != null &&\n            (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n            maxSetVersion = serverDescription.setVersion;\n        }\n    }\n    // We've heard from the primary. Is it the same primary as before?\n    for (const [address, server] of serverDescriptions) {\n        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n            // Reset old primary's type to Unknown.\n            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address, undefined, {\n                error: new error_1.MongoStalePrimaryError('primary marked stale due to discovery of newer primary')\n            }));\n            // There can only be one primary\n            break;\n        }\n    }\n    // Discover new hosts from this primary's response.\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    // Remove hosts not in the response.\n    const currentAddresses = Array.from(serverDescriptions.keys());\n    const responseAddresses = serverDescription.allHosts;\n    currentAddresses\n        .filter((addr) => responseAddresses.indexOf(addr) === -1)\n        .forEach((address) => {\n        serverDescriptions.delete(address);\n    });\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    if (setName == null) {\n        // TODO(NODE-3483): should be an appropriate runtime error\n        throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n    }\n    if (setName !== serverDescription.setName ||\n        (serverDescription.me && serverDescription.address !== serverDescription.me)) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n    setName = setName ?? serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [topologyType, setName];\n    }\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n    for (const serverDescription of serverDescriptions.values()) {\n        if (serverDescription.type === common_1.ServerType.RSPrimary) {\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        }\n    }\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n}\n//# sourceMappingURL=topology_description.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerSessionPool = exports.ServerSession = exports.ClientSession = void 0;\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nexports.applySession = applySession;\nexports.updateSessionFromResponse = updateSessionFromResponse;\nconst bson_1 = require(\"./bson\");\nconst metrics_1 = require(\"./cmap/metrics\");\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst resource_management_1 = require(\"./resource_management\");\nconst common_1 = require(\"./sdam/common\");\nconst timeout_1 = require(\"./timeout\");\nconst transactions_1 = require(\"./transactions\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst minWireVersionForShardedTransactions = 8;\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param client - The current client\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */\n    constructor(client, sessionPool, options, clientOptions) {\n        super();\n        /** @internal */\n        this.timeoutContext = null;\n        this.on('error', utils_1.noop);\n        if (client == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n        }\n        options = options ?? {};\n        this.snapshotEnabled = options.snapshot === true;\n        if (options.causalConsistency === true && this.snapshotEnabled) {\n            throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n        }\n        this.client = client;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this.timeoutMS = options.defaultTimeoutMS ?? client.s.options?.timeoutMS;\n        this.explicit = !!options.explicit;\n        this._serverSession = this.explicit ? this.sessionPool.acquire() : null;\n        this.txnNumberIncrement = 0;\n        const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n        this.supports = {\n            // if we can enable causal consistency, do so by default\n            causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = { ...options.defaultTransactionOptions };\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */\n    get id() {\n        return this.serverSession?.id;\n    }\n    get serverSession() {\n        let serverSession = this._serverSession;\n        if (serverSession == null) {\n            if (this.explicit) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n            }\n            if (this.hasEnded) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n            }\n            serverSession = this.sessionPool.acquire();\n            this._serverSession = serverSession;\n        }\n        return serverSession;\n    }\n    get loadBalanced() {\n        return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */\n    pin(conn) {\n        if (this.pinnedConnection) {\n            throw TypeError('Cannot pin multiple connections to the same session');\n        }\n        this.pinnedConnection = conn;\n        conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */\n    unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this.pinnedConnection : this.transaction.isPinned;\n    }\n    /**\n     * Frees any client-side resources held by the current session.  If a session is in a transaction,\n     * the transaction is aborted.\n     *\n     * Does not end the session on the server.\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    async endSession(options) {\n        try {\n            if (this.inTransaction()) {\n                await this.abortTransaction({ ...options, throwTimeout: true });\n            }\n        }\n        catch (error) {\n            // spec indicates that we should ignore all errors for `endSessions`\n            if (error.name === 'MongoOperationTimeoutError')\n                throw error;\n            (0, utils_1.squashError)(error);\n        }\n        finally {\n            if (!this.hasEnded) {\n                const serverSession = this.serverSession;\n                if (serverSession != null) {\n                    // release the server session back to the pool\n                    this.sessionPool.release(serverSession);\n                    // Store a clone of the server session for reference (debugging)\n                    this._serverSession = new ServerSession(serverSession);\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit('ended', this);\n            }\n            maybeClearPinnedConnection(this, { force: true, ...options });\n        }\n    }\n    /** @internal */\n    async asyncDispose() {\n        await this.endSession({ force: true });\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime) {\n        if (!clusterTime || typeof clusterTime !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature ||\n            clusterTime.signature.hash?._bsontype !== 'Binary' ||\n            (typeof clusterTime.signature.keyId !== 'bigint' &&\n                typeof clusterTime.signature.keyId !== 'number' &&\n                clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n    incrementTransactionNumber() {\n        this.txnNumberIncrement += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @remarks\n     * **IMPORTANT**: Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n     * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n     * undefined behaviour.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options) {\n        if (this.snapshotEnabled) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n        }\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError('Transaction already in progress');\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n        if ((0, shared_1.isSharded)(this.client.topology) &&\n            topologyMaxWireVersion != null &&\n            topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n        }\n        this.commitAttempted = false;\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: options?.readConcern ??\n                this.defaultTransactionOptions.readConcern ??\n                this.clientOptions?.readConcern,\n            writeConcern: options?.writeConcern ??\n                this.defaultTransactionOptions.writeConcern ??\n                this.clientOptions?.writeConcern,\n            readPreference: options?.readPreference ??\n                this.defaultTransactionOptions.readPreference ??\n                this.clientOptions?.readPreference,\n            maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     *\n     * @param options - Optional options, can be used to override `defaultTimeoutMS`.\n     */\n    async commitTransaction(options) {\n        if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION) {\n            throw new error_1.MongoTransactionError('No transaction started');\n        }\n        if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION ||\n            this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            return;\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            throw new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction');\n        }\n        const command = { commitTransaction: 1 };\n        const timeoutMS = typeof options?.timeoutMS === 'number'\n            ? options.timeoutMS\n            : typeof this.timeoutMS === 'number'\n                ? this.timeoutMS\n                : null;\n        const wc = this.transaction.options.writeConcern ?? this.clientOptions?.writeConcern;\n        if (wc != null) {\n            if (timeoutMS == null && this.timeoutContext == null) {\n                write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, w: 'majority', ...wc });\n            }\n            else {\n                const wcKeys = Object.keys(wc);\n                if (wcKeys.length > 2 || (!wcKeys.includes('wtimeoutMS') && !wcKeys.includes('wTimeoutMS')))\n                    // if the write concern was specified with wTimeoutMS, then we set both wtimeoutMS and wTimeoutMS, guaranteeing at least two keys, so if we have more than two keys, then we can automatically assume that we should add the write concern to the command. If it has 2 or fewer keys, we need to check that those keys aren't the wtimeoutMS or wTimeoutMS options before we add the write concern to the command\n                    write_concern_1.WriteConcern.apply(command, { ...wc, wtimeoutMS: undefined });\n            }\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED || this.commitAttempted) {\n            if (timeoutMS == null && this.timeoutContext == null) {\n                write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, ...wc, w: 'majority' });\n            }\n            else {\n                write_concern_1.WriteConcern.apply(command, { w: 'majority', ...wc, wtimeoutMS: undefined });\n            }\n        }\n        if (typeof this.transaction.options.maxTimeMS === 'number') {\n            command.maxTimeMS = this.transaction.options.maxTimeMS;\n        }\n        if (this.transaction.recoveryToken) {\n            command.recoveryToken = this.transaction.recoveryToken;\n        }\n        const operation = new run_command_1.RunAdminCommandOperation(command, {\n            session: this,\n            readPreference: read_preference_1.ReadPreference.primary,\n            bypassPinningCheck: true\n        });\n        const timeoutContext = this.timeoutContext ??\n            (typeof timeoutMS === 'number'\n                ? timeout_1.TimeoutContext.create({\n                    serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n                    socketTimeoutMS: this.clientOptions.socketTimeoutMS,\n                    timeoutMS\n                })\n                : null);\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, operation, timeoutContext);\n            this.commitAttempted = undefined;\n            return;\n        }\n        catch (firstCommitError) {\n            this.commitAttempted = true;\n            if (firstCommitError instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(firstCommitError)) {\n                // SPEC-1185: apply majority write concern when retrying commitTransaction\n                write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, ...wc, w: 'majority' });\n                // per txns spec, must unpin session in this case\n                this.unpin({ force: true });\n                try {\n                    await (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunAdminCommandOperation(command, {\n                        session: this,\n                        readPreference: read_preference_1.ReadPreference.primary,\n                        bypassPinningCheck: true\n                    }), timeoutContext);\n                    return;\n                }\n                catch (retryCommitError) {\n                    // If the retry failed, we process that error instead of the original\n                    if (shouldAddUnknownTransactionCommitResultLabel(retryCommitError)) {\n                        retryCommitError.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n                    }\n                    if (shouldUnpinAfterCommitError(retryCommitError)) {\n                        this.unpin({ error: retryCommitError });\n                    }\n                    throw retryCommitError;\n                }\n            }\n            if (shouldAddUnknownTransactionCommitResultLabel(firstCommitError)) {\n                firstCommitError.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n            }\n            if (shouldUnpinAfterCommitError(firstCommitError)) {\n                this.unpin({ error: firstCommitError });\n            }\n            throw firstCommitError;\n        }\n        finally {\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        }\n    }\n    async abortTransaction(options) {\n        if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION) {\n            throw new error_1.MongoTransactionError('No transaction started');\n        }\n        if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            return;\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            throw new error_1.MongoTransactionError('Cannot call abortTransaction twice');\n        }\n        if (this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n            this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            throw new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction');\n        }\n        const command = { abortTransaction: 1 };\n        const timeoutMS = typeof options?.timeoutMS === 'number'\n            ? options.timeoutMS\n            : this.timeoutContext?.csotEnabled()\n                ? this.timeoutContext.timeoutMS // refresh timeoutMS for abort operation\n                : typeof this.timeoutMS === 'number'\n                    ? this.timeoutMS\n                    : null;\n        const timeoutContext = timeoutMS != null\n            ? timeout_1.TimeoutContext.create({\n                timeoutMS,\n                serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n                socketTimeoutMS: this.clientOptions.socketTimeoutMS\n            })\n            : null;\n        const wc = this.transaction.options.writeConcern ?? this.clientOptions?.writeConcern;\n        if (wc != null && timeoutMS == null) {\n            write_concern_1.WriteConcern.apply(command, { wtimeoutMS: 10000, w: 'majority', ...wc });\n        }\n        if (this.transaction.recoveryToken) {\n            command.recoveryToken = this.transaction.recoveryToken;\n        }\n        const operation = new run_command_1.RunAdminCommandOperation(command, {\n            session: this,\n            readPreference: read_preference_1.ReadPreference.primary,\n            bypassPinningCheck: true\n        });\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, operation, timeoutContext);\n            this.unpin();\n            return;\n        }\n        catch (firstAbortError) {\n            this.unpin();\n            if (firstAbortError.name === 'MongoRuntimeError')\n                throw firstAbortError;\n            if (options?.throwTimeout && firstAbortError.name === 'MongoOperationTimeoutError') {\n                throw firstAbortError;\n            }\n            if (firstAbortError instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(firstAbortError)) {\n                try {\n                    await (0, execute_operation_1.executeOperation)(this.client, operation, timeoutContext);\n                    return;\n                }\n                catch (secondAbortError) {\n                    if (secondAbortError.name === 'MongoRuntimeError')\n                        throw secondAbortError;\n                    if (options?.throwTimeout && secondAbortError.name === 'MongoOperationTimeoutError') {\n                        throw secondAbortError;\n                    }\n                    // we do not retry the retry\n                }\n            }\n            // The spec indicates that if the operation times out or fails with a non-retryable error, we should ignore all errors on `abortTransaction`\n        }\n        finally {\n            this.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (this.loadBalanced) {\n                maybeClearPinnedConnection(this, { force: false });\n            }\n        }\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON() {\n        throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the function passed in to return a Promise. That promise must be made by `await`-ing all operations in such a way that rejections are propagated to the returned promise.\n     *\n     * **IMPORTANT:** Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n     * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n     * undefined behaviour.\n     *\n     * **IMPORTANT:** When running an operation inside a `withTransaction` callback, if it is not\n     * provided the explicit session in its options, it will not be part of the transaction and it will not respect timeoutMS.\n     *\n     *\n     * @remarks\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then the provided function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then the provided function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - If the driver needs to attempt to retry the operations, the provided function may be called multiple times.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * If a command inside withTransaction fails:\n     * - It may cause the transaction on the server to be aborted.\n     * - This situation is normally handled transparently by the driver.\n     * - However, if the application catches such an error and does not rethrow it, the driver will not be able to determine whether the transaction was aborted or not.\n     * - The driver will then retry the transaction indefinitely.\n     *\n     * To avoid this situation, the application must not silently handle errors within the provided function.\n     * If the application needs to handle errors within, it must await all operations such that if an operation is rejected it becomes the rejection of the callback function passed into withTransaction.\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n    async withTransaction(fn, options) {\n        const MAX_TIMEOUT = 120000;\n        const timeoutMS = options?.timeoutMS ?? this.timeoutMS ?? null;\n        this.timeoutContext =\n            timeoutMS != null\n                ? timeout_1.TimeoutContext.create({\n                    timeoutMS,\n                    serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n                    socketTimeoutMS: this.clientOptions.socketTimeoutMS\n                })\n                : null;\n        const startTime = this.timeoutContext?.csotEnabled() ? this.timeoutContext.start : (0, utils_1.now)();\n        let committed = false;\n        let result;\n        try {\n            while (!committed) {\n                this.startTransaction(options); // may throw on error\n                try {\n                    const promise = fn(this);\n                    if (!(0, utils_1.isPromiseLike)(promise)) {\n                        throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n                    }\n                    result = await promise;\n                    if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION ||\n                        this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n                        this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n                        // Assume callback intentionally ended the transaction\n                        return result;\n                    }\n                }\n                catch (fnError) {\n                    if (!(fnError instanceof error_1.MongoError) || fnError instanceof error_1.MongoInvalidArgumentError) {\n                        await this.abortTransaction();\n                        throw fnError;\n                    }\n                    if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION ||\n                        this.transaction.state === transactions_1.TxnState.TRANSACTION_IN_PROGRESS) {\n                        await this.abortTransaction();\n                    }\n                    if (fnError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                        (this.timeoutContext != null || (0, utils_1.now)() - startTime < MAX_TIMEOUT)) {\n                        continue;\n                    }\n                    throw fnError;\n                }\n                while (!committed) {\n                    try {\n                        /*\n                         * We will rely on ClientSession.commitTransaction() to\n                         * apply a majority write concern if commitTransaction is\n                         * being retried (see: DRIVERS-601)\n                         */\n                        await this.commitTransaction();\n                        committed = true;\n                    }\n                    catch (commitError) {\n                        /*\n                         * Note: a maxTimeMS error will have the MaxTimeMSExpired\n                         * code (50) and can be reported as a top-level error or\n                         * inside writeConcernError, ex.\n                         * { ok:0, code: 50, codeName: 'MaxTimeMSExpired' }\n                         * { ok:1, writeConcernError: { code: 50, codeName: 'MaxTimeMSExpired' } }\n                         */\n                        if (!isMaxTimeMSExpiredError(commitError) &&\n                            commitError.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult) &&\n                            (this.timeoutContext != null || (0, utils_1.now)() - startTime < MAX_TIMEOUT)) {\n                            continue;\n                        }\n                        if (commitError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                            (this.timeoutContext != null || (0, utils_1.now)() - startTime < MAX_TIMEOUT)) {\n                            break;\n                        }\n                        throw commitError;\n                    }\n                }\n            }\n            return result;\n        }\n        finally {\n            this.timeoutContext = null;\n        }\n    }\n}\nexports.ClientSession = ClientSession;\n(0, resource_management_1.configureResourceManagement)(ClientSession.prototype);\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    'CannotSatisfyWriteConcern',\n    'UnknownReplWriteConcern',\n    'UnsatisfiableWriteConcern'\n]);\nfunction shouldUnpinAfterCommitError(commitError) {\n    if (commitError instanceof error_1.MongoError) {\n        if ((0, error_1.isRetryableWriteError)(commitError) ||\n            commitError instanceof error_1.MongoWriteConcernError ||\n            isMaxTimeMSExpiredError(commitError)) {\n            if (isUnknownTransactionCommitResult(commitError)) {\n                // per txns spec, must unpin session in this case\n                return true;\n            }\n        }\n        else if (commitError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction shouldAddUnknownTransactionCommitResultLabel(commitError) {\n    let ok = (0, error_1.isRetryableWriteError)(commitError);\n    ok ||= commitError instanceof error_1.MongoWriteConcernError;\n    ok ||= isMaxTimeMSExpiredError(commitError);\n    ok &&= isUnknownTransactionCommitResult(commitError);\n    return ok;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError &&\n        err.codeName &&\n        NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return (isMaxTimeMSExpiredError(err) ||\n        (!isNonDeterministicWriteConcernError &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern));\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session.pinnedConnection;\n    const error = options?.error;\n    if (session.inTransaction() &&\n        error &&\n        error instanceof error_1.MongoError &&\n        error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return;\n    }\n    const topology = session.client.topology;\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn && topology != null) {\n        const servers = Array.from(topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if (options?.error == null || options?.force) {\n            loadBalancer.pool.checkIn(conn);\n            session.pinnedConnection = undefined;\n            conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION\n                ? metrics_1.ConnectionPoolMetrics.TXN\n                : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options?.forceClear) {\n                loadBalancer.pool.clear({ serviceId: conn.serviceId });\n            }\n        }\n    }\n}\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return (err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n        err.writeConcernError?.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired);\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n    /** @internal */\n    constructor(cloned) {\n        if (cloned != null) {\n            const idBytes = Buffer.allocUnsafe(16);\n            idBytes.set(cloned.id.id.buffer);\n            this.id = { id: new bson_1.Binary(idBytes, cloned.id.id.sub_type) };\n            this.lastUse = cloned.lastUse;\n            this.txnNumber = cloned.txnNumber;\n            this.isDirty = cloned.isDirty;\n            return;\n        }\n        this.id = { id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID) };\n        this.lastUse = (0, utils_1.now)();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round((((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000) % 3600000) / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n    constructor(client) {\n        if (client == null) {\n            throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n        }\n        this.client = client;\n        this.sessions = new utils_1.List();\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */\n    acquire() {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        let session = null;\n        // Try to obtain from session pool\n        while (this.sessions.length > 0) {\n            const potentialSession = this.sessions.shift();\n            if (potentialSession != null &&\n                (!!this.client.topology?.loadBalanced ||\n                    !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n                session = potentialSession;\n                break;\n            }\n        }\n        // If nothing valid came from the pool make a new one\n        if (session == null) {\n            session = new ServerSession();\n        }\n        return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n    release(session) {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    // May acquire serverSession here\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError('Unable to acquire server session');\n    }\n    if (options.writeConcern?.w === 0) {\n        if (session && session.explicit) {\n            // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n            return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = (0, utils_1.now)();\n    command.lsid = serverSession.id;\n    const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n    const isRetryableWrite = !!options.willRetryWrite;\n    if (isRetryableWrite || inTxnOrTxnCommand) {\n        serverSession.txnNumber += session.txnNumberIncrement;\n        session.txnNumberIncrement = 0;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTxnOrTxnCommand) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency &&\n            session.operationTime &&\n            (0, utils_1.commandSupportsReadConcern)(command)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n        else if (session.snapshotEnabled) {\n            command.readConcern = command.readConcern || { level: read_concern_1.ReadConcernLevel.snapshot };\n            if (session.snapshotTime != null) {\n                Object.assign(command.readConcern, { atClusterTime: session.snapshotTime });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n    }\n    return;\n}\nfunction updateSessionFromResponse(session, document) {\n    if (document.$clusterTime) {\n        (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if (session?.snapshotEnabled && session.snapshotTime == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = document.atClusterTime;\n        if (atClusterTime) {\n            session.snapshotTime = atClusterTime;\n        }\n    }\n}\n//# sourceMappingURL=sessions.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatSort = formatSort;\nconst error_1 = require(\"./error\");\n/** @internal */\nfunction prepareDirection(direction = 1) {\n    const value = `${direction}`.toLowerCase();\n    if (isMeta(direction))\n        return direction;\n    switch (value) {\n        case 'ascending':\n        case 'asc':\n        case '1':\n            return 1;\n        case 'descending':\n        case 'desc':\n        case '-1':\n            return -1;\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Invalid sort direction: ${JSON.stringify(direction)}`);\n    }\n}\n/** @internal */\nfunction isMeta(t) {\n    return typeof t === 'object' && t != null && '$meta' in t && typeof t.$meta === 'string';\n}\n/** @internal */\nfunction isPair(t) {\n    if (Array.isArray(t) && t.length === 2) {\n        try {\n            prepareDirection(t[1]);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    return false;\n}\nfunction isDeep(t) {\n    return Array.isArray(t) && Array.isArray(t[0]);\n}\nfunction isMap(t) {\n    return t instanceof Map && t.size > 0;\n}\nfunction isReadonlyArray(value) {\n    return Array.isArray(value);\n}\n/** @internal */\nfunction pairToMap(v) {\n    return new Map([[`${v[0]}`, prepareDirection([v[1]])]]);\n}\n/** @internal */\nfunction deepToMap(t) {\n    const sortEntries = t.map(([k, v]) => [`${k}`, prepareDirection(v)]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction stringsToMap(t) {\n    const sortEntries = t.map(key => [`${key}`, 1]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction objectToMap(t) {\n    const sortEntries = Object.entries(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction mapToMap(t) {\n    const sortEntries = Array.from(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** converts a Sort type into a type that is valid for the server (SortForCmd) */\nfunction formatSort(sort, direction) {\n    if (sort == null)\n        return undefined;\n    if (typeof sort === 'string')\n        return new Map([[sort, prepareDirection(direction)]]); // 'fieldName'\n    if (typeof sort !== 'object') {\n        throw new error_1.MongoInvalidArgumentError(`Invalid sort format: ${JSON.stringify(sort)} Sort must be a valid object`);\n    }\n    if (!isReadonlyArray(sort)) {\n        if (isMap(sort))\n            return mapToMap(sort); // Map<fieldName, SortDirection>\n        if (Object.keys(sort).length)\n            return objectToMap(sort); // { [fieldName: string]: SortDirection }\n        return undefined;\n    }\n    if (!sort.length)\n        return undefined;\n    if (isDeep(sort))\n        return deepToMap(sort); // [ [fieldName, sortDir], [fieldName, sortDir] ... ]\n    if (isPair(sort))\n        return pairToMap(sort); // [ fieldName, sortDir ]\n    return stringsToMap(sort); // [ fieldName, fieldName ]\n}\n//# sourceMappingURL=sort.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LegacyTimeoutContext = exports.CSOTTimeoutContext = exports.TimeoutContext = exports.Timeout = exports.TimeoutError = void 0;\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nclass TimeoutError extends Error {\n    get name() {\n        return 'TimeoutError';\n    }\n    constructor(message, options) {\n        super(message, options);\n        this.duration = options.duration;\n    }\n    static is(error) {\n        return (error != null && typeof error === 'object' && 'name' in error && error.name === 'TimeoutError');\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\n * @internal\n * This class is an abstraction over timeouts\n * The Timeout class can only be in the pending or rejected states. It is guaranteed not to resolve\n * if interacted with exclusively through its public API\n * */\nclass Timeout extends Promise {\n    get remainingTime() {\n        if (this.timedOut)\n            return 0;\n        if (this.duration === 0)\n            return Infinity;\n        return this.start + this.duration - Math.trunc(performance.now());\n    }\n    get timeElapsed() {\n        return Math.trunc(performance.now()) - this.start;\n    }\n    /** Create a new timeout that expires in `duration` ms */\n    constructor(executor = () => null, options) {\n        const duration = options?.duration ?? 0;\n        const unref = !!options?.unref;\n        const rejection = options?.rejection;\n        if (duration < 0) {\n            throw new error_1.MongoInvalidArgumentError('Cannot create a Timeout with a negative duration');\n        }\n        let reject;\n        super((_, promiseReject) => {\n            reject = promiseReject;\n            executor(utils_1.noop, promiseReject);\n        });\n        this.ended = null;\n        this.timedOut = false;\n        this.cleared = false;\n        this.duration = duration;\n        this.start = Math.trunc(performance.now());\n        if (rejection == null && this.duration > 0) {\n            this.id = (0, timers_1.setTimeout)(() => {\n                this.ended = Math.trunc(performance.now());\n                this.timedOut = true;\n                reject(new TimeoutError(`Expired after ${duration}ms`, { duration }));\n            }, this.duration);\n            if (typeof this.id.unref === 'function' && unref) {\n                // Ensure we do not keep the Node.js event loop running\n                this.id.unref();\n            }\n        }\n        else if (rejection != null) {\n            this.ended = Math.trunc(performance.now());\n            this.timedOut = true;\n            reject(rejection);\n        }\n    }\n    /**\n     * Clears the underlying timeout. This method is idempotent\n     */\n    clear() {\n        (0, timers_1.clearTimeout)(this.id);\n        this.id = undefined;\n        this.timedOut = false;\n        this.cleared = true;\n    }\n    throwIfExpired() {\n        if (this.timedOut) {\n            // This method is invoked when someone wants to throw immediately instead of await the result of this promise\n            // Since they won't be handling the rejection from the promise (because we're about to throw here)\n            // attach handling to prevent this from bubbling up to Node.js\n            this.then(undefined, utils_1.squashError);\n            throw new TimeoutError('Timed out', { duration: this.duration });\n        }\n    }\n    static expires(duration, unref) {\n        return new Timeout(undefined, { duration, unref });\n    }\n    static reject(rejection) {\n        return new Timeout(undefined, { duration: 0, unref: true, rejection });\n    }\n}\nexports.Timeout = Timeout;\nfunction isLegacyTimeoutContextOptions(v) {\n    return (v != null &&\n        typeof v === 'object' &&\n        'serverSelectionTimeoutMS' in v &&\n        typeof v.serverSelectionTimeoutMS === 'number' &&\n        'waitQueueTimeoutMS' in v &&\n        typeof v.waitQueueTimeoutMS === 'number');\n}\nfunction isCSOTTimeoutContextOptions(v) {\n    return (v != null &&\n        typeof v === 'object' &&\n        'serverSelectionTimeoutMS' in v &&\n        typeof v.serverSelectionTimeoutMS === 'number' &&\n        'timeoutMS' in v &&\n        typeof v.timeoutMS === 'number');\n}\n/** @internal */\nclass TimeoutContext {\n    static create(options) {\n        if (options.session?.timeoutContext != null)\n            return options.session?.timeoutContext;\n        if (isCSOTTimeoutContextOptions(options))\n            return new CSOTTimeoutContext(options);\n        else if (isLegacyTimeoutContextOptions(options))\n            return new LegacyTimeoutContext(options);\n        else\n            throw new error_1.MongoRuntimeError('Unrecognized options');\n    }\n}\nexports.TimeoutContext = TimeoutContext;\n/** @internal */\nclass CSOTTimeoutContext extends TimeoutContext {\n    constructor(options) {\n        super();\n        this.minRoundTripTime = 0;\n        this.start = Math.trunc(performance.now());\n        this.timeoutMS = options.timeoutMS;\n        this.serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n        this.socketTimeoutMS = options.socketTimeoutMS;\n        this.clearServerSelectionTimeout = false;\n    }\n    get maxTimeMS() {\n        return this.remainingTimeMS - this.minRoundTripTime;\n    }\n    get remainingTimeMS() {\n        const timePassed = Math.trunc(performance.now()) - this.start;\n        return this.timeoutMS <= 0 ? Infinity : this.timeoutMS - timePassed;\n    }\n    csotEnabled() {\n        return true;\n    }\n    get serverSelectionTimeout() {\n        // check for undefined\n        if (typeof this._serverSelectionTimeout !== 'object' || this._serverSelectionTimeout?.cleared) {\n            const { remainingTimeMS, serverSelectionTimeoutMS } = this;\n            if (remainingTimeMS <= 0)\n                return Timeout.reject(new error_1.MongoOperationTimeoutError(`Timed out in server selection after ${this.timeoutMS}ms`));\n            const usingServerSelectionTimeoutMS = serverSelectionTimeoutMS !== 0 &&\n                (0, utils_1.csotMin)(remainingTimeMS, serverSelectionTimeoutMS) === serverSelectionTimeoutMS;\n            if (usingServerSelectionTimeoutMS) {\n                this._serverSelectionTimeout = Timeout.expires(serverSelectionTimeoutMS);\n            }\n            else {\n                if (remainingTimeMS > 0 && Number.isFinite(remainingTimeMS)) {\n                    this._serverSelectionTimeout = Timeout.expires(remainingTimeMS);\n                }\n                else {\n                    this._serverSelectionTimeout = null;\n                }\n            }\n        }\n        return this._serverSelectionTimeout;\n    }\n    get connectionCheckoutTimeout() {\n        if (typeof this._connectionCheckoutTimeout !== 'object' ||\n            this._connectionCheckoutTimeout?.cleared) {\n            if (typeof this._serverSelectionTimeout === 'object') {\n                // null or Timeout\n                this._connectionCheckoutTimeout = this._serverSelectionTimeout;\n            }\n            else {\n                throw new error_1.MongoRuntimeError('Unreachable. If you are seeing this error, please file a ticket on the NODE driver project on Jira');\n            }\n        }\n        return this._connectionCheckoutTimeout;\n    }\n    get timeoutForSocketWrite() {\n        const { remainingTimeMS } = this;\n        if (!Number.isFinite(remainingTimeMS))\n            return null;\n        if (remainingTimeMS > 0)\n            return Timeout.expires(remainingTimeMS);\n        return Timeout.reject(new error_1.MongoOperationTimeoutError('Timed out before socket write'));\n    }\n    get timeoutForSocketRead() {\n        const { remainingTimeMS } = this;\n        if (!Number.isFinite(remainingTimeMS))\n            return null;\n        if (remainingTimeMS > 0)\n            return Timeout.expires(remainingTimeMS);\n        return Timeout.reject(new error_1.MongoOperationTimeoutError('Timed out before socket read'));\n    }\n    refresh() {\n        this.start = Math.trunc(performance.now());\n        this.minRoundTripTime = 0;\n        this._serverSelectionTimeout?.clear();\n        this._connectionCheckoutTimeout?.clear();\n    }\n    clear() {\n        this._serverSelectionTimeout?.clear();\n        this._connectionCheckoutTimeout?.clear();\n    }\n    /**\n     * @internal\n     * Throws a MongoOperationTimeoutError if the context has expired.\n     * If the context has not expired, returns the `remainingTimeMS`\n     **/\n    getRemainingTimeMSOrThrow(message) {\n        const { remainingTimeMS } = this;\n        if (remainingTimeMS <= 0)\n            throw new error_1.MongoOperationTimeoutError(message ?? `Expired after ${this.timeoutMS}ms`);\n        return remainingTimeMS;\n    }\n    /**\n     * @internal\n     * This method is intended to be used in situations where concurrent operation are on the same deadline, but cannot share a single `TimeoutContext` instance.\n     * Returns a new instance of `CSOTTimeoutContext` constructed with identical options, but setting the `start` property to `this.start`.\n     */\n    clone() {\n        const timeoutContext = new CSOTTimeoutContext({\n            timeoutMS: this.timeoutMS,\n            serverSelectionTimeoutMS: this.serverSelectionTimeoutMS\n        });\n        timeoutContext.start = this.start;\n        return timeoutContext;\n    }\n    refreshed() {\n        return new CSOTTimeoutContext(this);\n    }\n    addMaxTimeMSToCommand(command, options) {\n        if (options.omitMaxTimeMS)\n            return;\n        const maxTimeMS = this.remainingTimeMS - this.minRoundTripTime;\n        if (maxTimeMS > 0 && Number.isFinite(maxTimeMS))\n            command.maxTimeMS = maxTimeMS;\n    }\n    getSocketTimeoutMS() {\n        return 0;\n    }\n}\nexports.CSOTTimeoutContext = CSOTTimeoutContext;\n/** @internal */\nclass LegacyTimeoutContext extends TimeoutContext {\n    constructor(options) {\n        super();\n        this.options = options;\n        this.clearServerSelectionTimeout = true;\n    }\n    csotEnabled() {\n        return false;\n    }\n    get serverSelectionTimeout() {\n        if (this.options.serverSelectionTimeoutMS != null && this.options.serverSelectionTimeoutMS > 0)\n            return Timeout.expires(this.options.serverSelectionTimeoutMS);\n        return null;\n    }\n    get connectionCheckoutTimeout() {\n        if (this.options.waitQueueTimeoutMS != null && this.options.waitQueueTimeoutMS > 0)\n            return Timeout.expires(this.options.waitQueueTimeoutMS);\n        return null;\n    }\n    get timeoutForSocketWrite() {\n        return null;\n    }\n    get timeoutForSocketRead() {\n        return null;\n    }\n    refresh() {\n        return;\n    }\n    clear() {\n        return;\n    }\n    get maxTimeMS() {\n        return null;\n    }\n    refreshed() {\n        return new LegacyTimeoutContext(this.options);\n    }\n    addMaxTimeMSToCommand(_command, _options) {\n        // No max timeMS is added to commands in legacy timeout mode.\n    }\n    getSocketTimeoutMS() {\n        return this.options.socketTimeoutMS;\n    }\n}\nexports.LegacyTimeoutContext = LegacyTimeoutContext;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = exports.TxnState = void 0;\nexports.isTransactionCommand = isTransactionCommand;\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst write_concern_1 = require(\"./write_concern\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * @deprecated - Will be made internal in a future major release.\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    /** @deprecated - Will be made internal in a future major release. */\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    /** @deprecated - Will be made internal in a future major release. */\n    get isPinned() {\n        return !!this.server;\n    }\n    /**\n     * @deprecated - Will be made internal in a future major release.\n     * @returns Whether the transaction has started\n     */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @deprecated - Will be made internal in a future major release.\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    /** @deprecated - Will be made internal in a future major release. */\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\n//# sourceMappingURL=transactions.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.kDispose = exports.randomBytes = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = exports.DOCUMENT_DB_CHECK = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ByteUtils = void 0;\nexports.isUint8Array = isUint8Array;\nexports.hostMatchesWildcards = hostMatchesWildcards;\nexports.normalizeHintField = normalizeHintField;\nexports.isObject = isObject;\nexports.mergeOptions = mergeOptions;\nexports.filterOptions = filterOptions;\nexports.applyRetryableWrites = applyRetryableWrites;\nexports.isPromiseLike = isPromiseLike;\nexports.decorateWithCollation = decorateWithCollation;\nexports.decorateWithReadConcern = decorateWithReadConcern;\nexports.getTopology = getTopology;\nexports.ns = ns;\nexports.makeCounter = makeCounter;\nexports.uuidV4 = uuidV4;\nexports.maxWireVersion = maxWireVersion;\nexports.arrayStrictEqual = arrayStrictEqual;\nexports.errorStrictEqual = errorStrictEqual;\nexports.makeStateMachine = makeStateMachine;\nexports.now = now;\nexports.calculateDurationInMs = calculateDurationInMs;\nexports.hasAtomicOperators = hasAtomicOperators;\nexports.resolveTimeoutOptions = resolveTimeoutOptions;\nexports.resolveOptions = resolveOptions;\nexports.isSuperset = isSuperset;\nexports.isHello = isHello;\nexports.setDifference = setDifference;\nexports.isRecord = isRecord;\nexports.emitWarning = emitWarning;\nexports.emitWarningOnce = emitWarningOnce;\nexports.enumToString = enumToString;\nexports.supportsRetryableWrites = supportsRetryableWrites;\nexports.shuffle = shuffle;\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\nexports.compareObjectId = compareObjectId;\nexports.parseInteger = parseInteger;\nexports.parseUnsignedInteger = parseUnsignedInteger;\nexports.checkParentDomainMatch = checkParentDomainMatch;\nexports.get = get;\nexports.request = request;\nexports.isHostMatch = isHostMatch;\nexports.promiseWithResolvers = promiseWithResolvers;\nexports.squashError = squashError;\nexports.once = once;\nexports.maybeAddIdToDocuments = maybeAddIdToDocuments;\nexports.fileIsAccessible = fileIsAccessible;\nexports.csotMin = csotMin;\nexports.noop = noop;\nexports.decorateDecryptionResult = decorateDecryptionResult;\nexports.addAbortListener = addAbortListener;\nexports.abortable = abortable;\nconst crypto = require(\"crypto\");\nconst fs_1 = require(\"fs\");\nconst http = require(\"http\");\nconst timers_1 = require(\"timers\");\nconst url = require(\"url\");\nconst url_1 = require(\"url\");\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\nconst constants_2 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst write_concern_1 = require(\"./write_concern\");\nexports.ByteUtils = {\n    toLocalBufferType(buffer) {\n        return Buffer.isBuffer(buffer)\n            ? buffer\n            : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64(uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n    }\n};\n/**\n * Returns true if value is a Uint8Array or a Buffer\n * @param value - any value that may be a Uint8Array\n */\nfunction isUint8Array(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        Symbol.toStringTag in value &&\n        value[Symbol.toStringTag] === 'Uint8Array');\n}\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards) {\n        if (host === wildcard ||\n            (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n            (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === 'string') {\n        finalHint = hint;\n    }\n    else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach(param => {\n            finalHint[param] = 1;\n        });\n    }\n    else if (hint != null && typeof hint === 'object') {\n        finalHint = {};\n        for (const name in hint) {\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nconst TO_STRING = (object) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n    return '[object Object]' === TO_STRING(arg);\n}\n/** @internal */\nfunction mergeOptions(target, source) {\n    return { ...target, ...source };\n}\n/** @internal */\nfunction filterOptions(options, names) {\n    const filterOptions = {};\n    for (const name in options) {\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        'then' in value &&\n        typeof value.then === 'function');\n}\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === 'object') {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        }\n        else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, { readConcern: readConcern });\n    }\n}\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if ('topology' in provider && provider.topology) {\n        return provider.topology;\n    }\n    else if ('client' in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n/** @internal */\nfunction ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\n/** @public */\nclass MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db, collection) {\n        this.db = db;\n        this.collection = collection === '' ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== 'string' || namespace === '') {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split('.');\n        const collection = collectionParts.join('.');\n        return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection) {\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction* makeCounter(seed = 0) {\n    let count = seed;\n    while (true) {\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = (result[6] & 0x0f) | 0x40;\n    result[8] = (result[8] & 0x3f) | 0x80;\n    return result;\n}\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced || topologyOrServer.serverApi?.version) {\n            // Since we do not have a monitor in the load balanced mode,\n            // we assume the load-balanced server is always pointed at the latest mongodb version.\n            // There is a risk that for on-prem deployments\n            // that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            // We also return the max supported wire version for serverAPI.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description &&\n            'maxWireVersion' in topologyOrServer.description &&\n            topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\n/** @internal */\nfunction makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit('stateChanged', target.s.state, newState);\n        target.s.state = newState;\n    };\n}\n/** @internal */\nfunction now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n/** @internal */\nfunction calculateDurationInMs(started) {\n    if (typeof started !== 'number') {\n        return -1;\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\n/** @internal */\nfunction hasAtomicOperators(doc, options) {\n    if (Array.isArray(doc)) {\n        for (const document of doc) {\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    // In this case we need to throw if all the atomic operators are undefined.\n    if (options?.ignoreUndefined) {\n        let allUndefined = true;\n        for (const key of keys) {\n            // eslint-disable-next-line no-restricted-syntax\n            if (doc[key] !== undefined) {\n                allUndefined = false;\n                break;\n            }\n        }\n        if (allUndefined) {\n            throw new error_1.MongoInvalidArgumentError('Update operations require that all atomic operators have defined values, but none were provided.');\n        }\n    }\n    return keys.length > 0 && keys[0][0] === '$';\n}\nfunction resolveTimeoutOptions(client, options) {\n    const { socketTimeoutMS, serverSelectionTimeoutMS, waitQueueTimeoutMS, timeoutMS } = client.s.options;\n    return { socketTimeoutMS, serverSelectionTimeoutMS, waitQueueTimeoutMS, timeoutMS, ...options };\n}\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n *\n * @param parent - An optional owning class of the operation being run. ex. Db/Collection/MongoClient.\n * @param options - The options passed to the operation method.\n *\n * @internal\n */\nfunction resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    const timeoutMS = options?.timeoutMS ?? parent?.timeoutMS;\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        let writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            if (timeoutMS != null) {\n                writeConcern = write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...writeConcern,\n                        wtimeout: undefined,\n                        wtimeoutMS: undefined\n                    }\n                });\n            }\n            result.writeConcern = writeConcern;\n        }\n    }\n    result.timeoutMS = timeoutMS;\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    const isConvenientTransaction = session?.explicit && session?.timeoutContext != null;\n    if (isConvenientTransaction && options?.timeoutMS != null) {\n        throw new error_1.MongoInvalidArgumentError('An operation cannot be given a timeoutMS setting when inside a withTransaction call that has a timeoutMS setting');\n    }\n    return result;\n}\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB) {\n        difference.delete(elem);\n    }\n    return difference;\n}\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return 'List';\n    }\n    constructor() {\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()) {\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while (ptr !== this.head) {\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */\n    push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */\n    pushMany(iterable) {\n        for (const value of iterable) {\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */\n    unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */\n    shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */\n    pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */\n    prune(filter) {\n        for (const node of this.nodes()) {\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */\n    first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */\n    last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n    constructor() {\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */\n    append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */\n    getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */\n    read(size) {\n        if (typeof size !== 'number' || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for (let bytesRead = 0; bytesRead < size;) {\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n    constructor(hostString) {\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith('.sock')) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        }\n        catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith('[') && normalized.endsWith(']')) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === 'number') {\n            this.port = port;\n        }\n        else if (typeof port === 'string' && port !== '') {\n            this.port = Number.parseInt(port, 10);\n        }\n        else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === 'string') {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(':')) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return { host: this.socketPath, port: 0 };\n        }\n        const host = this.host ?? '';\n        const port = this.port ?? 0;\n        return { host, port };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk() {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n    return process.emitWarning(message, { code: exports.MONGODB_WARNING_CODE });\n}\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n    return Object.values(en).join(', ');\n}\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while (remainingItemsToShuffle > lowerBound) {\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n/**\n * TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n * @internal\n * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.md#read-concern\n */\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nfunction parseInteger(value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n/**\n * This function throws a MongoAPIError in the event that either of the following is true:\n * * If the provided address domain does not match the provided parent domain\n * * If the parent domain contains less than three `.` separated parts and the provided address does not contain at least one more domain level than its parent\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns void\n */\nfunction checkParentDomainMatch(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    const srvIsLessThanThreeParts = normalizedSrvHost.split('.').length < 3;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n    let srvHostDomain = srvIsLessThanThreeParts\n        ? normalizedSrvHost\n        : `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n    if (!srvHostDomain.startsWith('.')) {\n        srvHostDomain = '.' + srvHostDomain;\n    }\n    if (srvIsLessThanThreeParts &&\n        normalizedAddress.split('.').length <= normalizedSrvHost.split('.').length) {\n        throw new error_1.MongoAPIError('Server record does not have at least one more domain level than parent URI');\n    }\n    if (!addressDomain.endsWith(srvHostDomain)) {\n        throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n    }\n}\n/**\n * Perform a get request that returns status and body.\n * @internal\n */\nfunction get(url, options = {}) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable prefer-const */\n        let timeoutId;\n        const request = http\n            .get(url, options, response => {\n            response.setEncoding('utf8');\n            let body = '';\n            response.on('data', chunk => (body += chunk));\n            response.on('end', () => {\n                (0, timers_1.clearTimeout)(timeoutId);\n                resolve({ status: response.statusCode, body });\n            });\n        })\n            .on('error', error => {\n            (0, timers_1.clearTimeout)(timeoutId);\n            reject(error);\n        })\n            .end();\n        timeoutId = (0, timers_1.setTimeout)(() => {\n            request.destroy(new error_1.MongoNetworkTimeoutError(`request timed out after 10 seconds`));\n        }, 10000);\n    });\n}\nasync function request(uri, options = {}) {\n    return await new Promise((resolve, reject) => {\n        const requestOptions = {\n            method: 'GET',\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, res => {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.once('end', () => {\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                }\n                catch {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once('error', error => reject(error));\n        req.end();\n    });\n}\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n    return host && match.test(host.toLowerCase()) ? true : false;\n}\nfunction promiseWithResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise(function withResolversExecutor(promiseResolve, promiseReject) {\n        resolve = promiseResolve;\n        reject = promiseReject;\n    });\n    return { promise, resolve, reject };\n}\n/**\n * A noop function intended for use in preventing unhandled rejections.\n *\n * @example\n * ```js\n * const promise = myAsyncTask();\n * // eslint-disable-next-line github/no-then\n * promise.then(undefined, squashError);\n * ```\n */\nfunction squashError(_error) {\n    return;\n}\nexports.randomBytes = (0, util_1.promisify)(crypto.randomBytes);\n/**\n * Replicates the events.once helper.\n *\n * Removes unused signal logic and It **only** supports 0 or 1 argument events.\n *\n * @param ee - An event emitter that may emit `ev`\n * @param name - An event name to wait for\n */\nasync function once(ee, name, options) {\n    options?.signal?.throwIfAborted();\n    const { promise, resolve, reject } = promiseWithResolvers();\n    const onEvent = (data) => resolve(data);\n    const onError = (error) => reject(error);\n    const abortListener = addAbortListener(options?.signal, function () {\n        reject(this.reason);\n    });\n    ee.once(name, onEvent).once('error', onError);\n    try {\n        return await promise;\n    }\n    finally {\n        ee.off(name, onEvent);\n        ee.off('error', onError);\n        abortListener?.[exports.kDispose]();\n    }\n}\nfunction maybeAddIdToDocuments(coll, docOrDocs, options) {\n    const forceServerObjectId = typeof options.forceServerObjectId === 'boolean'\n        ? options.forceServerObjectId\n        : coll.s.db.options?.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docOrDocs;\n    }\n    const transform = (doc) => {\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    };\n    return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);\n}\nasync function fileIsAccessible(fileName, mode) {\n    try {\n        await fs_1.promises.access(fileName, mode);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction csotMin(duration1, duration2) {\n    if (duration1 === 0)\n        return duration2;\n    if (duration2 === 0)\n        return duration1;\n    return Math.min(duration1, duration2);\n}\nfunction noop() {\n    return;\n}\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original, isTopLevelDecorateCall = true) {\n    if (isTopLevelDecorateCall) {\n        // The original value could have been either a JS object or a BSON buffer\n        if (Buffer.isBuffer(original)) {\n            original = (0, bson_1.deserialize)(original);\n        }\n        if (Buffer.isBuffer(decrypted)) {\n            throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n        }\n    }\n    if (!decrypted || typeof decrypted !== 'object')\n        return;\n    for (const k of Object.keys(decrypted)) {\n        const originalValue = original[k];\n        // An object was decrypted by libmongocrypt if and only if it was\n        // a BSON Binary object with subtype 6.\n        if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n            if (!decrypted[constants_2.kDecoratedKeys]) {\n                Object.defineProperty(decrypted, constants_2.kDecoratedKeys, {\n                    value: [],\n                    configurable: true,\n                    enumerable: false,\n                    writable: false\n                });\n            }\n            // this is defined in the preceding if-statement\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            decrypted[constants_2.kDecoratedKeys].push(k);\n            // Do not recurse into this decrypted value. It could be a sub-document/array,\n            // in which case there is no original value associated with its subfields.\n            continue;\n        }\n        decorateDecryptionResult(decrypted[k], originalValue, false);\n    }\n}\n/** @internal */\nexports.kDispose = Symbol.dispose ?? Symbol('dispose');\n/**\n * A utility that helps with writing listener code idiomatically\n *\n * @example\n * ```js\n * using listener = addAbortListener(signal, function () {\n *   console.log('aborted', this.reason);\n * });\n * ```\n *\n * @param signal - if exists adds an abort listener\n * @param listener - the listener to be added to signal\n * @returns A disposable that will remove the abort listener\n */\nfunction addAbortListener(signal, listener) {\n    if (signal == null)\n        return;\n    signal.addEventListener('abort', listener, { once: true });\n    return { [exports.kDispose]: () => signal.removeEventListener('abort', listener) };\n}\n/**\n * Takes a promise and races it with a promise wrapping the abort event of the optionally provided signal.\n * The given promise is _always_ ordered before the signal's abort promise.\n * When given an already rejected promise and an already aborted signal, the promise's rejection takes precedence.\n *\n * Any asynchronous processing in `promise` will continue even after the abort signal has fired,\n * but control will be returned to the caller\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n *\n * @param promise - A promise to discard if the signal aborts\n * @param options - An options object carrying an optional signal\n */\nasync function abortable(promise, { signal }) {\n    if (signal == null) {\n        return await promise;\n    }\n    const { promise: aborted, reject } = promiseWithResolvers();\n    const abortListener = signal.aborted\n        ? reject(signal.reason)\n        : addAbortListener(signal, function () {\n            reject(this.reason);\n        });\n    try {\n        return await Promise.race([promise, aborted]);\n    }\n    finally {\n        abortListener?.[exports.kDispose]();\n    }\n}\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WriteConcern = exports.WRITE_CONCERN_KEYS = void 0;\nexports.throwIfWriteConcernError = throwIfWriteConcernError;\nconst responses_1 = require(\"./cmap/wire_protocol/responses\");\nconst error_1 = require(\"./error\");\nexports.WRITE_CONCERN_KEYS = ['w', 'wtimeout', 'j', 'journal', 'fsync'];\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */\nclass WriteConcern {\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */\n    constructor(w, wtimeoutMS, journal, fsync) {\n        if (w != null) {\n            if (!Number.isNaN(Number(w))) {\n                this.w = Number(w);\n            }\n            else {\n                this.w = w;\n            }\n        }\n        if (wtimeoutMS != null) {\n            this.wtimeoutMS = this.wtimeout = wtimeoutMS;\n        }\n        if (journal != null) {\n            this.journal = this.j = journal;\n        }\n        if (fsync != null) {\n            this.journal = this.j = fsync ? true : false;\n        }\n    }\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */\n    static apply(command, writeConcern) {\n        const wc = {};\n        // The write concern document sent to the server has w/wtimeout/j fields.\n        if (writeConcern.w != null)\n            wc.w = writeConcern.w;\n        if (writeConcern.wtimeoutMS != null)\n            wc.wtimeout = writeConcern.wtimeoutMS;\n        if (writeConcern.journal != null)\n            wc.j = writeConcern.j;\n        command.writeConcern = wc;\n        return command;\n    }\n    /** Construct a WriteConcern given an options object. */\n    static fromOptions(options, inherit) {\n        if (options == null)\n            return undefined;\n        inherit = inherit ?? {};\n        let opts;\n        if (typeof options === 'string' || typeof options === 'number') {\n            opts = { w: options };\n        }\n        else if (options instanceof WriteConcern) {\n            opts = options;\n        }\n        else {\n            opts = options.writeConcern;\n        }\n        const parentOpts = inherit instanceof WriteConcern ? inherit : inherit.writeConcern;\n        const mergedOpts = { ...parentOpts, ...opts };\n        const { w = undefined, wtimeout = undefined, j = undefined, fsync = undefined, journal = undefined, wtimeoutMS = undefined } = mergedOpts;\n        if (w != null ||\n            wtimeout != null ||\n            wtimeoutMS != null ||\n            j != null ||\n            journal != null ||\n            fsync != null) {\n            return new WriteConcern(w, wtimeout ?? wtimeoutMS, j ?? journal, fsync);\n        }\n        return undefined;\n    }\n}\nexports.WriteConcern = WriteConcern;\n/** Called with either a plain object or MongoDBResponse */\nfunction throwIfWriteConcernError(response) {\n    if (typeof response === 'object' && response != null) {\n        const writeConcernError = responses_1.MongoDBResponse.is(response) && response.has('writeConcernError')\n            ? response.toObject()\n            : !responses_1.MongoDBResponse.is(response) && 'writeConcernError' in response\n                ? response\n                : null;\n        if (writeConcernError != null) {\n            throw new error_1.MongoWriteConcernError(writeConcernError);\n        }\n    }\n}\n//# sourceMappingURL=write_concern.js.map","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\"use strict\";\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = global.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = global.process) == null ? void 0 : _global_process1.env) === \"object\" ? global.process : require(\"next/dist/compiled/process\");\n\n//# sourceMappingURL=process.js.map","\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  RequestCookies: () => RequestCookies,\n  ResponseCookies: () => ResponseCookies,\n  parseCookie: () => parseCookie,\n  parseSetCookie: () => parseSetCookie,\n  stringifyCookie: () => stringifyCookie\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/serialize.ts\nfunction stringifyCookie(c) {\n  var _a;\n  const attrs = [\n    \"path\" in c && c.path && `Path=${c.path}`,\n    \"expires\" in c && (c.expires || c.expires === 0) && `Expires=${(typeof c.expires === \"number\" ? new Date(c.expires) : c.expires).toUTCString()}`,\n    \"maxAge\" in c && typeof c.maxAge === \"number\" && `Max-Age=${c.maxAge}`,\n    \"domain\" in c && c.domain && `Domain=${c.domain}`,\n    \"secure\" in c && c.secure && \"Secure\",\n    \"httpOnly\" in c && c.httpOnly && \"HttpOnly\",\n    \"sameSite\" in c && c.sameSite && `SameSite=${c.sameSite}`,\n    \"partitioned\" in c && c.partitioned && \"Partitioned\",\n    \"priority\" in c && c.priority && `Priority=${c.priority}`\n  ].filter(Boolean);\n  const stringified = `${c.name}=${encodeURIComponent((_a = c.value) != null ? _a : \"\")}`;\n  return attrs.length === 0 ? stringified : `${stringified}; ${attrs.join(\"; \")}`;\n}\nfunction parseCookie(cookie) {\n  const map = /* @__PURE__ */ new Map();\n  for (const pair of cookie.split(/; */)) {\n    if (!pair)\n      continue;\n    const splitAt = pair.indexOf(\"=\");\n    if (splitAt === -1) {\n      map.set(pair, \"true\");\n      continue;\n    }\n    const [key, value] = [pair.slice(0, splitAt), pair.slice(splitAt + 1)];\n    try {\n      map.set(key, decodeURIComponent(value != null ? value : \"true\"));\n    } catch {\n    }\n  }\n  return map;\n}\nfunction parseSetCookie(setCookie) {\n  if (!setCookie) {\n    return void 0;\n  }\n  const [[name, value], ...attributes] = parseCookie(setCookie);\n  const {\n    domain,\n    expires,\n    httponly,\n    maxage,\n    path,\n    samesite,\n    secure,\n    partitioned,\n    priority\n  } = Object.fromEntries(\n    attributes.map(([key, value2]) => [key.toLowerCase(), value2])\n  );\n  const cookie = {\n    name,\n    value: decodeURIComponent(value),\n    domain,\n    ...expires && { expires: new Date(expires) },\n    ...httponly && { httpOnly: true },\n    ...typeof maxage === \"string\" && { maxAge: Number(maxage) },\n    path,\n    ...samesite && { sameSite: parseSameSite(samesite) },\n    ...secure && { secure: true },\n    ...priority && { priority: parsePriority(priority) },\n    ...partitioned && { partitioned: true }\n  };\n  return compact(cookie);\n}\nfunction compact(t) {\n  const newT = {};\n  for (const key in t) {\n    if (t[key]) {\n      newT[key] = t[key];\n    }\n  }\n  return newT;\n}\nvar SAME_SITE = [\"strict\", \"lax\", \"none\"];\nfunction parseSameSite(string) {\n  string = string.toLowerCase();\n  return SAME_SITE.includes(string) ? string : void 0;\n}\nvar PRIORITY = [\"low\", \"medium\", \"high\"];\nfunction parsePriority(string) {\n  string = string.toLowerCase();\n  return PRIORITY.includes(string) ? string : void 0;\n}\nfunction splitCookiesString(cookiesString) {\n  if (!cookiesString)\n    return [];\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        lastComma = pos;\n        pos += 1;\n        skipWhitespace();\n        nextStart = pos;\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          cookiesSeparatorFound = true;\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n  return cookiesStrings;\n}\n\n// src/request-cookies.ts\nvar RequestCookies = class {\n  constructor(requestHeaders) {\n    /** @internal */\n    this._parsed = /* @__PURE__ */ new Map();\n    this._headers = requestHeaders;\n    const header = requestHeaders.get(\"cookie\");\n    if (header) {\n      const parsed = parseCookie(header);\n      for (const [name, value] of parsed) {\n        this._parsed.set(name, { name, value });\n      }\n    }\n  }\n  [Symbol.iterator]() {\n    return this._parsed[Symbol.iterator]();\n  }\n  /**\n   * The amount of cookies received from the client\n   */\n  get size() {\n    return this._parsed.size;\n  }\n  get(...args) {\n    const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n    return this._parsed.get(name);\n  }\n  getAll(...args) {\n    var _a;\n    const all = Array.from(this._parsed);\n    if (!args.length) {\n      return all.map(([_, value]) => value);\n    }\n    const name = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n    return all.filter(([n]) => n === name).map(([_, value]) => value);\n  }\n  has(name) {\n    return this._parsed.has(name);\n  }\n  set(...args) {\n    const [name, value] = args.length === 1 ? [args[0].name, args[0].value] : args;\n    const map = this._parsed;\n    map.set(name, { name, value });\n    this._headers.set(\n      \"cookie\",\n      Array.from(map).map(([_, value2]) => stringifyCookie(value2)).join(\"; \")\n    );\n    return this;\n  }\n  /**\n   * Delete the cookies matching the passed name or names in the request.\n   */\n  delete(names) {\n    const map = this._parsed;\n    const result = !Array.isArray(names) ? map.delete(names) : names.map((name) => map.delete(name));\n    this._headers.set(\n      \"cookie\",\n      Array.from(map).map(([_, value]) => stringifyCookie(value)).join(\"; \")\n    );\n    return result;\n  }\n  /**\n   * Delete all the cookies in the cookies in the request.\n   */\n  clear() {\n    this.delete(Array.from(this._parsed.keys()));\n    return this;\n  }\n  /**\n   * Format the cookies in the request as a string for logging\n   */\n  [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n    return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n  }\n  toString() {\n    return [...this._parsed.values()].map((v) => `${v.name}=${encodeURIComponent(v.value)}`).join(\"; \");\n  }\n};\n\n// src/response-cookies.ts\nvar ResponseCookies = class {\n  constructor(responseHeaders) {\n    /** @internal */\n    this._parsed = /* @__PURE__ */ new Map();\n    var _a, _b, _c;\n    this._headers = responseHeaders;\n    const setCookie = (_c = (_b = (_a = responseHeaders.getSetCookie) == null ? void 0 : _a.call(responseHeaders)) != null ? _b : responseHeaders.get(\"set-cookie\")) != null ? _c : [];\n    const cookieStrings = Array.isArray(setCookie) ? setCookie : splitCookiesString(setCookie);\n    for (const cookieString of cookieStrings) {\n      const parsed = parseSetCookie(cookieString);\n      if (parsed)\n        this._parsed.set(parsed.name, parsed);\n    }\n  }\n  /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n   */\n  get(...args) {\n    const key = typeof args[0] === \"string\" ? args[0] : args[0].name;\n    return this._parsed.get(key);\n  }\n  /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n   */\n  getAll(...args) {\n    var _a;\n    const all = Array.from(this._parsed.values());\n    if (!args.length) {\n      return all;\n    }\n    const key = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n    return all.filter((c) => c.name === key);\n  }\n  has(name) {\n    return this._parsed.has(name);\n  }\n  /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n   */\n  set(...args) {\n    const [name, value, cookie] = args.length === 1 ? [args[0].name, args[0].value, args[0]] : args;\n    const map = this._parsed;\n    map.set(name, normalizeCookie({ name, value, ...cookie }));\n    replace(map, this._headers);\n    return this;\n  }\n  /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n   */\n  delete(...args) {\n    const [name, path, domain] = typeof args[0] === \"string\" ? [args[0]] : [args[0].name, args[0].path, args[0].domain];\n    return this.set({ name, path, domain, value: \"\", expires: /* @__PURE__ */ new Date(0) });\n  }\n  [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n    return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n  }\n  toString() {\n    return [...this._parsed.values()].map(stringifyCookie).join(\"; \");\n  }\n};\nfunction replace(bag, headers) {\n  headers.delete(\"set-cookie\");\n  for (const [, value] of bag) {\n    const serialized = stringifyCookie(value);\n    headers.append(\"set-cookie\", serialized);\n  }\n}\nfunction normalizeCookie(cookie = { name: \"\", value: \"\" }) {\n  if (typeof cookie.expires === \"number\") {\n    cookie.expires = new Date(cookie.expires);\n  }\n  if (cookie.maxAge) {\n    cookie.expires = new Date(Date.now() + cookie.maxAge * 1e3);\n  }\n  if (cookie.path === null || cookie.path === void 0) {\n    cookie.path = \"/\";\n  }\n  return cookie;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  RequestCookies,\n  ResponseCookies,\n  parseCookie,\n  parseSetCookie,\n  stringifyCookie\n});\n","(()=>{\"use strict\";var e={491:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ContextAPI=void 0;const n=r(223);const a=r(172);const o=r(930);const i=\"context\";const c=new n.NoopContextManager;class ContextAPI{constructor(){}static getInstance(){if(!this._instance){this._instance=new ContextAPI}return this._instance}setGlobalContextManager(e){return(0,a.registerGlobal)(i,e,o.DiagAPI.instance())}active(){return this._getContextManager().active()}with(e,t,r,...n){return this._getContextManager().with(e,t,r,...n)}bind(e,t){return this._getContextManager().bind(e,t)}_getContextManager(){return(0,a.getGlobal)(i)||c}disable(){this._getContextManager().disable();(0,a.unregisterGlobal)(i,o.DiagAPI.instance())}}t.ContextAPI=ContextAPI},930:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagAPI=void 0;const n=r(56);const a=r(912);const o=r(957);const i=r(172);const c=\"diag\";class DiagAPI{constructor(){function _logProxy(e){return function(...t){const r=(0,i.getGlobal)(\"diag\");if(!r)return;return r[e](...t)}}const e=this;const setLogger=(t,r={logLevel:o.DiagLogLevel.INFO})=>{var n,c,s;if(t===e){const t=new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");e.error((n=t.stack)!==null&&n!==void 0?n:t.message);return false}if(typeof r===\"number\"){r={logLevel:r}}const u=(0,i.getGlobal)(\"diag\");const l=(0,a.createLogLevelDiagLogger)((c=r.logLevel)!==null&&c!==void 0?c:o.DiagLogLevel.INFO,t);if(u&&!r.suppressOverrideMessage){const e=(s=(new Error).stack)!==null&&s!==void 0?s:\"<failed to generate stacktrace>\";u.warn(`Current logger will be overwritten from ${e}`);l.warn(`Current logger will overwrite one already registered from ${e}`)}return(0,i.registerGlobal)(\"diag\",l,e,true)};e.setLogger=setLogger;e.disable=()=>{(0,i.unregisterGlobal)(c,e)};e.createComponentLogger=e=>new n.DiagComponentLogger(e);e.verbose=_logProxy(\"verbose\");e.debug=_logProxy(\"debug\");e.info=_logProxy(\"info\");e.warn=_logProxy(\"warn\");e.error=_logProxy(\"error\")}static instance(){if(!this._instance){this._instance=new DiagAPI}return this._instance}}t.DiagAPI=DiagAPI},653:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.MetricsAPI=void 0;const n=r(660);const a=r(172);const o=r(930);const i=\"metrics\";class MetricsAPI{constructor(){}static getInstance(){if(!this._instance){this._instance=new MetricsAPI}return this._instance}setGlobalMeterProvider(e){return(0,a.registerGlobal)(i,e,o.DiagAPI.instance())}getMeterProvider(){return(0,a.getGlobal)(i)||n.NOOP_METER_PROVIDER}getMeter(e,t,r){return this.getMeterProvider().getMeter(e,t,r)}disable(){(0,a.unregisterGlobal)(i,o.DiagAPI.instance())}}t.MetricsAPI=MetricsAPI},181:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.PropagationAPI=void 0;const n=r(172);const a=r(874);const o=r(194);const i=r(277);const c=r(369);const s=r(930);const u=\"propagation\";const l=new a.NoopTextMapPropagator;class PropagationAPI{constructor(){this.createBaggage=c.createBaggage;this.getBaggage=i.getBaggage;this.getActiveBaggage=i.getActiveBaggage;this.setBaggage=i.setBaggage;this.deleteBaggage=i.deleteBaggage}static getInstance(){if(!this._instance){this._instance=new PropagationAPI}return this._instance}setGlobalPropagator(e){return(0,n.registerGlobal)(u,e,s.DiagAPI.instance())}inject(e,t,r=o.defaultTextMapSetter){return this._getGlobalPropagator().inject(e,t,r)}extract(e,t,r=o.defaultTextMapGetter){return this._getGlobalPropagator().extract(e,t,r)}fields(){return this._getGlobalPropagator().fields()}disable(){(0,n.unregisterGlobal)(u,s.DiagAPI.instance())}_getGlobalPropagator(){return(0,n.getGlobal)(u)||l}}t.PropagationAPI=PropagationAPI},997:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceAPI=void 0;const n=r(172);const a=r(846);const o=r(139);const i=r(607);const c=r(930);const s=\"trace\";class TraceAPI{constructor(){this._proxyTracerProvider=new a.ProxyTracerProvider;this.wrapSpanContext=o.wrapSpanContext;this.isSpanContextValid=o.isSpanContextValid;this.deleteSpan=i.deleteSpan;this.getSpan=i.getSpan;this.getActiveSpan=i.getActiveSpan;this.getSpanContext=i.getSpanContext;this.setSpan=i.setSpan;this.setSpanContext=i.setSpanContext}static getInstance(){if(!this._instance){this._instance=new TraceAPI}return this._instance}setGlobalTracerProvider(e){const t=(0,n.registerGlobal)(s,this._proxyTracerProvider,c.DiagAPI.instance());if(t){this._proxyTracerProvider.setDelegate(e)}return t}getTracerProvider(){return(0,n.getGlobal)(s)||this._proxyTracerProvider}getTracer(e,t){return this.getTracerProvider().getTracer(e,t)}disable(){(0,n.unregisterGlobal)(s,c.DiagAPI.instance());this._proxyTracerProvider=new a.ProxyTracerProvider}}t.TraceAPI=TraceAPI},277:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.deleteBaggage=t.setBaggage=t.getActiveBaggage=t.getBaggage=void 0;const n=r(491);const a=r(780);const o=(0,a.createContextKey)(\"OpenTelemetry Baggage Key\");function getBaggage(e){return e.getValue(o)||undefined}t.getBaggage=getBaggage;function getActiveBaggage(){return getBaggage(n.ContextAPI.getInstance().active())}t.getActiveBaggage=getActiveBaggage;function setBaggage(e,t){return e.setValue(o,t)}t.setBaggage=setBaggage;function deleteBaggage(e){return e.deleteValue(o)}t.deleteBaggage=deleteBaggage},993:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.BaggageImpl=void 0;class BaggageImpl{constructor(e){this._entries=e?new Map(e):new Map}getEntry(e){const t=this._entries.get(e);if(!t){return undefined}return Object.assign({},t)}getAllEntries(){return Array.from(this._entries.entries()).map((([e,t])=>[e,t]))}setEntry(e,t){const r=new BaggageImpl(this._entries);r._entries.set(e,t);return r}removeEntry(e){const t=new BaggageImpl(this._entries);t._entries.delete(e);return t}removeEntries(...e){const t=new BaggageImpl(this._entries);for(const r of e){t._entries.delete(r)}return t}clear(){return new BaggageImpl}}t.BaggageImpl=BaggageImpl},830:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.baggageEntryMetadataSymbol=void 0;t.baggageEntryMetadataSymbol=Symbol(\"BaggageEntryMetadata\")},369:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.baggageEntryMetadataFromString=t.createBaggage=void 0;const n=r(930);const a=r(993);const o=r(830);const i=n.DiagAPI.instance();function createBaggage(e={}){return new a.BaggageImpl(new Map(Object.entries(e)))}t.createBaggage=createBaggage;function baggageEntryMetadataFromString(e){if(typeof e!==\"string\"){i.error(`Cannot create baggage metadata from unknown type: ${typeof e}`);e=\"\"}return{__TYPE__:o.baggageEntryMetadataSymbol,toString(){return e}}}t.baggageEntryMetadataFromString=baggageEntryMetadataFromString},67:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.context=void 0;const n=r(491);t.context=n.ContextAPI.getInstance()},223:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopContextManager=void 0;const n=r(780);class NoopContextManager{active(){return n.ROOT_CONTEXT}with(e,t,r,...n){return t.call(r,...n)}bind(e,t){return t}enable(){return this}disable(){return this}}t.NoopContextManager=NoopContextManager},780:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ROOT_CONTEXT=t.createContextKey=void 0;function createContextKey(e){return Symbol.for(e)}t.createContextKey=createContextKey;class BaseContext{constructor(e){const t=this;t._currentContext=e?new Map(e):new Map;t.getValue=e=>t._currentContext.get(e);t.setValue=(e,r)=>{const n=new BaseContext(t._currentContext);n._currentContext.set(e,r);return n};t.deleteValue=e=>{const r=new BaseContext(t._currentContext);r._currentContext.delete(e);return r}}}t.ROOT_CONTEXT=new BaseContext},506:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.diag=void 0;const n=r(930);t.diag=n.DiagAPI.instance()},56:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagComponentLogger=void 0;const n=r(172);class DiagComponentLogger{constructor(e){this._namespace=e.namespace||\"DiagComponentLogger\"}debug(...e){return logProxy(\"debug\",this._namespace,e)}error(...e){return logProxy(\"error\",this._namespace,e)}info(...e){return logProxy(\"info\",this._namespace,e)}warn(...e){return logProxy(\"warn\",this._namespace,e)}verbose(...e){return logProxy(\"verbose\",this._namespace,e)}}t.DiagComponentLogger=DiagComponentLogger;function logProxy(e,t,r){const a=(0,n.getGlobal)(\"diag\");if(!a){return}r.unshift(t);return a[e](...r)}},972:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagConsoleLogger=void 0;const r=[{n:\"error\",c:\"error\"},{n:\"warn\",c:\"warn\"},{n:\"info\",c:\"info\"},{n:\"debug\",c:\"debug\"},{n:\"verbose\",c:\"trace\"}];class DiagConsoleLogger{constructor(){function _consoleFunc(e){return function(...t){if(console){let r=console[e];if(typeof r!==\"function\"){r=console.log}if(typeof r===\"function\"){return r.apply(console,t)}}}}for(let e=0;e<r.length;e++){this[r[e].n]=_consoleFunc(r[e].c)}}}t.DiagConsoleLogger=DiagConsoleLogger},912:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createLogLevelDiagLogger=void 0;const n=r(957);function createLogLevelDiagLogger(e,t){if(e<n.DiagLogLevel.NONE){e=n.DiagLogLevel.NONE}else if(e>n.DiagLogLevel.ALL){e=n.DiagLogLevel.ALL}t=t||{};function _filterFunc(r,n){const a=t[r];if(typeof a===\"function\"&&e>=n){return a.bind(t)}return function(){}}return{error:_filterFunc(\"error\",n.DiagLogLevel.ERROR),warn:_filterFunc(\"warn\",n.DiagLogLevel.WARN),info:_filterFunc(\"info\",n.DiagLogLevel.INFO),debug:_filterFunc(\"debug\",n.DiagLogLevel.DEBUG),verbose:_filterFunc(\"verbose\",n.DiagLogLevel.VERBOSE)}}t.createLogLevelDiagLogger=createLogLevelDiagLogger},957:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagLogLevel=void 0;var r;(function(e){e[e[\"NONE\"]=0]=\"NONE\";e[e[\"ERROR\"]=30]=\"ERROR\";e[e[\"WARN\"]=50]=\"WARN\";e[e[\"INFO\"]=60]=\"INFO\";e[e[\"DEBUG\"]=70]=\"DEBUG\";e[e[\"VERBOSE\"]=80]=\"VERBOSE\";e[e[\"ALL\"]=9999]=\"ALL\"})(r=t.DiagLogLevel||(t.DiagLogLevel={}))},172:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.unregisterGlobal=t.getGlobal=t.registerGlobal=void 0;const n=r(200);const a=r(521);const o=r(130);const i=a.VERSION.split(\".\")[0];const c=Symbol.for(`opentelemetry.js.api.${i}`);const s=n._globalThis;function registerGlobal(e,t,r,n=false){var o;const i=s[c]=(o=s[c])!==null&&o!==void 0?o:{version:a.VERSION};if(!n&&i[e]){const t=new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e}`);r.error(t.stack||t.message);return false}if(i.version!==a.VERSION){const t=new Error(`@opentelemetry/api: Registration of version v${i.version} for ${e} does not match previously registered API v${a.VERSION}`);r.error(t.stack||t.message);return false}i[e]=t;r.debug(`@opentelemetry/api: Registered a global for ${e} v${a.VERSION}.`);return true}t.registerGlobal=registerGlobal;function getGlobal(e){var t,r;const n=(t=s[c])===null||t===void 0?void 0:t.version;if(!n||!(0,o.isCompatible)(n)){return}return(r=s[c])===null||r===void 0?void 0:r[e]}t.getGlobal=getGlobal;function unregisterGlobal(e,t){t.debug(`@opentelemetry/api: Unregistering a global for ${e} v${a.VERSION}.`);const r=s[c];if(r){delete r[e]}}t.unregisterGlobal=unregisterGlobal},130:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.isCompatible=t._makeCompatibilityCheck=void 0;const n=r(521);const a=/^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;function _makeCompatibilityCheck(e){const t=new Set([e]);const r=new Set;const n=e.match(a);if(!n){return()=>false}const o={major:+n[1],minor:+n[2],patch:+n[3],prerelease:n[4]};if(o.prerelease!=null){return function isExactmatch(t){return t===e}}function _reject(e){r.add(e);return false}function _accept(e){t.add(e);return true}return function isCompatible(e){if(t.has(e)){return true}if(r.has(e)){return false}const n=e.match(a);if(!n){return _reject(e)}const i={major:+n[1],minor:+n[2],patch:+n[3],prerelease:n[4]};if(i.prerelease!=null){return _reject(e)}if(o.major!==i.major){return _reject(e)}if(o.major===0){if(o.minor===i.minor&&o.patch<=i.patch){return _accept(e)}return _reject(e)}if(o.minor<=i.minor){return _accept(e)}return _reject(e)}}t._makeCompatibilityCheck=_makeCompatibilityCheck;t.isCompatible=_makeCompatibilityCheck(n.VERSION)},886:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.metrics=void 0;const n=r(653);t.metrics=n.MetricsAPI.getInstance()},901:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ValueType=void 0;var r;(function(e){e[e[\"INT\"]=0]=\"INT\";e[e[\"DOUBLE\"]=1]=\"DOUBLE\"})(r=t.ValueType||(t.ValueType={}))},102:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createNoopMeter=t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC=t.NOOP_OBSERVABLE_GAUGE_METRIC=t.NOOP_OBSERVABLE_COUNTER_METRIC=t.NOOP_UP_DOWN_COUNTER_METRIC=t.NOOP_HISTOGRAM_METRIC=t.NOOP_COUNTER_METRIC=t.NOOP_METER=t.NoopObservableUpDownCounterMetric=t.NoopObservableGaugeMetric=t.NoopObservableCounterMetric=t.NoopObservableMetric=t.NoopHistogramMetric=t.NoopUpDownCounterMetric=t.NoopCounterMetric=t.NoopMetric=t.NoopMeter=void 0;class NoopMeter{constructor(){}createHistogram(e,r){return t.NOOP_HISTOGRAM_METRIC}createCounter(e,r){return t.NOOP_COUNTER_METRIC}createUpDownCounter(e,r){return t.NOOP_UP_DOWN_COUNTER_METRIC}createObservableGauge(e,r){return t.NOOP_OBSERVABLE_GAUGE_METRIC}createObservableCounter(e,r){return t.NOOP_OBSERVABLE_COUNTER_METRIC}createObservableUpDownCounter(e,r){return t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC}addBatchObservableCallback(e,t){}removeBatchObservableCallback(e){}}t.NoopMeter=NoopMeter;class NoopMetric{}t.NoopMetric=NoopMetric;class NoopCounterMetric extends NoopMetric{add(e,t){}}t.NoopCounterMetric=NoopCounterMetric;class NoopUpDownCounterMetric extends NoopMetric{add(e,t){}}t.NoopUpDownCounterMetric=NoopUpDownCounterMetric;class NoopHistogramMetric extends NoopMetric{record(e,t){}}t.NoopHistogramMetric=NoopHistogramMetric;class NoopObservableMetric{addCallback(e){}removeCallback(e){}}t.NoopObservableMetric=NoopObservableMetric;class NoopObservableCounterMetric extends NoopObservableMetric{}t.NoopObservableCounterMetric=NoopObservableCounterMetric;class NoopObservableGaugeMetric extends NoopObservableMetric{}t.NoopObservableGaugeMetric=NoopObservableGaugeMetric;class NoopObservableUpDownCounterMetric extends NoopObservableMetric{}t.NoopObservableUpDownCounterMetric=NoopObservableUpDownCounterMetric;t.NOOP_METER=new NoopMeter;t.NOOP_COUNTER_METRIC=new NoopCounterMetric;t.NOOP_HISTOGRAM_METRIC=new NoopHistogramMetric;t.NOOP_UP_DOWN_COUNTER_METRIC=new NoopUpDownCounterMetric;t.NOOP_OBSERVABLE_COUNTER_METRIC=new NoopObservableCounterMetric;t.NOOP_OBSERVABLE_GAUGE_METRIC=new NoopObservableGaugeMetric;t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC=new NoopObservableUpDownCounterMetric;function createNoopMeter(){return t.NOOP_METER}t.createNoopMeter=createNoopMeter},660:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NOOP_METER_PROVIDER=t.NoopMeterProvider=void 0;const n=r(102);class NoopMeterProvider{getMeter(e,t,r){return n.NOOP_METER}}t.NoopMeterProvider=NoopMeterProvider;t.NOOP_METER_PROVIDER=new NoopMeterProvider},200:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){if(n===undefined)n=r;Object.defineProperty(e,n,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,n){if(n===undefined)n=r;e[n]=t[r]});var a=this&&this.__exportStar||function(e,t){for(var r in e)if(r!==\"default\"&&!Object.prototype.hasOwnProperty.call(t,r))n(t,e,r)};Object.defineProperty(t,\"__esModule\",{value:true});a(r(46),t)},651:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t._globalThis=void 0;t._globalThis=typeof globalThis===\"object\"?globalThis:global},46:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){if(n===undefined)n=r;Object.defineProperty(e,n,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,n){if(n===undefined)n=r;e[n]=t[r]});var a=this&&this.__exportStar||function(e,t){for(var r in e)if(r!==\"default\"&&!Object.prototype.hasOwnProperty.call(t,r))n(t,e,r)};Object.defineProperty(t,\"__esModule\",{value:true});a(r(651),t)},939:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.propagation=void 0;const n=r(181);t.propagation=n.PropagationAPI.getInstance()},874:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTextMapPropagator=void 0;class NoopTextMapPropagator{inject(e,t){}extract(e,t){return e}fields(){return[]}}t.NoopTextMapPropagator=NoopTextMapPropagator},194:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.defaultTextMapSetter=t.defaultTextMapGetter=void 0;t.defaultTextMapGetter={get(e,t){if(e==null){return undefined}return e[t]},keys(e){if(e==null){return[]}return Object.keys(e)}};t.defaultTextMapSetter={set(e,t,r){if(e==null){return}e[t]=r}}},845:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.trace=void 0;const n=r(997);t.trace=n.TraceAPI.getInstance()},403:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NonRecordingSpan=void 0;const n=r(476);class NonRecordingSpan{constructor(e=n.INVALID_SPAN_CONTEXT){this._spanContext=e}spanContext(){return this._spanContext}setAttribute(e,t){return this}setAttributes(e){return this}addEvent(e,t){return this}setStatus(e){return this}updateName(e){return this}end(e){}isRecording(){return false}recordException(e,t){}}t.NonRecordingSpan=NonRecordingSpan},614:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTracer=void 0;const n=r(491);const a=r(607);const o=r(403);const i=r(139);const c=n.ContextAPI.getInstance();class NoopTracer{startSpan(e,t,r=c.active()){const n=Boolean(t===null||t===void 0?void 0:t.root);if(n){return new o.NonRecordingSpan}const s=r&&(0,a.getSpanContext)(r);if(isSpanContext(s)&&(0,i.isSpanContextValid)(s)){return new o.NonRecordingSpan(s)}else{return new o.NonRecordingSpan}}startActiveSpan(e,t,r,n){let o;let i;let s;if(arguments.length<2){return}else if(arguments.length===2){s=t}else if(arguments.length===3){o=t;s=r}else{o=t;i=r;s=n}const u=i!==null&&i!==void 0?i:c.active();const l=this.startSpan(e,o,u);const g=(0,a.setSpan)(u,l);return c.with(g,s,undefined,l)}}t.NoopTracer=NoopTracer;function isSpanContext(e){return typeof e===\"object\"&&typeof e[\"spanId\"]===\"string\"&&typeof e[\"traceId\"]===\"string\"&&typeof e[\"traceFlags\"]===\"number\"}},124:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTracerProvider=void 0;const n=r(614);class NoopTracerProvider{getTracer(e,t,r){return new n.NoopTracer}}t.NoopTracerProvider=NoopTracerProvider},125:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ProxyTracer=void 0;const n=r(614);const a=new n.NoopTracer;class ProxyTracer{constructor(e,t,r,n){this._provider=e;this.name=t;this.version=r;this.options=n}startSpan(e,t,r){return this._getTracer().startSpan(e,t,r)}startActiveSpan(e,t,r,n){const a=this._getTracer();return Reflect.apply(a.startActiveSpan,a,arguments)}_getTracer(){if(this._delegate){return this._delegate}const e=this._provider.getDelegateTracer(this.name,this.version,this.options);if(!e){return a}this._delegate=e;return this._delegate}}t.ProxyTracer=ProxyTracer},846:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ProxyTracerProvider=void 0;const n=r(125);const a=r(124);const o=new a.NoopTracerProvider;class ProxyTracerProvider{getTracer(e,t,r){var a;return(a=this.getDelegateTracer(e,t,r))!==null&&a!==void 0?a:new n.ProxyTracer(this,e,t,r)}getDelegate(){var e;return(e=this._delegate)!==null&&e!==void 0?e:o}setDelegate(e){this._delegate=e}getDelegateTracer(e,t,r){var n;return(n=this._delegate)===null||n===void 0?void 0:n.getTracer(e,t,r)}}t.ProxyTracerProvider=ProxyTracerProvider},996:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SamplingDecision=void 0;var r;(function(e){e[e[\"NOT_RECORD\"]=0]=\"NOT_RECORD\";e[e[\"RECORD\"]=1]=\"RECORD\";e[e[\"RECORD_AND_SAMPLED\"]=2]=\"RECORD_AND_SAMPLED\"})(r=t.SamplingDecision||(t.SamplingDecision={}))},607:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.getSpanContext=t.setSpanContext=t.deleteSpan=t.setSpan=t.getActiveSpan=t.getSpan=void 0;const n=r(780);const a=r(403);const o=r(491);const i=(0,n.createContextKey)(\"OpenTelemetry Context Key SPAN\");function getSpan(e){return e.getValue(i)||undefined}t.getSpan=getSpan;function getActiveSpan(){return getSpan(o.ContextAPI.getInstance().active())}t.getActiveSpan=getActiveSpan;function setSpan(e,t){return e.setValue(i,t)}t.setSpan=setSpan;function deleteSpan(e){return e.deleteValue(i)}t.deleteSpan=deleteSpan;function setSpanContext(e,t){return setSpan(e,new a.NonRecordingSpan(t))}t.setSpanContext=setSpanContext;function getSpanContext(e){var t;return(t=getSpan(e))===null||t===void 0?void 0:t.spanContext()}t.getSpanContext=getSpanContext},325:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceStateImpl=void 0;const n=r(564);const a=32;const o=512;const i=\",\";const c=\"=\";class TraceStateImpl{constructor(e){this._internalState=new Map;if(e)this._parse(e)}set(e,t){const r=this._clone();if(r._internalState.has(e)){r._internalState.delete(e)}r._internalState.set(e,t);return r}unset(e){const t=this._clone();t._internalState.delete(e);return t}get(e){return this._internalState.get(e)}serialize(){return this._keys().reduce(((e,t)=>{e.push(t+c+this.get(t));return e}),[]).join(i)}_parse(e){if(e.length>o)return;this._internalState=e.split(i).reverse().reduce(((e,t)=>{const r=t.trim();const a=r.indexOf(c);if(a!==-1){const o=r.slice(0,a);const i=r.slice(a+1,t.length);if((0,n.validateKey)(o)&&(0,n.validateValue)(i)){e.set(o,i)}else{}}return e}),new Map);if(this._internalState.size>a){this._internalState=new Map(Array.from(this._internalState.entries()).reverse().slice(0,a))}}_keys(){return Array.from(this._internalState.keys()).reverse()}_clone(){const e=new TraceStateImpl;e._internalState=new Map(this._internalState);return e}}t.TraceStateImpl=TraceStateImpl},564:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.validateValue=t.validateKey=void 0;const r=\"[_0-9a-z-*/]\";const n=`[a-z]${r}{0,255}`;const a=`[a-z0-9]${r}{0,240}@[a-z]${r}{0,13}`;const o=new RegExp(`^(?:${n}|${a})$`);const i=/^[ -~]{0,255}[!-~]$/;const c=/,|=/;function validateKey(e){return o.test(e)}t.validateKey=validateKey;function validateValue(e){return i.test(e)&&!c.test(e)}t.validateValue=validateValue},98:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createTraceState=void 0;const n=r(325);function createTraceState(e){return new n.TraceStateImpl(e)}t.createTraceState=createTraceState},476:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.INVALID_SPAN_CONTEXT=t.INVALID_TRACEID=t.INVALID_SPANID=void 0;const n=r(475);t.INVALID_SPANID=\"0000000000000000\";t.INVALID_TRACEID=\"00000000000000000000000000000000\";t.INVALID_SPAN_CONTEXT={traceId:t.INVALID_TRACEID,spanId:t.INVALID_SPANID,traceFlags:n.TraceFlags.NONE}},357:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SpanKind=void 0;var r;(function(e){e[e[\"INTERNAL\"]=0]=\"INTERNAL\";e[e[\"SERVER\"]=1]=\"SERVER\";e[e[\"CLIENT\"]=2]=\"CLIENT\";e[e[\"PRODUCER\"]=3]=\"PRODUCER\";e[e[\"CONSUMER\"]=4]=\"CONSUMER\"})(r=t.SpanKind||(t.SpanKind={}))},139:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.wrapSpanContext=t.isSpanContextValid=t.isValidSpanId=t.isValidTraceId=void 0;const n=r(476);const a=r(403);const o=/^([0-9a-f]{32})$/i;const i=/^[0-9a-f]{16}$/i;function isValidTraceId(e){return o.test(e)&&e!==n.INVALID_TRACEID}t.isValidTraceId=isValidTraceId;function isValidSpanId(e){return i.test(e)&&e!==n.INVALID_SPANID}t.isValidSpanId=isValidSpanId;function isSpanContextValid(e){return isValidTraceId(e.traceId)&&isValidSpanId(e.spanId)}t.isSpanContextValid=isSpanContextValid;function wrapSpanContext(e){return new a.NonRecordingSpan(e)}t.wrapSpanContext=wrapSpanContext},847:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SpanStatusCode=void 0;var r;(function(e){e[e[\"UNSET\"]=0]=\"UNSET\";e[e[\"OK\"]=1]=\"OK\";e[e[\"ERROR\"]=2]=\"ERROR\"})(r=t.SpanStatusCode||(t.SpanStatusCode={}))},475:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceFlags=void 0;var r;(function(e){e[e[\"NONE\"]=0]=\"NONE\";e[e[\"SAMPLED\"]=1]=\"SAMPLED\"})(r=t.TraceFlags||(t.TraceFlags={}))},521:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.VERSION=void 0;t.VERSION=\"1.6.0\"}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var a=t[r]={exports:{}};var o=true;try{e[r].call(a.exports,a,a.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return a.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r={};(()=>{var e=r;Object.defineProperty(e,\"__esModule\",{value:true});e.trace=e.propagation=e.metrics=e.diag=e.context=e.INVALID_SPAN_CONTEXT=e.INVALID_TRACEID=e.INVALID_SPANID=e.isValidSpanId=e.isValidTraceId=e.isSpanContextValid=e.createTraceState=e.TraceFlags=e.SpanStatusCode=e.SpanKind=e.SamplingDecision=e.ProxyTracerProvider=e.ProxyTracer=e.defaultTextMapSetter=e.defaultTextMapGetter=e.ValueType=e.createNoopMeter=e.DiagLogLevel=e.DiagConsoleLogger=e.ROOT_CONTEXT=e.createContextKey=e.baggageEntryMetadataFromString=void 0;var t=__nccwpck_require__(369);Object.defineProperty(e,\"baggageEntryMetadataFromString\",{enumerable:true,get:function(){return t.baggageEntryMetadataFromString}});var n=__nccwpck_require__(780);Object.defineProperty(e,\"createContextKey\",{enumerable:true,get:function(){return n.createContextKey}});Object.defineProperty(e,\"ROOT_CONTEXT\",{enumerable:true,get:function(){return n.ROOT_CONTEXT}});var a=__nccwpck_require__(972);Object.defineProperty(e,\"DiagConsoleLogger\",{enumerable:true,get:function(){return a.DiagConsoleLogger}});var o=__nccwpck_require__(957);Object.defineProperty(e,\"DiagLogLevel\",{enumerable:true,get:function(){return o.DiagLogLevel}});var i=__nccwpck_require__(102);Object.defineProperty(e,\"createNoopMeter\",{enumerable:true,get:function(){return i.createNoopMeter}});var c=__nccwpck_require__(901);Object.defineProperty(e,\"ValueType\",{enumerable:true,get:function(){return c.ValueType}});var s=__nccwpck_require__(194);Object.defineProperty(e,\"defaultTextMapGetter\",{enumerable:true,get:function(){return s.defaultTextMapGetter}});Object.defineProperty(e,\"defaultTextMapSetter\",{enumerable:true,get:function(){return s.defaultTextMapSetter}});var u=__nccwpck_require__(125);Object.defineProperty(e,\"ProxyTracer\",{enumerable:true,get:function(){return u.ProxyTracer}});var l=__nccwpck_require__(846);Object.defineProperty(e,\"ProxyTracerProvider\",{enumerable:true,get:function(){return l.ProxyTracerProvider}});var g=__nccwpck_require__(996);Object.defineProperty(e,\"SamplingDecision\",{enumerable:true,get:function(){return g.SamplingDecision}});var p=__nccwpck_require__(357);Object.defineProperty(e,\"SpanKind\",{enumerable:true,get:function(){return p.SpanKind}});var d=__nccwpck_require__(847);Object.defineProperty(e,\"SpanStatusCode\",{enumerable:true,get:function(){return d.SpanStatusCode}});var _=__nccwpck_require__(475);Object.defineProperty(e,\"TraceFlags\",{enumerable:true,get:function(){return _.TraceFlags}});var f=__nccwpck_require__(98);Object.defineProperty(e,\"createTraceState\",{enumerable:true,get:function(){return f.createTraceState}});var b=__nccwpck_require__(139);Object.defineProperty(e,\"isSpanContextValid\",{enumerable:true,get:function(){return b.isSpanContextValid}});Object.defineProperty(e,\"isValidTraceId\",{enumerable:true,get:function(){return b.isValidTraceId}});Object.defineProperty(e,\"isValidSpanId\",{enumerable:true,get:function(){return b.isValidSpanId}});var v=__nccwpck_require__(476);Object.defineProperty(e,\"INVALID_SPANID\",{enumerable:true,get:function(){return v.INVALID_SPANID}});Object.defineProperty(e,\"INVALID_TRACEID\",{enumerable:true,get:function(){return v.INVALID_TRACEID}});Object.defineProperty(e,\"INVALID_SPAN_CONTEXT\",{enumerable:true,get:function(){return v.INVALID_SPAN_CONTEXT}});const O=__nccwpck_require__(67);Object.defineProperty(e,\"context\",{enumerable:true,get:function(){return O.context}});const P=__nccwpck_require__(506);Object.defineProperty(e,\"diag\",{enumerable:true,get:function(){return P.diag}});const N=__nccwpck_require__(886);Object.defineProperty(e,\"metrics\",{enumerable:true,get:function(){return N.metrics}});const S=__nccwpck_require__(939);Object.defineProperty(e,\"propagation\",{enumerable:true,get:function(){return S.propagation}});const C=__nccwpck_require__(845);Object.defineProperty(e,\"trace\",{enumerable:true,get:function(){return C.trace}});e[\"default\"]={context:O.context,diag:P.diag,metrics:N.metrics,propagation:S.propagation,trace:C.trace}})();module.exports=r})();","(()=>{\"use strict\";if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var e={};(()=>{var r=e;\n/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */r.parse=parse;r.serialize=serialize;var i=decodeURIComponent;var t=encodeURIComponent;var a=/; */;var n=/^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;function parse(e,r){if(typeof e!==\"string\"){throw new TypeError(\"argument str must be a string\")}var t={};var n=r||{};var o=e.split(a);var s=n.decode||i;for(var p=0;p<o.length;p++){var f=o[p];var u=f.indexOf(\"=\");if(u<0){continue}var v=f.substr(0,u).trim();var c=f.substr(++u,f.length).trim();if('\"'==c[0]){c=c.slice(1,-1)}if(undefined==t[v]){t[v]=tryDecode(c,s)}}return t}function serialize(e,r,i){var a=i||{};var o=a.encode||t;if(typeof o!==\"function\"){throw new TypeError(\"option encode is invalid\")}if(!n.test(e)){throw new TypeError(\"argument name is invalid\")}var s=o(r);if(s&&!n.test(s)){throw new TypeError(\"argument val is invalid\")}var p=e+\"=\"+s;if(null!=a.maxAge){var f=a.maxAge-0;if(isNaN(f)||!isFinite(f)){throw new TypeError(\"option maxAge is invalid\")}p+=\"; Max-Age=\"+Math.floor(f)}if(a.domain){if(!n.test(a.domain)){throw new TypeError(\"option domain is invalid\")}p+=\"; Domain=\"+a.domain}if(a.path){if(!n.test(a.path)){throw new TypeError(\"option path is invalid\")}p+=\"; Path=\"+a.path}if(a.expires){if(typeof a.expires.toUTCString!==\"function\"){throw new TypeError(\"option expires is invalid\")}p+=\"; Expires=\"+a.expires.toUTCString()}if(a.httpOnly){p+=\"; HttpOnly\"}if(a.secure){p+=\"; Secure\"}if(a.sameSite){var u=typeof a.sameSite===\"string\"?a.sameSite.toLowerCase():a.sameSite;switch(u){case true:p+=\"; SameSite=Strict\";break;case\"lax\":p+=\"; SameSite=Lax\";break;case\"strict\":p+=\"; SameSite=Strict\";break;case\"none\":p+=\"; SameSite=None\";break;default:throw new TypeError(\"option sameSite is invalid\")}}return p}function tryDecode(e,r){try{return r(e)}catch(r){return e}}})();module.exports=e})();","(function(){var e={452:function(e){\"use strict\";e.exports=require(\"next/dist/compiled/querystring-es3\")}};var t={};function __nccwpck_require__(o){var a=t[o];if(a!==undefined){return a.exports}var s=t[o]={exports:{}};var n=true;try{e[o](s,s.exports,__nccwpck_require__);n=false}finally{if(n)delete t[o]}return s.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var o={};!function(){var e=o;var t,a=(t=__nccwpck_require__(452))&&\"object\"==typeof t&&\"default\"in t?t.default:t,s=/https?|ftp|gopher|file/;function r(e){\"string\"==typeof e&&(e=d(e));var t=function(e,t,o){var a=e.auth,s=e.hostname,n=e.protocol||\"\",p=e.pathname||\"\",c=e.hash||\"\",i=e.query||\"\",u=!1;a=a?encodeURIComponent(a).replace(/%3A/i,\":\")+\"@\":\"\",e.host?u=a+e.host:s&&(u=a+(~s.indexOf(\":\")?\"[\"+s+\"]\":s),e.port&&(u+=\":\"+e.port)),i&&\"object\"==typeof i&&(i=t.encode(i));var f=e.search||i&&\"?\"+i||\"\";return n&&\":\"!==n.substr(-1)&&(n+=\":\"),e.slashes||(!n||o.test(n))&&!1!==u?(u=\"//\"+(u||\"\"),p&&\"/\"!==p[0]&&(p=\"/\"+p)):u||(u=\"\"),c&&\"#\"!==c[0]&&(c=\"#\"+c),f&&\"?\"!==f[0]&&(f=\"?\"+f),{protocol:n,host:u,pathname:p=p.replace(/[?#]/g,encodeURIComponent),search:f=f.replace(\"#\",\"%23\"),hash:c}}(e,a,s);return\"\"+t.protocol+t.host+t.pathname+t.search+t.hash}var n=\"http://\",p=\"w.w\",c=n+p,i=/^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i,u=/https?|ftp|gopher|file/;function h(e,t){var o=\"string\"==typeof e?d(e):e;e=\"object\"==typeof e?r(e):e;var a=d(t),s=\"\";o.protocol&&!o.slashes&&(s=o.protocol,e=e.replace(o.protocol,\"\"),s+=\"/\"===t[0]||\"/\"===e[0]?\"/\":\"\"),s&&a.protocol&&(s=\"\",a.slashes||(s=a.protocol,t=t.replace(a.protocol,\"\")));var p=e.match(i);p&&!a.protocol&&(e=e.substr((s=p[1]+(p[2]||\"\")).length),/^\\/\\/[^/]/.test(t)&&(s=s.slice(0,-1)));var f=new URL(e,c+\"/\"),m=new URL(t,f).toString().replace(c,\"\"),v=a.protocol||o.protocol;return v+=o.slashes||a.slashes?\"//\":\"\",!s&&v?m=m.replace(n,v):s&&(m=m.replace(n,\"\")),u.test(m)||~t.indexOf(\".\")||\"/\"===e.slice(-1)||\"/\"===t.slice(-1)||\"/\"!==m.slice(-1)||(m=m.slice(0,-1)),s&&(m=s+(\"/\"===m[0]?m.substr(1):m)),m}function l(){}l.prototype.parse=d,l.prototype.format=r,l.prototype.resolve=h,l.prototype.resolveObject=h;var f=/^https?|ftp|gopher|file/,m=/^(.*?)([#?].*)/,v=/^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i,_=/^([a-z0-9.+-]*:)?\\/\\/\\/*/i,b=/^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;function d(e,t,o){if(void 0===t&&(t=!1),void 0===o&&(o=!1),e&&\"object\"==typeof e&&e instanceof l)return e;var s=(e=e.trim()).match(m);e=s?s[1].replace(/\\\\/g,\"/\")+s[2]:e.replace(/\\\\/g,\"/\"),b.test(e)&&\"/\"!==e.slice(-1)&&(e+=\"/\");var n=!/(^javascript)/.test(e)&&e.match(v),i=_.test(e),u=\"\";n&&(f.test(n[1])||(u=n[1].toLowerCase(),e=\"\"+n[2]+n[3]),n[2]||(i=!1,f.test(n[1])?(u=n[1],e=\"\"+n[3]):e=\"//\"+n[3]),3!==n[2].length&&1!==n[2].length||(u=n[1],e=\"/\"+n[3]));var g,y=(s?s[1]:e).match(/^https?:\\/\\/[^/]+(:[0-9]+)(?=\\/|$)/),w=y&&y[1],x=new l,C=\"\",U=\"\";try{g=new URL(e)}catch(t){C=t,u||o||!/^\\/\\//.test(e)||/^\\/\\/.+[@.]/.test(e)||(U=\"/\",e=e.substr(1));try{g=new URL(e,c)}catch(e){return x.protocol=u,x.href=u,x}}x.slashes=i&&!U,x.host=g.host===p?\"\":g.host,x.hostname=g.hostname===p?\"\":g.hostname.replace(/(\\[|\\])/g,\"\"),x.protocol=C?u||null:g.protocol,x.search=g.search.replace(/\\\\/g,\"%5C\"),x.hash=g.hash.replace(/\\\\/g,\"%5C\");var j=e.split(\"#\");!x.search&&~j[0].indexOf(\"?\")&&(x.search=\"?\"),x.hash||\"\"!==j[1]||(x.hash=\"#\"),x.query=t?a.decode(g.search.substr(1)):x.search.substr(1),x.pathname=U+(n?function(e){return e.replace(/['^|`]/g,(function(e){return\"%\"+e.charCodeAt().toString(16).toUpperCase()})).replace(/((?:%[0-9A-F]{2})+)/g,(function(e,t){try{return decodeURIComponent(t).split(\"\").map((function(e){var t=e.charCodeAt();return t>256||/^[a-z0-9]$/i.test(e)?e:\"%\"+t.toString(16).toUpperCase()})).join(\"\")}catch(e){return t}}))}(g.pathname):g.pathname),\"about:\"===x.protocol&&\"blank\"===x.pathname&&(x.protocol=\"\",x.pathname=\"\"),C&&\"/\"!==e[0]&&(x.pathname=x.pathname.substr(1)),u&&!f.test(u)&&\"/\"!==e.slice(-1)&&\"/\"===x.pathname&&(x.pathname=\"\"),x.path=x.pathname+x.search,x.auth=[g.username,g.password].map(decodeURIComponent).filter(Boolean).join(\":\"),x.port=g.port,w&&!x.host.endsWith(w)&&(x.host+=w,x.port=w.slice(1)),x.href=U?\"\"+x.pathname+x.search+x.hash:r(x);var q=/^(file)/.test(x.href)?[\"host\",\"hostname\"]:[];return Object.keys(x).forEach((function(e){~q.indexOf(e)||(x[e]=x[e]||null)})),x}e.parse=d,e.format=r,e.resolve=h,e.resolveObject=function(e,t){return d(h(e,t))},e.Url=l}();module.exports=o})();","(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();","(function(){\"use strict\";var e={815:function(e){function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}e.exports=function(e,n,t,o){n=n||\"&\";t=t||\"=\";var a={};if(typeof e!==\"string\"||e.length===0){return a}var i=/\\+/g;e=e.split(n);var u=1e3;if(o&&typeof o.maxKeys===\"number\"){u=o.maxKeys}var c=e.length;if(u>0&&c>u){c=u}for(var p=0;p<c;++p){var f=e[p].replace(i,\"%20\"),s=f.indexOf(t),_,l,y,d;if(s>=0){_=f.substr(0,s);l=f.substr(s+1)}else{_=f;l=\"\"}y=decodeURIComponent(_);d=decodeURIComponent(l);if(!hasOwnProperty(a,y)){a[y]=d}else if(r(a[y])){a[y].push(d)}else{a[y]=[a[y],d]}}return a};var r=Array.isArray||function(e){return Object.prototype.toString.call(e)===\"[object Array]\"}},577:function(e){var stringifyPrimitive=function(e){switch(typeof e){case\"string\":return e;case\"boolean\":return e?\"true\":\"false\";case\"number\":return isFinite(e)?e:\"\";default:return\"\"}};e.exports=function(e,t,o,a){t=t||\"&\";o=o||\"=\";if(e===null){e=undefined}if(typeof e===\"object\"){return map(n(e),(function(n){var a=encodeURIComponent(stringifyPrimitive(n))+o;if(r(e[n])){return map(e[n],(function(e){return a+encodeURIComponent(stringifyPrimitive(e))})).join(t)}else{return a+encodeURIComponent(stringifyPrimitive(e[n]))}})).join(t)}if(!a)return\"\";return encodeURIComponent(stringifyPrimitive(a))+o+encodeURIComponent(stringifyPrimitive(e))};var r=Array.isArray||function(e){return Object.prototype.toString.call(e)===\"[object Array]\"};function map(e,r){if(e.map)return e.map(r);var n=[];for(var t=0;t<e.length;t++){n.push(r(e[t],t))}return n}var n=Object.keys||function(e){var r=[];for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))r.push(n)}return r}}};var r={};function __nccwpck_require__(n){var t=r[n];if(t!==undefined){return t.exports}var o=r[n]={exports:{}};var a=true;try{e[n](o,o.exports,__nccwpck_require__);a=false}finally{if(a)delete r[n]}return o.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var n={};!function(){var e=n;e.decode=e.parse=__nccwpck_require__(815);e.encode=e.stringify=__nccwpck_require__(577)}();module.exports=n})();","(()=>{var i={226:function(i,e){(function(o,a){\"use strict\";var r=\"1.0.35\",t=\"\",n=\"?\",s=\"function\",b=\"undefined\",w=\"object\",l=\"string\",d=\"major\",c=\"model\",u=\"name\",p=\"type\",m=\"vendor\",f=\"version\",h=\"architecture\",v=\"console\",g=\"mobile\",k=\"tablet\",x=\"smarttv\",_=\"wearable\",y=\"embedded\",q=350;var T=\"Amazon\",S=\"Apple\",z=\"ASUS\",N=\"BlackBerry\",A=\"Browser\",C=\"Chrome\",E=\"Edge\",O=\"Firefox\",U=\"Google\",j=\"Huawei\",P=\"LG\",R=\"Microsoft\",M=\"Motorola\",B=\"Opera\",V=\"Samsung\",D=\"Sharp\",I=\"Sony\",W=\"Viera\",F=\"Xiaomi\",G=\"Zebra\",H=\"Facebook\",L=\"Chromium OS\",Z=\"Mac OS\";var extend=function(i,e){var o={};for(var a in i){if(e[a]&&e[a].length%2===0){o[a]=e[a].concat(i[a])}else{o[a]=i[a]}}return o},enumerize=function(i){var e={};for(var o=0;o<i.length;o++){e[i[o].toUpperCase()]=i[o]}return e},has=function(i,e){return typeof i===l?lowerize(e).indexOf(lowerize(i))!==-1:false},lowerize=function(i){return i.toLowerCase()},majorize=function(i){return typeof i===l?i.replace(/[^\\d\\.]/g,t).split(\".\")[0]:a},trim=function(i,e){if(typeof i===l){i=i.replace(/^\\s\\s*/,t);return typeof e===b?i:i.substring(0,q)}};var rgxMapper=function(i,e){var o=0,r,t,n,b,l,d;while(o<e.length&&!l){var c=e[o],u=e[o+1];r=t=0;while(r<c.length&&!l){if(!c[r]){break}l=c[r++].exec(i);if(!!l){for(n=0;n<u.length;n++){d=l[++t];b=u[n];if(typeof b===w&&b.length>0){if(b.length===2){if(typeof b[1]==s){this[b[0]]=b[1].call(this,d)}else{this[b[0]]=b[1]}}else if(b.length===3){if(typeof b[1]===s&&!(b[1].exec&&b[1].test)){this[b[0]]=d?b[1].call(this,d,b[2]):a}else{this[b[0]]=d?d.replace(b[1],b[2]):a}}else if(b.length===4){this[b[0]]=d?b[3].call(this,d.replace(b[1],b[2])):a}}else{this[b]=d?d:a}}}}o+=2}},strMapper=function(i,e){for(var o in e){if(typeof e[o]===w&&e[o].length>0){for(var r=0;r<e[o].length;r++){if(has(e[o][r],i)){return o===n?a:o}}}else if(has(e[o],i)){return o===n?a:o}}return i};var $={\"1.0\":\"/8\",1.2:\"/1\",1.3:\"/3\",\"2.0\":\"/412\",\"2.0.2\":\"/416\",\"2.0.3\":\"/417\",\"2.0.4\":\"/419\",\"?\":\"/\"},X={ME:\"4.90\",\"NT 3.11\":\"NT3.51\",\"NT 4.0\":\"NT4.0\",2e3:\"NT 5.0\",XP:[\"NT 5.1\",\"NT 5.2\"],Vista:\"NT 6.0\",7:\"NT 6.1\",8:\"NT 6.2\",8.1:\"NT 6.3\",10:[\"NT 6.4\",\"NT 10.0\"],RT:\"ARM\"};var K={browser:[[/\\b(?:crmo|crios)\\/([\\w\\.]+)/i],[f,[u,\"Chrome\"]],[/edg(?:e|ios|a)?\\/([\\w\\.]+)/i],[f,[u,\"Edge\"]],[/(opera mini)\\/([-\\w\\.]+)/i,/(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,/(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i],[u,f],[/opios[\\/ ]+([\\w\\.]+)/i],[f,[u,B+\" Mini\"]],[/\\bopr\\/([\\w\\.]+)/i],[f,[u,B]],[/(kindle)\\/([\\w\\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\\/ ]?([\\w\\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\\/ ]?([\\w\\.]*)/i,/(ba?idubrowser)[\\/ ]?([\\w\\.]+)/i,/(?:ms|\\()(ie) ([\\w\\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\\/([-\\w\\.]+)/i,/(heytap|ovi)browser\\/([\\d\\.]+)/i,/(weibo)__([\\d\\.]+)/i],[u,f],[/(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i],[f,[u,\"UC\"+A]],[/microm.+\\bqbcore\\/([\\w\\.]+)/i,/\\bqbcore\\/([\\w\\.]+).+microm/i],[f,[u,\"WeChat(Win) Desktop\"]],[/micromessenger\\/([\\w\\.]+)/i],[f,[u,\"WeChat\"]],[/konqueror\\/([\\w\\.]+)/i],[f,[u,\"Konqueror\"]],[/trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i],[f,[u,\"IE\"]],[/ya(?:search)?browser\\/([\\w\\.]+)/i],[f,[u,\"Yandex\"]],[/(avast|avg)\\/([\\w\\.]+)/i],[[u,/(.+)/,\"$1 Secure \"+A],f],[/\\bfocus\\/([\\w\\.]+)/i],[f,[u,O+\" Focus\"]],[/\\bopt\\/([\\w\\.]+)/i],[f,[u,B+\" Touch\"]],[/coc_coc\\w+\\/([\\w\\.]+)/i],[f,[u,\"Coc Coc\"]],[/dolfin\\/([\\w\\.]+)/i],[f,[u,\"Dolphin\"]],[/coast\\/([\\w\\.]+)/i],[f,[u,B+\" Coast\"]],[/miuibrowser\\/([\\w\\.]+)/i],[f,[u,\"MIUI \"+A]],[/fxios\\/([-\\w\\.]+)/i],[f,[u,O]],[/\\bqihu|(qi?ho?o?|360)browser/i],[[u,\"360 \"+A]],[/(oculus|samsung|sailfish|huawei)browser\\/([\\w\\.]+)/i],[[u,/(.+)/,\"$1 \"+A],f],[/(comodo_dragon)\\/([\\w\\.]+)/i],[[u,/_/g,\" \"],f],[/(electron)\\/([\\w\\.]+) safari/i,/(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\\/ ]?([\\w\\.]+)/i],[u,f],[/(metasr)[\\/ ]?([\\w\\.]+)/i,/(lbbrowser)/i,/\\[(linkedin)app\\]/i],[u],[/((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i],[[u,H],f],[/(kakao(?:talk|story))[\\/ ]([\\w\\.]+)/i,/(naver)\\(.*?(\\d+\\.[\\w\\.]+).*\\)/i,/safari (line)\\/([\\w\\.]+)/i,/\\b(line)\\/([\\w\\.]+)\\/iab/i,/(chromium|instagram)[\\/ ]([-\\w\\.]+)/i],[u,f],[/\\bgsa\\/([\\w\\.]+) .*safari\\//i],[f,[u,\"GSA\"]],[/musical_ly(?:.+app_?version\\/|_)([\\w\\.]+)/i],[f,[u,\"TikTok\"]],[/headlesschrome(?:\\/([\\w\\.]+)| )/i],[f,[u,C+\" Headless\"]],[/ wv\\).+(chrome)\\/([\\w\\.]+)/i],[[u,C+\" WebView\"],f],[/droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i],[f,[u,\"Android \"+A]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i],[u,f],[/version\\/([\\w\\.\\,]+) .*mobile\\/\\w+ (safari)/i],[f,[u,\"Mobile Safari\"]],[/version\\/([\\w(\\.|\\,)]+) .*(mobile ?safari|safari)/i],[f,u],[/webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i],[u,[f,strMapper,$]],[/(webkit|khtml)\\/([\\w\\.]+)/i],[u,f],[/(navigator|netscape\\d?)\\/([-\\w\\.]+)/i],[[u,\"Netscape\"],f],[/mobile vr; rv:([\\w\\.]+)\\).+firefox/i],[f,[u,O+\" Reality\"]],[/ekiohf.+(flow)\\/([\\w\\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\\/ ]?([\\w\\.\\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,/(firefox)\\/([\\w\\.]+)/i,/(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,/(links) \\(([\\w\\.]+)/i,/panasonic;(viera)/i],[u,f],[/(cobalt)\\/([\\w\\.]+)/i],[u,[f,/master.|lts./,\"\"]]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\\)]/i],[[h,\"amd64\"]],[/(ia32(?=;))/i],[[h,lowerize]],[/((?:i[346]|x)86)[;\\)]/i],[[h,\"ia32\"]],[/\\b(aarch64|arm(v?8e?l?|_?64))\\b/i],[[h,\"arm64\"]],[/\\b(arm(?:v[67])?ht?n?[fl]p?)\\b/i],[[h,\"armhf\"]],[/windows (ce|mobile); ppc;/i],[[h,\"arm\"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\\))/i],[[h,/ower/,t,lowerize]],[/(sun4\\w)[;\\)]/i],[[h,\"sparc\"]],[/((?:avr32|ia64(?=;))|68k(?=\\))|\\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\\b|pa-risc)/i],[[h,lowerize]]],device:[[/\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i],[c,[m,V],[p,k]],[/\\b((?:s[cgp]h|gt|sm)-\\w+|sc[g-]?[\\d]+a?|galaxy nexus)/i,/samsung[- ]([-\\w]+)/i,/sec-(sgh\\w+)/i],[c,[m,V],[p,g]],[/(?:\\/|\\()(ip(?:hone|od)[\\w, ]*)(?:\\/|;)/i],[c,[m,S],[p,g]],[/\\((ipad);[-\\w\\),; ]+apple/i,/applecoremedia\\/[\\w\\.]+ \\((ipad)/i,/\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i],[c,[m,S],[p,k]],[/(macintosh);/i],[c,[m,S]],[/\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i],[c,[m,D],[p,g]],[/\\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\\d{2})\\b(?!.+d\\/s)/i],[c,[m,j],[p,k]],[/(?:huawei|honor)([-\\w ]+)[;\\)]/i,/\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i],[c,[m,j],[p,g]],[/\\b(poco[\\w ]+)(?: bui|\\))/i,/\\b; (\\w+) build\\/hm\\1/i,/\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,/\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,/\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\\))/i],[[c,/_/g,\" \"],[m,F],[p,g]],[/\\b(mi[-_ ]?(?:pad)(?:[\\w_ ]+))(?: bui|\\))/i],[[c,/_/g,\" \"],[m,F],[p,k]],[/; (\\w+) bui.+ oppo/i,/\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i],[c,[m,\"OPPO\"],[p,g]],[/vivo (\\w+)(?: bui|\\))/i,/\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i],[c,[m,\"Vivo\"],[p,g]],[/\\b(rmx[12]\\d{3})(?: bui|;|\\))/i],[c,[m,\"Realme\"],[p,g]],[/\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i,/\\bmot(?:orola)?[- ](\\w*)/i,/((?:moto[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i],[c,[m,M],[p,g]],[/\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i],[c,[m,M],[p,k]],[/((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i],[c,[m,P],[p,k]],[/(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i,/\\blg[-e;\\/ ]+((?!browser|netcast|android tv)\\w+)/i,/\\blg-?([\\d\\w]+) bui/i],[c,[m,P],[p,g]],[/(ideatab[-\\w ]+)/i,/lenovo ?(s[56]000[-\\w]+|tab(?:[\\w ]+)|yt[-\\d\\w]{6}|tb[-\\d\\w]{6})/i],[c,[m,\"Lenovo\"],[p,k]],[/(?:maemo|nokia).*(n900|lumia \\d+)/i,/nokia[-_ ]?([-\\w\\.]*)/i],[[c,/_/g,\" \"],[m,\"Nokia\"],[p,g]],[/(pixel c)\\b/i],[c,[m,U],[p,k]],[/droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i],[c,[m,U],[p,g]],[/droid.+ (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i],[c,[m,I],[p,g]],[/sony tablet [ps]/i,/\\b(?:sony)?sgp\\w+(?: bui|\\))/i],[[c,\"Xperia Tablet\"],[m,I],[p,k]],[/ (kb2005|in20[12]5|be20[12][59])\\b/i,/(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i],[c,[m,\"OnePlus\"],[p,g]],[/(alexa)webm/i,/(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\\))/i,/(kf[a-z]+)( bui|\\)).+silk\\//i],[c,[m,T],[p,k]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i],[[c,/(.+)/g,\"Fire Phone $1\"],[m,T],[p,g]],[/(playbook);[-\\w\\),; ]+(rim)/i],[c,m,[p,k]],[/\\b((?:bb[a-f]|st[hv])100-\\d)/i,/\\(bb10; (\\w+)/i],[c,[m,N],[p,g]],[/(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i],[c,[m,z],[p,k]],[/ (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i],[c,[m,z],[p,g]],[/(nexus 9)/i],[c,[m,\"HTC\"],[p,k]],[/(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,/(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i,/(alcatel|geeksphone|nexian|panasonic(?!(?:;|\\.))|sony(?!-bra))[-_ ]?([-\\w]*)/i],[m,[c,/_/g,\" \"],[p,g]],[/droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i],[c,[m,\"Acer\"],[p,k]],[/droid.+; (m[1-5] note) bui/i,/\\bmz-([-\\w]{2,})/i],[c,[m,\"Meizu\"],[p,g]],[/(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\\w]*)/i,/(hp) ([\\w ]+\\w)/i,/(asus)-?(\\w+)/i,/(microsoft); (lumia[\\w ]+)/i,/(lenovo)[-_ ]?([-\\w]+)/i,/(jolla)/i,/(oppo) ?([\\w ]+) bui/i],[m,c,[p,g]],[/(kobo)\\s(ereader|touch)/i,/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\\/([\\w\\.]+)/i,/(nook)[\\w ]+build\\/(\\w+)/i,/(dell) (strea[kpr\\d ]*[\\dko])/i,/(le[- ]+pan)[- ]+(\\w{1,9}) bui/i,/(trinity)[- ]*(t\\d{3}) bui/i,/(gigaset)[- ]+(q\\w{1,9}) bui/i,/(vodafone) ([\\w ]+)(?:\\)| bui)/i],[m,c,[p,k]],[/(surface duo)/i],[c,[m,R],[p,k]],[/droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i],[c,[m,\"Fairphone\"],[p,g]],[/(u304aa)/i],[c,[m,\"AT&T\"],[p,g]],[/\\bsie-(\\w*)/i],[c,[m,\"Siemens\"],[p,g]],[/\\b(rct\\w+) b/i],[c,[m,\"RCA\"],[p,k]],[/\\b(venue[\\d ]{2,7}) b/i],[c,[m,\"Dell\"],[p,k]],[/\\b(q(?:mv|ta)\\w+) b/i],[c,[m,\"Verizon\"],[p,k]],[/\\b(?:barnes[& ]+noble |bn[rt])([\\w\\+ ]*) b/i],[c,[m,\"Barnes & Noble\"],[p,k]],[/\\b(tm\\d{3}\\w+) b/i],[c,[m,\"NuVision\"],[p,k]],[/\\b(k88) b/i],[c,[m,\"ZTE\"],[p,k]],[/\\b(nx\\d{3}j) b/i],[c,[m,\"ZTE\"],[p,g]],[/\\b(gen\\d{3}) b.+49h/i],[c,[m,\"Swiss\"],[p,g]],[/\\b(zur\\d{3}) b/i],[c,[m,\"Swiss\"],[p,k]],[/\\b((zeki)?tb.*\\b) b/i],[c,[m,\"Zeki\"],[p,k]],[/\\b([yr]\\d{2}) b/i,/\\b(dragon[- ]+touch |dt)(\\w{5}) b/i],[[m,\"Dragon Touch\"],c,[p,k]],[/\\b(ns-?\\w{0,9}) b/i],[c,[m,\"Insignia\"],[p,k]],[/\\b((nxa|next)-?\\w{0,9}) b/i],[c,[m,\"NextBook\"],[p,k]],[/\\b(xtreme\\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[m,\"Voice\"],c,[p,g]],[/\\b(lvtel\\-)?(v1[12]) b/i],[[m,\"LvTel\"],c,[p,g]],[/\\b(ph-1) /i],[c,[m,\"Essential\"],[p,g]],[/\\b(v(100md|700na|7011|917g).*\\b) b/i],[c,[m,\"Envizen\"],[p,k]],[/\\b(trio[-\\w\\. ]+) b/i],[c,[m,\"MachSpeed\"],[p,k]],[/\\btu_(1491) b/i],[c,[m,\"Rotor\"],[p,k]],[/(shield[\\w ]+) b/i],[c,[m,\"Nvidia\"],[p,k]],[/(sprint) (\\w+)/i],[m,c,[p,g]],[/(kin\\.[onetw]{3})/i],[[c,/\\./g,\" \"],[m,R],[p,g]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i],[c,[m,G],[p,k]],[/droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i],[c,[m,G],[p,g]],[/smart-tv.+(samsung)/i],[m,[p,x]],[/hbbtv.+maple;(\\d+)/i],[[c,/^/,\"SmartTV\"],[m,V],[p,x]],[/(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i],[[m,P],[p,x]],[/(apple) ?tv/i],[m,[c,S+\" TV\"],[p,x]],[/crkey/i],[[c,C+\"cast\"],[m,U],[p,x]],[/droid.+aft(\\w)( bui|\\))/i],[c,[m,T],[p,x]],[/\\(dtv[\\);].+(aquos)/i,/(aquos-tv[\\w ]+)\\)/i],[c,[m,D],[p,x]],[/(bravia[\\w ]+)( bui|\\))/i],[c,[m,I],[p,x]],[/(mitv-\\w{5}) bui/i],[c,[m,F],[p,x]],[/Hbbtv.*(technisat) (.*);/i],[m,c,[p,x]],[/\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,/hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w\\+ ]*; *([\\w\\d][^;]*);([^;]*)/i],[[m,trim],[c,trim],[p,x]],[/\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i],[[p,x]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[m,c,[p,v]],[/droid.+; (shield) bui/i],[c,[m,\"Nvidia\"],[p,v]],[/(playstation [345portablevi]+)/i],[c,[m,I],[p,v]],[/\\b(xbox(?: one)?(?!; xbox))[\\); ]/i],[c,[m,R],[p,v]],[/((pebble))app/i],[m,c,[p,_]],[/(watch)(?: ?os[,\\/]|\\d,\\d\\/)[\\d\\.]+/i],[c,[m,S],[p,_]],[/droid.+; (glass) \\d/i],[c,[m,U],[p,_]],[/droid.+; (wt63?0{2,3})\\)/i],[c,[m,G],[p,_]],[/(quest( 2| pro)?)/i],[c,[m,H],[p,_]],[/(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i],[m,[p,y]],[/(aeobc)\\b/i],[c,[m,T],[p,y]],[/droid .+?; ([^;]+?)(?: bui|\\) applew).+? mobile safari/i],[c,[p,g]],[/droid .+?; ([^;]+?)(?: bui|\\) applew).+?(?! mobile) safari/i],[c,[p,k]],[/\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i],[[p,k]],[/(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i],[[p,g]],[/(android[-\\w\\. ]{0,9});.+buil/i],[c,[m,\"Generic\"]]],engine:[[/windows.+ edge\\/([\\w\\.]+)/i],[f,[u,E+\"HTML\"]],[/webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i],[f,[u,\"Blink\"]],[/(presto)\\/([\\w\\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\\/([\\w\\.]+)/i,/ekioh(flow)\\/([\\w\\.]+)/i,/(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,/(icab)[\\/ ]([23]\\.[\\d\\.]+)/i,/\\b(libweb)/i],[u,f],[/rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i],[f,u]],os:[[/microsoft (windows) (vista|xp)/i],[u,f],[/(windows) nt 6\\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\\/ ]?([\\d\\.\\w ]*)/i,/(windows)[\\/ ]?([ntce\\d\\. ]+\\w)(?!.+xbox)/i],[u,[f,strMapper,X]],[/(win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i],[[u,\"Windows\"],[f,strMapper,X]],[/ip[honead]{2,4}\\b(?:.*os ([\\w]+) like mac|; opera)/i,/ios;fbsv\\/([\\d\\.]+)/i,/cfnetwork\\/.+darwin/i],[[f,/_/g,\".\"],[u,\"iOS\"]],[/(mac os x) ?([\\w\\. ]*)/i,/(macintosh|mac_powerpc\\b)(?!.+haiku)/i],[[u,Z],[f,/_/g,\".\"]],[/droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i],[f,u],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\\/ ]?([\\w\\.]*)/i,/(blackberry)\\w*\\/([\\w\\.]*)/i,/(tizen|kaios)[\\/ ]([\\w\\.]+)/i,/\\((series40);/i],[u,f],[/\\(bb(10);/i],[f,[u,N]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\\/ ]?([\\w\\.]*)/i],[f,[u,\"Symbian\"]],[/mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i],[f,[u,O+\" OS\"]],[/web0s;.+rt(tv)/i,/\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i],[f,[u,\"webOS\"]],[/watch(?: ?os[,\\/]|\\d,\\d\\/)([\\d\\.]+)/i],[f,[u,\"watchOS\"]],[/crkey\\/([\\d\\.]+)/i],[f,[u,C+\"cast\"]],[/(cros) [\\w]+(?:\\)| ([\\w\\.]+)\\b)/i],[[u,L],f],[/panasonic;(viera)/i,/(netrange)mmh/i,/(nettv)\\/(\\d+\\.[\\w\\.]+)/i,/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\\);]+)/i,/\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,/(mint)[\\/\\(\\) ]?(\\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,/(hurd|linux) ?([\\w\\.]*)/i,/(gnu) ?([\\w\\.]*)/i,/\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i,/(haiku) (\\w+)/i],[u,f],[/(sunos) ?([\\w\\.\\d]*)/i],[[u,\"Solaris\"],f],[/((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,/(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i,/\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,/(unix) ?([\\w\\.]*)/i],[u,f]]};var UAParser=function(i,e){if(typeof i===w){e=i;i=a}if(!(this instanceof UAParser)){return new UAParser(i,e).getResult()}var r=typeof o!==b&&o.navigator?o.navigator:a;var n=i||(r&&r.userAgent?r.userAgent:t);var v=r&&r.userAgentData?r.userAgentData:a;var x=e?extend(K,e):K;var _=r&&r.userAgent==n;this.getBrowser=function(){var i={};i[u]=a;i[f]=a;rgxMapper.call(i,n,x.browser);i[d]=majorize(i[f]);if(_&&r&&r.brave&&typeof r.brave.isBrave==s){i[u]=\"Brave\"}return i};this.getCPU=function(){var i={};i[h]=a;rgxMapper.call(i,n,x.cpu);return i};this.getDevice=function(){var i={};i[m]=a;i[c]=a;i[p]=a;rgxMapper.call(i,n,x.device);if(_&&!i[p]&&v&&v.mobile){i[p]=g}if(_&&i[c]==\"Macintosh\"&&r&&typeof r.standalone!==b&&r.maxTouchPoints&&r.maxTouchPoints>2){i[c]=\"iPad\";i[p]=k}return i};this.getEngine=function(){var i={};i[u]=a;i[f]=a;rgxMapper.call(i,n,x.engine);return i};this.getOS=function(){var i={};i[u]=a;i[f]=a;rgxMapper.call(i,n,x.os);if(_&&!i[u]&&v&&v.platform!=\"Unknown\"){i[u]=v.platform.replace(/chrome os/i,L).replace(/macos/i,Z)}return i};this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}};this.getUA=function(){return n};this.setUA=function(i){n=typeof i===l&&i.length>q?trim(i,q):i;return this};this.setUA(n);return this};UAParser.VERSION=r;UAParser.BROWSER=enumerize([u,f,d]);UAParser.CPU=enumerize([h]);UAParser.DEVICE=enumerize([c,m,p,v,g,x,k,_,y]);UAParser.ENGINE=UAParser.OS=enumerize([u,f]);if(typeof e!==b){if(\"object\"!==b&&i.exports){e=i.exports=UAParser}e.UAParser=UAParser}else{if(typeof define===s&&define.amd){define((function(){return UAParser}))}else if(typeof o!==b){o.UAParser=UAParser}}var Q=typeof o!==b&&(o.jQuery||o.Zepto);if(Q&&!Q.ua){var Y=new UAParser;Q.ua=Y.getResult();Q.ua.get=function(){return Y.getUA()};Q.ua.set=function(i){Y.setUA(i);var e=Y.getResult();for(var o in e){Q.ua[o]=e[o]}}}})(typeof window===\"object\"?window:this)}};var e={};function __nccwpck_require__(o){var a=e[o];if(a!==undefined){return a.exports}var r=e[o]={exports:{}};var t=true;try{i[o].call(r.exports,r,r.exports,__nccwpck_require__);t=false}finally{if(t)delete e[o]}return r.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var o=__nccwpck_require__(226);module.exports=o})();","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    getTestReqInfo: null,\n    withRequest: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getTestReqInfo: function() {\n        return getTestReqInfo;\n    },\n    withRequest: function() {\n        return withRequest;\n    }\n});\nconst _nodeasync_hooks = require(\"node:async_hooks\");\nconst testStorage = new _nodeasync_hooks.AsyncLocalStorage();\nfunction extractTestInfoFromRequest(req, reader) {\n    const proxyPortHeader = reader.header(req, \"next-test-proxy-port\");\n    if (!proxyPortHeader) {\n        return undefined;\n    }\n    const url = reader.url(req);\n    const proxyPort = Number(proxyPortHeader);\n    const testData = reader.header(req, \"next-test-data\") || \"\";\n    return {\n        url,\n        proxyPort,\n        testData\n    };\n}\nfunction withRequest(req, reader, fn) {\n    const testReqInfo = extractTestInfoFromRequest(req, reader);\n    if (!testReqInfo) {\n        return fn();\n    }\n    return testStorage.run(testReqInfo, fn);\n}\nfunction getTestReqInfo(req, reader) {\n    const testReqInfo = testStorage.getStore();\n    if (testReqInfo) {\n        return testReqInfo;\n    }\n    if (req && reader) {\n        return extractTestInfoFromRequest(req, reader);\n    }\n    return undefined;\n}\n\n//# sourceMappingURL=context.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    handleFetch: null,\n    interceptFetch: null,\n    reader: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    handleFetch: function() {\n        return handleFetch;\n    },\n    interceptFetch: function() {\n        return interceptFetch;\n    },\n    reader: function() {\n        return reader;\n    }\n});\nconst _context = require(\"./context\");\nconst reader = {\n    url (req) {\n        return req.url;\n    },\n    header (req, name) {\n        return req.headers.get(name);\n    }\n};\nfunction getTestStack() {\n    let stack = (new Error().stack ?? \"\").split(\"\\n\");\n    // Skip the first line and find first non-empty line.\n    for(let i = 1; i < stack.length; i++){\n        if (stack[i].length > 0) {\n            stack = stack.slice(i);\n            break;\n        }\n    }\n    // Filter out franmework lines.\n    stack = stack.filter((f)=>!f.includes(\"/next/dist/\"));\n    // At most 5 lines.\n    stack = stack.slice(0, 5);\n    // Cleanup some internal info and trim.\n    stack = stack.map((s)=>s.replace(\"webpack-internal:///(rsc)/\", \"\").trim());\n    return stack.join(\"    \");\n}\nasync function buildProxyRequest(testData, request) {\n    const { url, method, headers, body, cache, credentials, integrity, mode, redirect, referrer, referrerPolicy } = request;\n    return {\n        testData,\n        api: \"fetch\",\n        request: {\n            url,\n            method,\n            headers: [\n                ...Array.from(headers),\n                [\n                    \"next-test-stack\",\n                    getTestStack()\n                ]\n            ],\n            body: body ? Buffer.from(await request.arrayBuffer()).toString(\"base64\") : null,\n            cache,\n            credentials,\n            integrity,\n            mode,\n            redirect,\n            referrer,\n            referrerPolicy\n        }\n    };\n}\nfunction buildResponse(proxyResponse) {\n    const { status, headers, body } = proxyResponse.response;\n    return new Response(body ? Buffer.from(body, \"base64\") : null, {\n        status,\n        headers: new Headers(headers)\n    });\n}\nasync function handleFetch(originalFetch, request) {\n    const testInfo = (0, _context.getTestReqInfo)(request, reader);\n    if (!testInfo) {\n        // Passthrough non-test requests.\n        return originalFetch(request);\n    }\n    const { testData, proxyPort } = testInfo;\n    const proxyRequest = await buildProxyRequest(testData, request);\n    const resp = await originalFetch(`http://localhost:${proxyPort}`, {\n        method: \"POST\",\n        body: JSON.stringify(proxyRequest),\n        next: {\n            // @ts-ignore\n            internal: true\n        }\n    });\n    if (!resp.ok) {\n        throw new Error(`Proxy request failed: ${resp.status}`);\n    }\n    const proxyResponse = await resp.json();\n    const { api } = proxyResponse;\n    switch(api){\n        case \"continue\":\n            return originalFetch(request);\n        case \"abort\":\n        case \"unhandled\":\n            throw new Error(`Proxy request aborted [${request.method} ${request.url}]`);\n        default:\n            break;\n    }\n    return buildResponse(proxyResponse);\n}\nfunction interceptFetch(originalFetch) {\n    global.fetch = function testFetch(input, init) {\n        var _init_next;\n        // Passthrough internal requests.\n        // @ts-ignore\n        if (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next.internal) {\n            return originalFetch(input, init);\n        }\n        return handleFetch(originalFetch, new Request(input, init));\n    };\n    return ()=>{\n        global.fetch = originalFetch;\n    };\n}\n\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    interceptTestApis: null,\n    wrapRequestHandler: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    interceptTestApis: function() {\n        return interceptTestApis;\n    },\n    wrapRequestHandler: function() {\n        return wrapRequestHandler;\n    }\n});\nconst _context = require(\"./context\");\nconst _fetch = require(\"./fetch\");\nfunction interceptTestApis() {\n    return (0, _fetch.interceptFetch)(global.fetch);\n}\nfunction wrapRequestHandler(handler) {\n    return (req, fn)=>(0, _context.withRequest)(req, _fetch.reader, ()=>handler(req, fn));\n}\n\n//# sourceMappingURL=server-edge.js.map","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","'use strict'\n\nconst ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    comp = comp.trim().split(/\\s+/).join(' ')\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    options = parseOptions(options)\n\n    // Special cases where nothing can possibly be lower\n    if (options.includePrerelease &&\n      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n      return false\n    }\n    if (!options.includePrerelease &&\n      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n      return false\n    }\n\n    // Same direction increasing (> or >=)\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n      return true\n    }\n    // Same direction decreasing (< or <=)\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // same SemVer and both sides are inclusive (<= or >=)\n    if (\n      (this.semver.version === comp.semver.version) &&\n      this.operator.includes('=') && comp.operator.includes('=')) {\n      return true\n    }\n    // opposite directions less than\n    if (cmp(this.semver, '<', comp.semver, options) &&\n      this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // opposite directions greater than\n    if (cmp(this.semver, '>', comp.semver, options) &&\n      this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n      return true\n    }\n    return false\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = require('../internal/parse-options')\nconst { safeRe: re, t } = require('../internal/re')\nconst cmp = require('../functions/cmp')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst Range = require('./range')\n","'use strict'\n\nconst SPACE_CHARACTERS = /\\s+/g\n\n// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.formatted = undefined\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First reduce all whitespace as much as possible so we do not have to rely\n    // on potentially slow regexes like \\s*. This is then stored and used for\n    // future error messages as well.\n    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')\n\n    // First, split on ||\n    this.set = this.raw\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.formatted = undefined\n  }\n\n  get range () {\n    if (this.formatted === undefined) {\n      this.formatted = ''\n      for (let i = 0; i < this.set.length; i++) {\n        if (i > 0) {\n          this.formatted += '||'\n        }\n        const comps = this.set[i]\n        for (let k = 0; k < comps.length; k++) {\n          if (k > 0) {\n            this.formatted += ' '\n          }\n          this.formatted += comps[k].toString().trim()\n        }\n      }\n    }\n    return this.formatted\n  }\n\n  format () {\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts =\n      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |\n      (this.options.loose && FLAG_LOOSE)\n    const memoKey = memoOpts + ':' + range\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n    debug('tilde trim', range)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n    debug('caret trim', range)\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nmodule.exports = Range\n\nconst LRU = require('../internal/lrucache')\nconst cache = new LRU()\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  safeRe: re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\nconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require('../internal/constants')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceTilde(c, options))\n    .join(' ')\n}\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceCaret(c, options))\n    .join(' ')\n}\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp\n    .split(/\\s+/)\n    .map((c) => replaceXRange(c, options))\n    .join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp\n    .trim()\n    .replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp\n    .trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n// TODO build?\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return `${from} ${to}`.trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n","'use strict'\n\nconst debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n        version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('build compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier, identifierBase) {\n    if (release.startsWith('pre')) {\n      if (!identifier && identifierBase === false) {\n        throw new Error('invalid increment argument: identifier is empty')\n      }\n      // Avoid an invalid semver results\n      if (identifier) {\n        const match = `-${identifier}`.match(this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE])\n        if (!match || match[1] !== identifier) {\n          throw new Error(`invalid identifier: ${identifier}`)\n        }\n      }\n    }\n\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier, identifierBase)\n        this.inc('pre', identifier, identifierBase)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier, identifierBase)\n        }\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'release':\n        if (this.prerelease.length === 0) {\n          throw new Error(`version ${this.raw} is not a prerelease`)\n        }\n        this.prerelease.length = 0\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre': {\n        const base = Number(identifierBase) ? 1 : 0\n\n        if (this.prerelease.length === 0) {\n          this.prerelease = [base]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            if (identifier === this.prerelease.join('.') && identifierBase === false) {\n              throw new Error('invalid increment argument: identifier already exists')\n            }\n            this.prerelease.push(base)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          let prerelease = [identifier, base]\n          if (identifierBase === false) {\n            prerelease = [identifier]\n          }\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = prerelease\n            }\n          } else {\n            this.prerelease = prerelease\n          }\n        }\n        break\n      }\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.raw = this.format()\n    if (this.build.length) {\n      this.raw += `+${this.build.join('.')}`\n    }\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","'use strict'\n\nconst parse = require('./parse')\nconst clean = (version, options) => {\n  const s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\nmodule.exports = clean\n","'use strict'\n\nconst eq = require('./eq')\nconst neq = require('./neq')\nconst gt = require('./gt')\nconst gte = require('./gte')\nconst lt = require('./lt')\nconst lte = require('./lte')\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n}\nmodule.exports = cmp\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst parse = require('./parse')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]\n    let next\n    while ((next = coerceRtlRegex.exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    coerceRtlRegex.lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  const major = match[2]\n  const minor = match[3] || '0'\n  const patch = match[4] || '0'\n  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''\n  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''\n\n  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)\n}\nmodule.exports = coerce\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst compareBuild = (a, b, loose) => {\n  const versionA = new SemVer(a, loose)\n  const versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\nmodule.exports = compareBuild\n","'use strict'\n\nconst compare = require('./compare')\nconst compareLoose = (a, b) => compare(a, b, true)\nmodule.exports = compareLoose\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","'use strict'\n\nconst parse = require('./parse.js')\n\nconst diff = (version1, version2) => {\n  const v1 = parse(version1, null, true)\n  const v2 = parse(version2, null, true)\n  const comparison = v1.compare(v2)\n\n  if (comparison === 0) {\n    return null\n  }\n\n  const v1Higher = comparison > 0\n  const highVersion = v1Higher ? v1 : v2\n  const lowVersion = v1Higher ? v2 : v1\n  const highHasPre = !!highVersion.prerelease.length\n  const lowHasPre = !!lowVersion.prerelease.length\n\n  if (lowHasPre && !highHasPre) {\n    // Going from prerelease -> no prerelease requires some special casing\n\n    // If the low version has only a major, then it will always be a major\n    // Some examples:\n    // 1.0.0-1 -> 1.0.0\n    // 1.0.0-1 -> 1.1.1\n    // 1.0.0-1 -> 2.0.0\n    if (!lowVersion.patch && !lowVersion.minor) {\n      return 'major'\n    }\n\n    // If the main part has no difference\n    if (lowVersion.compareMain(highVersion) === 0) {\n      if (lowVersion.minor && !lowVersion.patch) {\n        return 'minor'\n      }\n      return 'patch'\n    }\n  }\n\n  // add the `pre` prefix if we are going to a prerelease version\n  const prefix = highHasPre ? 'pre' : ''\n\n  if (v1.major !== v2.major) {\n    return prefix + 'major'\n  }\n\n  if (v1.minor !== v2.minor) {\n    return prefix + 'minor'\n  }\n\n  if (v1.patch !== v2.patch) {\n    return prefix + 'patch'\n  }\n\n  // high and low are preleases\n  return 'prerelease'\n}\n\nmodule.exports = diff\n","'use strict'\n\nconst compare = require('./compare')\nconst eq = (a, b, loose) => compare(a, b, loose) === 0\nmodule.exports = eq\n","'use strict'\n\nconst compare = require('./compare')\nconst gt = (a, b, loose) => compare(a, b, loose) > 0\nmodule.exports = gt\n","'use strict'\n\nconst compare = require('./compare')\nconst gte = (a, b, loose) => compare(a, b, loose) >= 0\nmodule.exports = gte\n","'use strict'\n\nconst SemVer = require('../classes/semver')\n\nconst inc = (version, release, options, identifier, identifierBase) => {\n  if (typeof (options) === 'string') {\n    identifierBase = identifier\n    identifier = options\n    options = undefined\n  }\n\n  try {\n    return new SemVer(\n      version instanceof SemVer ? version.version : version,\n      options\n    ).inc(release, identifier, identifierBase).version\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = inc\n","'use strict'\n\nconst compare = require('./compare')\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\nmodule.exports = lt\n","'use strict'\n\nconst compare = require('./compare')\nconst lte = (a, b, loose) => compare(a, b, loose) <= 0\nmodule.exports = lte\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst major = (a, loose) => new SemVer(a, loose).major\nmodule.exports = major\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst minor = (a, loose) => new SemVer(a, loose).minor\nmodule.exports = minor\n","'use strict'\n\nconst compare = require('./compare')\nconst neq = (a, b, loose) => compare(a, b, loose) !== 0\nmodule.exports = neq\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst parse = (version, options, throwErrors = false) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    if (!throwErrors) {\n      return null\n    }\n    throw er\n  }\n}\n\nmodule.exports = parse\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst patch = (a, loose) => new SemVer(a, loose).patch\nmodule.exports = patch\n","'use strict'\n\nconst parse = require('./parse')\nconst prerelease = (version, options) => {\n  const parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\nmodule.exports = prerelease\n","'use strict'\n\nconst compare = require('./compare')\nconst rcompare = (a, b, loose) => compare(b, a, loose)\nmodule.exports = rcompare\n","'use strict'\n\nconst compareBuild = require('./compare-build')\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))\nmodule.exports = rsort\n","'use strict'\n\nconst Range = require('../classes/range')\nconst satisfies = (version, range, options) => {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\nmodule.exports = satisfies\n","'use strict'\n\nconst compareBuild = require('./compare-build')\nconst sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))\nmodule.exports = sort\n","'use strict'\n\nconst parse = require('./parse')\nconst valid = (version, options) => {\n  const v = parse(version, options)\n  return v ? v.version : null\n}\nmodule.exports = valid\n","'use strict'\n\n// just pre-load all the stuff that index.js lazily exports\nconst internalRe = require('./internal/re')\nconst constants = require('./internal/constants')\nconst SemVer = require('./classes/semver')\nconst identifiers = require('./internal/identifiers')\nconst parse = require('./functions/parse')\nconst valid = require('./functions/valid')\nconst clean = require('./functions/clean')\nconst inc = require('./functions/inc')\nconst diff = require('./functions/diff')\nconst major = require('./functions/major')\nconst minor = require('./functions/minor')\nconst patch = require('./functions/patch')\nconst prerelease = require('./functions/prerelease')\nconst compare = require('./functions/compare')\nconst rcompare = require('./functions/rcompare')\nconst compareLoose = require('./functions/compare-loose')\nconst compareBuild = require('./functions/compare-build')\nconst sort = require('./functions/sort')\nconst rsort = require('./functions/rsort')\nconst gt = require('./functions/gt')\nconst lt = require('./functions/lt')\nconst eq = require('./functions/eq')\nconst neq = require('./functions/neq')\nconst gte = require('./functions/gte')\nconst lte = require('./functions/lte')\nconst cmp = require('./functions/cmp')\nconst coerce = require('./functions/coerce')\nconst Comparator = require('./classes/comparator')\nconst Range = require('./classes/range')\nconst satisfies = require('./functions/satisfies')\nconst toComparators = require('./ranges/to-comparators')\nconst maxSatisfying = require('./ranges/max-satisfying')\nconst minSatisfying = require('./ranges/min-satisfying')\nconst minVersion = require('./ranges/min-version')\nconst validRange = require('./ranges/valid')\nconst outside = require('./ranges/outside')\nconst gtr = require('./ranges/gtr')\nconst ltr = require('./ranges/ltr')\nconst intersects = require('./ranges/intersects')\nconst simplifyRange = require('./ranges/simplify')\nconst subset = require('./ranges/subset')\nmodule.exports = {\n  parse,\n  valid,\n  clean,\n  inc,\n  diff,\n  major,\n  minor,\n  patch,\n  prerelease,\n  compare,\n  rcompare,\n  compareLoose,\n  compareBuild,\n  sort,\n  rsort,\n  gt,\n  lt,\n  eq,\n  neq,\n  gte,\n  lte,\n  cmp,\n  coerce,\n  Comparator,\n  Range,\n  satisfies,\n  toComparators,\n  maxSatisfying,\n  minSatisfying,\n  minVersion,\n  validRange,\n  outside,\n  gtr,\n  ltr,\n  intersects,\n  simplifyRange,\n  subset,\n  SemVer,\n  re: internalRe.re,\n  src: internalRe.src,\n  tokens: internalRe.t,\n  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n  RELEASE_TYPES: constants.RELEASE_TYPES,\n  compareIdentifiers: identifiers.compareIdentifiers,\n  rcompareIdentifiers: identifiers.rcompareIdentifiers,\n}\n","'use strict'\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\n// Max safe length for a build identifier. The max length minus 6 characters for\n// the shortest version with a build 0.0.0+BUILD.\nconst MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6\n\nconst RELEASE_TYPES = [\n  'major',\n  'premajor',\n  'minor',\n  'preminor',\n  'patch',\n  'prepatch',\n  'prerelease',\n]\n\nmodule.exports = {\n  MAX_LENGTH,\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_SAFE_INTEGER,\n  RELEASE_TYPES,\n  SEMVER_SPEC_VERSION,\n  FLAG_INCLUDE_PRERELEASE: 0b001,\n  FLAG_LOOSE: 0b010,\n}\n","'use strict'\n\nconst debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","'use strict'\n\nconst numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers,\n}\n","'use strict'\n\nclass LRUCache {\n  constructor () {\n    this.max = 1000\n    this.map = new Map()\n  }\n\n  get (key) {\n    const value = this.map.get(key)\n    if (value === undefined) {\n      return undefined\n    } else {\n      // Remove the key from the map and add it to the end\n      this.map.delete(key)\n      this.map.set(key, value)\n      return value\n    }\n  }\n\n  delete (key) {\n    return this.map.delete(key)\n  }\n\n  set (key, value) {\n    const deleted = this.delete(key)\n\n    if (!deleted && value !== undefined) {\n      // If cache is full, delete the least recently used item\n      if (this.map.size >= this.max) {\n        const firstKey = this.map.keys().next().value\n        this.delete(firstKey)\n      }\n\n      this.map.set(key, value)\n    }\n\n    return this\n  }\n}\n\nmodule.exports = LRUCache\n","'use strict'\n\n// parse out just the options we care about\nconst looseOption = Object.freeze({ loose: true })\nconst emptyOpts = Object.freeze({ })\nconst parseOptions = options => {\n  if (!options) {\n    return emptyOpts\n  }\n\n  if (typeof options !== 'object') {\n    return looseOption\n  }\n\n  return options\n}\nmodule.exports = parseOptions\n","'use strict'\n\nconst {\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_LENGTH,\n} = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst safeRe = exports.safeRe = []\nconst src = exports.src = []\nconst safeSrc = exports.safeSrc = []\nconst t = exports.t = {}\nlet R = 0\n\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nconst safeRegexReplacements = [\n  ['\\\\s', 1],\n  ['\\\\d', MAX_LENGTH],\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n]\n\nconst makeSafeRegex = (value) => {\n  for (const [token, max] of safeRegexReplacements) {\n    value = value\n      .split(`${token}*`).join(`${token}{0,${max}}`)\n      .split(`${token}+`).join(`${token}{1,${max}}`)\n  }\n  return value\n}\n\nconst createToken = (name, value, isGlobal) => {\n  const safe = makeSafeRegex(value)\n  const index = R++\n  debug(name, index, value)\n  t[name] = index\n  src[index] = value\n  safeSrc[index] = safe\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n// Non-numberic identifiers include numberic identifiers but can be longer.\n// Therefore non-numberic identifiers must go first.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NONNUMERICIDENTIFIER]\n}|${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NONNUMERICIDENTIFIER]\n}|${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCEPLAIN', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)\ncreateToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\\\d])`)\ncreateToken('COERCEFULL', src[t.COERCEPLAIN] +\n              `(?:${src[t.PRERELEASE]})?` +\n              `(?:${src[t.BUILD]})?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\ncreateToken('COERCERTLFULL', src[t.COERCEFULL], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\n","'use strict'\n\n// Determine if version is greater than all the versions possible in the range.\nconst outside = require('./outside')\nconst gtr = (version, range, options) => outside(version, range, '>', options)\nmodule.exports = gtr\n","'use strict'\n\nconst Range = require('../classes/range')\nconst intersects = (r1, r2, options) => {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2, options)\n}\nmodule.exports = intersects\n","'use strict'\n\nconst outside = require('./outside')\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options) => outside(version, range, '<', options)\nmodule.exports = ltr\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\n\nconst maxSatisfying = (versions, range, options) => {\n  let max = null\n  let maxSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\nmodule.exports = maxSatisfying\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst minSatisfying = (versions, range, options) => {\n  let min = null\n  let minSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\nmodule.exports = minSatisfying\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst gt = require('../functions/gt')\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose)\n\n  let minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let setMin = null\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!setMin || gt(compver, setMin)) {\n            setMin = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    })\n    if (setMin && (!minver || gt(minver, setMin))) {\n      minver = setMin\n    }\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\nmodule.exports = minVersion\n","'use strict'\n\nconst SemVer = require('../classes/semver')\nconst Comparator = require('../classes/comparator')\nconst { ANY } = Comparator\nconst Range = require('../classes/range')\nconst satisfies = require('../functions/satisfies')\nconst gt = require('../functions/gt')\nconst lt = require('../functions/lt')\nconst lte = require('../functions/lte')\nconst gte = require('../functions/gte')\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n","'use strict'\n\n// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let first = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!first) {\n        first = version\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev])\n      }\n      prev = null\n      first = null\n    }\n  }\n  if (first) {\n    set.push([first, null])\n  }\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min)\n    } else if (!max && min === v[0]) {\n      ranges.push('*')\n    } else if (!max) {\n      ranges.push(`>=${min}`)\n    } else if (min === v[0]) {\n      ranges.push(`<=${max}`)\n    } else {\n      ranges.push(`${min} - ${max}`)\n    }\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n","'use strict'\n\nconst Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]\nconst minimumVersion = [new Comparator('>=0.0.0')]\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease\n    } else {\n      sub = minimumVersion\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = minimumVersion\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n","'use strict'\n\nconst Range = require('../classes/range')\n\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options) =>\n  new Range(range, options).set\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))\n\nmodule.exports = toComparators\n","'use strict'\n\nconst Range = require('../classes/range')\nconst validRange = (range, options) => {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = validRange\n","var pager = require('memory-pager')\n\nmodule.exports = Bitfield\n\nfunction Bitfield (opts) {\n  if (!(this instanceof Bitfield)) return new Bitfield(opts)\n  if (!opts) opts = {}\n  if (Buffer.isBuffer(opts)) opts = {buffer: opts}\n\n  this.pageOffset = opts.pageOffset || 0\n  this.pageSize = opts.pageSize || 1024\n  this.pages = opts.pages || pager(this.pageSize)\n\n  this.byteLength = this.pages.length * this.pageSize\n  this.length = 8 * this.byteLength\n\n  if (!powerOfTwo(this.pageSize)) throw new Error('The page size should be a power of two')\n\n  this._trackUpdates = !!opts.trackUpdates\n  this._pageMask = this.pageSize - 1\n\n  if (opts.buffer) {\n    for (var i = 0; i < opts.buffer.length; i += this.pageSize) {\n      this.pages.set(i / this.pageSize, opts.buffer.slice(i, i + this.pageSize))\n    }\n    this.byteLength = opts.buffer.length\n    this.length = 8 * this.byteLength\n  }\n}\n\nBitfield.prototype.get = function (i) {\n  var o = i & 7\n  var j = (i - o) / 8\n\n  return !!(this.getByte(j) & (128 >> o))\n}\n\nBitfield.prototype.getByte = function (i) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, true)\n\n  return page ? page.buffer[o + this.pageOffset] : 0\n}\n\nBitfield.prototype.set = function (i, v) {\n  var o = i & 7\n  var j = (i - o) / 8\n  var b = this.getByte(j)\n\n  return this.setByte(j, v ? b | (128 >> o) : b & (255 ^ (128 >> o)))\n}\n\nBitfield.prototype.toBuffer = function () {\n  var all = alloc(this.pages.length * this.pageSize)\n\n  for (var i = 0; i < this.pages.length; i++) {\n    var next = this.pages.get(i, true)\n    var allOffset = i * this.pageSize\n    if (next) next.buffer.copy(all, allOffset, this.pageOffset, this.pageOffset + this.pageSize)\n  }\n\n  return all\n}\n\nBitfield.prototype.setByte = function (i, b) {\n  var o = i & this._pageMask\n  var j = (i - o) / this.pageSize\n  var page = this.pages.get(j, false)\n\n  o += this.pageOffset\n\n  if (page.buffer[o] === b) return false\n  page.buffer[o] = b\n\n  if (i >= this.byteLength) {\n    this.byteLength = i + 1\n    this.length = this.byteLength * 8\n  }\n\n  if (this._trackUpdates) this.pages.updated(page)\n\n  return true\n}\n\nfunction alloc (n) {\n  if (Buffer.alloc) return Buffer.alloc(n)\n  var b = new Buffer(n)\n  b.fill(0)\n  return b\n}\n\nfunction powerOfTwo (x) {\n  return !(x & (x - 1))\n}\n","\"use strict\";\n\nconst punycode = require(\"punycode/\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\nconst { STATUS_MAPPING } = require(\"./lib/statusMapping.js\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/u.test(str);\n}\n\nfunction findStatus(val) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n\n    const target = mappingTable[mid];\n    const min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    const max = Array.isArray(target[0]) ? target[0][1] : target[0];\n\n    if (min <= val && max >= val) {\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, { transitionalProcessing }) {\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0));\n\n    switch (status) {\n      case STATUS_MAPPING.disallowed:\n        processed += ch;\n        break;\n      case STATUS_MAPPING.ignored:\n        break;\n      case STATUS_MAPPING.mapped:\n        if (transitionalProcessing && ch === \"ẞ\") {\n          processed += \"ss\";\n        } else {\n          processed += mapping;\n        }\n        break;\n      case STATUS_MAPPING.deviation:\n        if (transitionalProcessing) {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case STATUS_MAPPING.valid:\n        processed += ch;\n        break;\n    }\n  }\n\n  return processed;\n}\n\nfunction validateLabel(label, {\n  checkHyphens,\n  checkBidi,\n  checkJoiners,\n  transitionalProcessing,\n  useSTD3ASCIIRules,\n  isBidi\n}) {\n  // \"must be satisfied for a non-empty label\"\n  if (label.length === 0) {\n    return true;\n  }\n\n  // \"1. The label must be in Unicode Normalization Form NFC.\"\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  // \"2. If CheckHyphens, the label must not contain a U+002D HYPHEN-MINUS character in both the\n  // third and fourth positions.\"\n  //\n  // \"3. If CheckHyphens, the label must neither begin nor end with a U+002D HYPHEN-MINUS character.\"\n  if (checkHyphens) {\n    if ((codePoints[2] === \"-\" && codePoints[3] === \"-\") ||\n        (label.startsWith(\"-\") || label.endsWith(\"-\"))) {\n      return false;\n    }\n  }\n\n  // \"4. If not CheckHyphens, the label must not begin with “xn--”.\"\n  if (!checkHyphens) {\n    if (label.startsWith(\"xn--\")) {\n      return false;\n    }\n  }\n\n  // \"5. The label must not contain a U+002E ( . ) FULL STOP.\"\n  if (label.includes(\".\")) {\n    return false;\n  }\n\n  // \"6. The label must not begin with a combining mark, that is: General_Category=Mark.\"\n  if (regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n\n  // \"7. Each code point in the label must only have certain Status values according to Section 5\"\n  for (const ch of codePoints) {\n    const codePoint = ch.codePointAt(0);\n    const [status] = findStatus(codePoint);\n    if (transitionalProcessing) {\n      // \"For Transitional Processing (deprecated), each value must be valid.\"\n      if (status !== STATUS_MAPPING.valid) {\n        return false;\n      }\n    } else if (status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {\n      // \"For Nontransitional Processing, each value must be either valid or deviation.\"\n      return false;\n    }\n    // \"In addition, if UseSTD3ASCIIRules=true and the code point is an ASCII code point (U+0000..U+007F), then it must\n    // be a lowercase letter (a-z), a digit (0-9), or a hyphen-minus (U+002D). (Note: This excludes uppercase ASCII\n    // A-Z which are mapped in UTS #46 and disallowed in IDNA2008.)\"\n    if (useSTD3ASCIIRules && codePoint <= 0x7F) {\n      if (!/^(?:[a-z]|[0-9]|-)$/u.test(ch)) {\n        return false;\n      }\n    }\n  }\n\n  // \"8. If CheckJoiners, the label must satisify the ContextJ rules\"\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // \"9. If CheckBidi, and if the domain name is a Bidi domain name, then the label must satisfy...\"\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi && isBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) ||\n          !regexes.bidiS3.test(label) ||\n          (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) ||\n               !regexes.bidiS6.test(label)) { // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  // 1. Map.\n  let string = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  let error = false;\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let transitionalProcessingForThisLabel = options.transitionalProcessing;\n    if (label.startsWith(\"xn--\")) {\n      if (containsNonASCII(label)) {\n        error = true;\n        continue;\n      }\n\n      try {\n        label = punycode.decode(label.substring(4));\n      } catch {\n        if (!options.ignoreInvalidPunycode) {\n          error = true;\n          continue;\n        }\n      }\n      labels[i] = label;\n\n      if (label === \"\" || !containsNonASCII(label)) {\n        error = true;\n      }\n\n      transitionalProcessingForThisLabel = false;\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, {\n      ...options,\n      transitionalProcessing: transitionalProcessingForThisLabel,\n      isBidi\n    });\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  verifyDNSLength = false,\n  transitionalProcessing = false,\n  ignoreInvalidPunycode = false\n} = {}) {\n  const result = processing(domainName, {\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules,\n    transitionalProcessing,\n    ignoreInvalidPunycode\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return `xn--${punycode.encode(l)}`;\n      } catch {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  transitionalProcessing = false,\n  ignoreInvalidPunycode = false\n} = {}) {\n  const result = processing(domainName, {\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules,\n    transitionalProcessing,\n    ignoreInvalidPunycode\n  });\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};\n","\"use strict\";\n\nconst combiningMarks = /[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0897-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C04\\u0C3C\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CF3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10D69}-\\u{10D6D}\\u{10EAB}\\u{10EAC}\\u{10EFC}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11000}-\\u{11002}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11082}\\u{110B0}-\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{11134}\\u{11145}\\u{11146}\\u{11173}\\u{11180}-\\u{11182}\\u{111B3}-\\u{111C0}\\u{111C9}-\\u{111CC}\\u{111CE}\\u{111CF}\\u{1122C}-\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}-\\u{112EA}\\u{11300}-\\u{11303}\\u{1133B}\\u{1133C}\\u{1133E}-\\u{11344}\\u{11347}\\u{11348}\\u{1134B}-\\u{1134D}\\u{11357}\\u{11362}\\u{11363}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{113B8}-\\u{113C0}\\u{113C2}\\u{113C5}\\u{113C7}-\\u{113CA}\\u{113CC}-\\u{113D0}\\u{113D2}\\u{113E1}\\u{113E2}\\u{11435}-\\u{11446}\\u{1145E}\\u{114B0}-\\u{114C3}\\u{115AF}-\\u{115B5}\\u{115B8}-\\u{115C0}\\u{115DC}\\u{115DD}\\u{11630}-\\u{11640}\\u{116AB}-\\u{116B7}\\u{1171D}-\\u{1172B}\\u{1182C}-\\u{1183A}\\u{11930}-\\u{11935}\\u{11937}\\u{11938}\\u{1193B}-\\u{1193E}\\u{11940}\\u{11942}\\u{11943}\\u{119D1}-\\u{119D7}\\u{119DA}-\\u{119E0}\\u{119E4}\\u{11A01}-\\u{11A0A}\\u{11A33}-\\u{11A39}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A5B}\\u{11A8A}-\\u{11A99}\\u{11C2F}-\\u{11C36}\\u{11C38}-\\u{11C3F}\\u{11C92}-\\u{11CA7}\\u{11CA9}-\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D8A}-\\u{11D8E}\\u{11D90}\\u{11D91}\\u{11D93}-\\u{11D97}\\u{11EF3}-\\u{11EF6}\\u{11F00}\\u{11F01}\\u{11F03}\\u{11F34}-\\u{11F3A}\\u{11F3E}-\\u{11F42}\\u{11F5A}\\u{13440}\\u{13447}-\\u{13455}\\u{1611E}-\\u{1612F}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F51}-\\u{16F87}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{16FF0}\\u{16FF1}\\u{1BC9D}\\u{1BC9E}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D165}-\\u{1D169}\\u{1D16D}-\\u{1D172}\\u{1D17B}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E5EE}\\u{1E5EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94A}\\u{E0100}-\\u{E01EF}]/u;\nconst combiningClassVirama = /[\\u094D\\u09CD\\u0A4D\\u0ACD\\u0B4D\\u0BCD\\u0C4D\\u0CCD\\u0D3B\\u0D3C\\u0D4D\\u0DCA\\u0E3A\\u0EBA\\u0F84\\u1039\\u103A\\u1714\\u1715\\u1734\\u17D2\\u1A60\\u1B44\\u1BAA\\u1BAB\\u1BF2\\u1BF3\\u2D7F\\uA806\\uA82C\\uA8C4\\uA953\\uA9C0\\uAAF6\\uABED\\u{10A3F}\\u{11046}\\u{11070}\\u{1107F}\\u{110B9}\\u{11133}\\u{11134}\\u{111C0}\\u{11235}\\u{112EA}\\u{1134D}\\u{113CE}-\\u{113D0}\\u{11442}\\u{114C2}\\u{115BF}\\u{1163F}\\u{116B6}\\u{1172B}\\u{11839}\\u{1193D}\\u{1193E}\\u{119E0}\\u{11A34}\\u{11A47}\\u{11A99}\\u{11C3F}\\u{11D44}\\u{11D45}\\u{11D97}\\u{11F41}\\u{11F42}\\u{1612F}]/u;\nconst validZWNJ = /[\\u0620\\u0626\\u0628\\u062A-\\u062E\\u0633-\\u063F\\u0641-\\u0647\\u0649\\u064A\\u066E\\u066F\\u0678-\\u0687\\u069A-\\u06BF\\u06C1\\u06C2\\u06CC\\u06CE\\u06D0\\u06D1\\u06FA-\\u06FC\\u06FF\\u0712-\\u0714\\u071A-\\u071D\\u071F-\\u0727\\u0729\\u072B\\u072D\\u072E\\u074E-\\u0758\\u075C-\\u076A\\u076D-\\u0770\\u0772\\u0775-\\u0777\\u077A-\\u077F\\u07CA-\\u07EA\\u0841-\\u0845\\u0848\\u084A-\\u0853\\u0855\\u0860\\u0862-\\u0865\\u0868\\u0886\\u0889-\\u088D\\u08A0-\\u08A9\\u08AF\\u08B0\\u08B3-\\u08B8\\u08BA-\\u08C8\\u1807\\u1820-\\u1878\\u1887-\\u18A8\\u18AA\\uA840-\\uA872\\u{10AC0}-\\u{10AC4}\\u{10ACD}\\u{10AD3}-\\u{10ADC}\\u{10ADE}-\\u{10AE0}\\u{10AEB}-\\u{10AEE}\\u{10B80}\\u{10B82}\\u{10B86}-\\u{10B88}\\u{10B8A}\\u{10B8B}\\u{10B8D}\\u{10B90}\\u{10BAD}\\u{10BAE}\\u{10D00}-\\u{10D21}\\u{10D23}\\u{10EC3}\\u{10EC4}\\u{10F30}-\\u{10F32}\\u{10F34}-\\u{10F44}\\u{10F51}-\\u{10F53}\\u{10F70}-\\u{10F73}\\u{10F76}-\\u{10F81}\\u{10FB0}\\u{10FB2}\\u{10FB3}\\u{10FB8}\\u{10FBB}\\u{10FBC}\\u{10FBE}\\u{10FBF}\\u{10FC1}\\u{10FC4}\\u{10FCA}\\u{10FCB}\\u{1E900}-\\u{1E943}][\\xAD\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u061C\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u070F\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0897-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u200B\\u200E\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u206A-\\u206F\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFEFF\\uFFF9-\\uFFFB\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10D69}-\\u{10D6D}\\u{10EAB}\\u{10EAC}\\u{10EFC}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11001}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{113BB}-\\u{113C0}\\u{113CE}\\u{113D0}\\u{113D2}\\u{113E1}\\u{113E2}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C3F}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{11F5A}\\u{13430}-\\u{13440}\\u{13447}-\\u{13455}\\u{1611E}-\\u{16129}\\u{1612D}-\\u{1612F}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1BCA0}-\\u{1BCA3}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D173}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E5EE}\\u{1E5EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94B}\\u{E0001}\\u{E0020}-\\u{E007F}\\u{E0100}-\\u{E01EF}]*\\u200C[\\xAD\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u061C\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u070F\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0897-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u200B\\u200E\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u206A-\\u206F\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFEFF\\uFFF9-\\uFFFB\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10D69}-\\u{10D6D}\\u{10EAB}\\u{10EAC}\\u{10EFC}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11001}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{113BB}-\\u{113C0}\\u{113CE}\\u{113D0}\\u{113D2}\\u{113E1}\\u{113E2}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C3F}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{11F5A}\\u{13430}-\\u{13440}\\u{13447}-\\u{13455}\\u{1611E}-\\u{16129}\\u{1612D}-\\u{1612F}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1BCA0}-\\u{1BCA3}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D173}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E5EE}\\u{1E5EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94B}\\u{E0001}\\u{E0020}-\\u{E007F}\\u{E0100}-\\u{E01EF}]*[\\u0620\\u0622-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u0673\\u0675-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u077F\\u07CA-\\u07EA\\u0840-\\u0858\\u0860\\u0862-\\u0865\\u0867-\\u086A\\u0870-\\u0882\\u0886\\u0889-\\u088E\\u08A0-\\u08AC\\u08AE-\\u08C8\\u1807\\u1820-\\u1878\\u1887-\\u18A8\\u18AA\\uA840-\\uA871\\u{10AC0}-\\u{10AC5}\\u{10AC7}\\u{10AC9}\\u{10ACA}\\u{10ACE}-\\u{10AD6}\\u{10AD8}-\\u{10AE1}\\u{10AE4}\\u{10AEB}-\\u{10AEF}\\u{10B80}-\\u{10B91}\\u{10BA9}-\\u{10BAE}\\u{10D01}-\\u{10D23}\\u{10EC2}-\\u{10EC4}\\u{10F30}-\\u{10F44}\\u{10F51}-\\u{10F54}\\u{10F70}-\\u{10F81}\\u{10FB0}\\u{10FB2}-\\u{10FB6}\\u{10FB8}-\\u{10FBF}\\u{10FC1}-\\u{10FC4}\\u{10FC9}\\u{10FCA}\\u{1E900}-\\u{1E943}]/u;\nconst bidiDomain = /[\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05EA\\u05EF-\\u05F4\\u0600-\\u0605\\u0608\\u060B\\u060D\\u061B-\\u064A\\u0660-\\u0669\\u066B-\\u066F\\u0671-\\u06D5\\u06DD\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u070D\\u070F\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u07FE-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u083E\\u0840-\\u0858\\u085E\\u0860-\\u086A\\u0870-\\u088E\\u0890\\u0891\\u08A0-\\u08C9\\u08E2\\u200F\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBC2\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFC\\uFE70-\\uFE74\\uFE76-\\uFEFC\\u{10800}-\\u{10805}\\u{10808}\\u{1080A}-\\u{10835}\\u{10837}\\u{10838}\\u{1083C}\\u{1083F}-\\u{10855}\\u{10857}-\\u{1089E}\\u{108A7}-\\u{108AF}\\u{108E0}-\\u{108F2}\\u{108F4}\\u{108F5}\\u{108FB}-\\u{1091B}\\u{10920}-\\u{10939}\\u{1093F}\\u{10980}-\\u{109B7}\\u{109BC}-\\u{109CF}\\u{109D2}-\\u{10A00}\\u{10A10}-\\u{10A13}\\u{10A15}-\\u{10A17}\\u{10A19}-\\u{10A35}\\u{10A40}-\\u{10A48}\\u{10A50}-\\u{10A58}\\u{10A60}-\\u{10A9F}\\u{10AC0}-\\u{10AE4}\\u{10AEB}-\\u{10AF6}\\u{10B00}-\\u{10B35}\\u{10B40}-\\u{10B55}\\u{10B58}-\\u{10B72}\\u{10B78}-\\u{10B91}\\u{10B99}-\\u{10B9C}\\u{10BA9}-\\u{10BAF}\\u{10C00}-\\u{10C48}\\u{10C80}-\\u{10CB2}\\u{10CC0}-\\u{10CF2}\\u{10CFA}-\\u{10D23}\\u{10D30}-\\u{10D39}\\u{10D40}-\\u{10D65}\\u{10D6F}-\\u{10D85}\\u{10D8E}\\u{10D8F}\\u{10E60}-\\u{10E7E}\\u{10E80}-\\u{10EA9}\\u{10EAD}\\u{10EB0}\\u{10EB1}\\u{10EC2}-\\u{10EC4}\\u{10F00}-\\u{10F27}\\u{10F30}-\\u{10F45}\\u{10F51}-\\u{10F59}\\u{10F70}-\\u{10F81}\\u{10F86}-\\u{10F89}\\u{10FB0}-\\u{10FCB}\\u{10FE0}-\\u{10FF6}\\u{1E800}-\\u{1E8C4}\\u{1E8C7}-\\u{1E8CF}\\u{1E900}-\\u{1E943}\\u{1E94B}\\u{1E950}-\\u{1E959}\\u{1E95E}\\u{1E95F}\\u{1EC71}-\\u{1ECB4}\\u{1ED01}-\\u{1ED3D}\\u{1EE00}-\\u{1EE03}\\u{1EE05}-\\u{1EE1F}\\u{1EE21}\\u{1EE22}\\u{1EE24}\\u{1EE27}\\u{1EE29}-\\u{1EE32}\\u{1EE34}-\\u{1EE37}\\u{1EE39}\\u{1EE3B}\\u{1EE42}\\u{1EE47}\\u{1EE49}\\u{1EE4B}\\u{1EE4D}-\\u{1EE4F}\\u{1EE51}\\u{1EE52}\\u{1EE54}\\u{1EE57}\\u{1EE59}\\u{1EE5B}\\u{1EE5D}\\u{1EE5F}\\u{1EE61}\\u{1EE62}\\u{1EE64}\\u{1EE67}-\\u{1EE6A}\\u{1EE6C}-\\u{1EE72}\\u{1EE74}-\\u{1EE77}\\u{1EE79}-\\u{1EE7C}\\u{1EE7E}\\u{1EE80}-\\u{1EE89}\\u{1EE8B}-\\u{1EE9B}\\u{1EEA1}-\\u{1EEA3}\\u{1EEA5}-\\u{1EEA9}\\u{1EEAB}-\\u{1EEBB}]/u;\nconst bidiS1LTR = /[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02BB-\\u02C1\\u02D0\\u02D1\\u02E0-\\u02E4\\u02EE\\u0370-\\u0373\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0482\\u048A-\\u052F\\u0531-\\u0556\\u0559-\\u0589\\u0903-\\u0939\\u093B\\u093D-\\u0940\\u0949-\\u094C\\u094E-\\u0950\\u0958-\\u0961\\u0964-\\u0980\\u0982\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09FA\\u09FC\\u09FD\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A40\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A76\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AF0\\u0AF9\\u0B02\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0BE6-\\u0BF2\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C41-\\u0C44\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C77\\u0C7F\\u0C80\\u0C82-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1-\\u0CF3\\u0D02-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D4F\\u0D54-\\u0D61\\u0D66-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E4F-\\u0E5B\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00-\\u0F17\\u0F1A-\\u0F34\\u0F36\\u0F38\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F7F\\u0F85\\u0F88-\\u0F8C\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u1000-\\u102C\\u1031\\u1038\\u103B\\u103C\\u103F-\\u1057\\u105A-\\u105D\\u1061-\\u1070\\u1075-\\u1081\\u1083\\u1084\\u1087-\\u108C\\u108E-\\u109C\\u109E-\\u10C5\\u10C7\\u10CD\\u10D0-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1360-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u167F\\u1681-\\u169A\\u16A0-\\u16F8\\u1700-\\u1711\\u1715\\u171F-\\u1731\\u1734-\\u1736\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u17D4-\\u17DA\\u17DC\\u17E0-\\u17E9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A19\\u1A1A\\u1A1E-\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD\\u1B04-\\u1B33\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B4C\\u1B4E-\\u1B6A\\u1B74-\\u1B7F\\u1B82-\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BAE-\\u1BE5\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1BFC-\\u1C2B\\u1C34\\u1C35\\u1C3B-\\u1C49\\u1C4D-\\u1C8A\\u1C90-\\u1CBA\\u1CBD-\\u1CC7\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5-\\u1CF7\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200E\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u214F\\u2160-\\u2188\\u2336-\\u237A\\u2395\\u249C-\\u24E9\\u26AC\\u2800-\\u28FF\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u302E\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3190-\\u31BF\\u31F0-\\u321C\\u3220-\\u324F\\u3260-\\u327B\\u327F-\\u32B0\\u32C0-\\u32CB\\u32D0-\\u3376\\u337B-\\u33DD\\u33E0-\\u33FE\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA680-\\uA69D\\uA6A0-\\uA6EF\\uA6F2-\\uA6F7\\uA722-\\uA787\\uA789-\\uA7CD\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7DC\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA824\\uA827\\uA830-\\uA837\\uA840-\\uA873\\uA880-\\uA8C3\\uA8CE-\\uA8D9\\uA8F2-\\uA8FE\\uA900-\\uA925\\uA92E-\\uA946\\uA952\\uA953\\uA95F-\\uA97C\\uA983-\\uA9B2\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BE-\\uA9CD\\uA9CF-\\uA9D9\\uA9DE-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA7B\\uAA7D-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAAEB\\uAAEE-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB69\\uAB70-\\uABE4\\uABE6\\uABE7\\uABE9-\\uABEC\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uD800-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u{10000}-\\u{1000B}\\u{1000D}-\\u{10026}\\u{10028}-\\u{1003A}\\u{1003C}\\u{1003D}\\u{1003F}-\\u{1004D}\\u{10050}-\\u{1005D}\\u{10080}-\\u{100FA}\\u{10100}\\u{10102}\\u{10107}-\\u{10133}\\u{10137}-\\u{1013F}\\u{1018D}\\u{1018E}\\u{101D0}-\\u{101FC}\\u{10280}-\\u{1029C}\\u{102A0}-\\u{102D0}\\u{10300}-\\u{10323}\\u{1032D}-\\u{1034A}\\u{10350}-\\u{10375}\\u{10380}-\\u{1039D}\\u{1039F}-\\u{103C3}\\u{103C8}-\\u{103D5}\\u{10400}-\\u{1049D}\\u{104A0}-\\u{104A9}\\u{104B0}-\\u{104D3}\\u{104D8}-\\u{104FB}\\u{10500}-\\u{10527}\\u{10530}-\\u{10563}\\u{1056F}-\\u{1057A}\\u{1057C}-\\u{1058A}\\u{1058C}-\\u{10592}\\u{10594}\\u{10595}\\u{10597}-\\u{105A1}\\u{105A3}-\\u{105B1}\\u{105B3}-\\u{105B9}\\u{105BB}\\u{105BC}\\u{105C0}-\\u{105F3}\\u{10600}-\\u{10736}\\u{10740}-\\u{10755}\\u{10760}-\\u{10767}\\u{10780}-\\u{10785}\\u{10787}-\\u{107B0}\\u{107B2}-\\u{107BA}\\u{11000}\\u{11002}-\\u{11037}\\u{11047}-\\u{1104D}\\u{11066}-\\u{1106F}\\u{11071}\\u{11072}\\u{11075}\\u{11082}-\\u{110B2}\\u{110B7}\\u{110B8}\\u{110BB}-\\u{110C1}\\u{110CD}\\u{110D0}-\\u{110E8}\\u{110F0}-\\u{110F9}\\u{11103}-\\u{11126}\\u{1112C}\\u{11136}-\\u{11147}\\u{11150}-\\u{11172}\\u{11174}-\\u{11176}\\u{11182}-\\u{111B5}\\u{111BF}-\\u{111C8}\\u{111CD}\\u{111CE}\\u{111D0}-\\u{111DF}\\u{111E1}-\\u{111F4}\\u{11200}-\\u{11211}\\u{11213}-\\u{1122E}\\u{11232}\\u{11233}\\u{11235}\\u{11238}-\\u{1123D}\\u{1123F}\\u{11240}\\u{11280}-\\u{11286}\\u{11288}\\u{1128A}-\\u{1128D}\\u{1128F}-\\u{1129D}\\u{1129F}-\\u{112A9}\\u{112B0}-\\u{112DE}\\u{112E0}-\\u{112E2}\\u{112F0}-\\u{112F9}\\u{11302}\\u{11303}\\u{11305}-\\u{1130C}\\u{1130F}\\u{11310}\\u{11313}-\\u{11328}\\u{1132A}-\\u{11330}\\u{11332}\\u{11333}\\u{11335}-\\u{11339}\\u{1133D}-\\u{1133F}\\u{11341}-\\u{11344}\\u{11347}\\u{11348}\\u{1134B}-\\u{1134D}\\u{11350}\\u{11357}\\u{1135D}-\\u{11363}\\u{11380}-\\u{11389}\\u{1138B}\\u{1138E}\\u{11390}-\\u{113B5}\\u{113B7}-\\u{113BA}\\u{113C2}\\u{113C5}\\u{113C7}-\\u{113CA}\\u{113CC}\\u{113CD}\\u{113CF}\\u{113D1}\\u{113D3}-\\u{113D5}\\u{113D7}\\u{113D8}\\u{11400}-\\u{11437}\\u{11440}\\u{11441}\\u{11445}\\u{11447}-\\u{1145B}\\u{1145D}\\u{1145F}-\\u{11461}\\u{11480}-\\u{114B2}\\u{114B9}\\u{114BB}-\\u{114BE}\\u{114C1}\\u{114C4}-\\u{114C7}\\u{114D0}-\\u{114D9}\\u{11580}-\\u{115B1}\\u{115B8}-\\u{115BB}\\u{115BE}\\u{115C1}-\\u{115DB}\\u{11600}-\\u{11632}\\u{1163B}\\u{1163C}\\u{1163E}\\u{11641}-\\u{11644}\\u{11650}-\\u{11659}\\u{11680}-\\u{116AA}\\u{116AC}\\u{116AE}\\u{116AF}\\u{116B6}\\u{116B8}\\u{116B9}\\u{116C0}-\\u{116C9}\\u{116D0}-\\u{116E3}\\u{11700}-\\u{1171A}\\u{1171E}\\u{11720}\\u{11721}\\u{11726}\\u{11730}-\\u{11746}\\u{11800}-\\u{1182E}\\u{11838}\\u{1183B}\\u{118A0}-\\u{118F2}\\u{118FF}-\\u{11906}\\u{11909}\\u{1190C}-\\u{11913}\\u{11915}\\u{11916}\\u{11918}-\\u{11935}\\u{11937}\\u{11938}\\u{1193D}\\u{1193F}-\\u{11942}\\u{11944}-\\u{11946}\\u{11950}-\\u{11959}\\u{119A0}-\\u{119A7}\\u{119AA}-\\u{119D3}\\u{119DC}-\\u{119DF}\\u{119E1}-\\u{119E4}\\u{11A00}\\u{11A07}\\u{11A08}\\u{11A0B}-\\u{11A32}\\u{11A39}\\u{11A3A}\\u{11A3F}-\\u{11A46}\\u{11A50}\\u{11A57}\\u{11A58}\\u{11A5C}-\\u{11A89}\\u{11A97}\\u{11A9A}-\\u{11AA2}\\u{11AB0}-\\u{11AF8}\\u{11B00}-\\u{11B09}\\u{11BC0}-\\u{11BE1}\\u{11BF0}-\\u{11BF9}\\u{11C00}-\\u{11C08}\\u{11C0A}-\\u{11C2F}\\u{11C3E}-\\u{11C45}\\u{11C50}-\\u{11C6C}\\u{11C70}-\\u{11C8F}\\u{11CA9}\\u{11CB1}\\u{11CB4}\\u{11D00}-\\u{11D06}\\u{11D08}\\u{11D09}\\u{11D0B}-\\u{11D30}\\u{11D46}\\u{11D50}-\\u{11D59}\\u{11D60}-\\u{11D65}\\u{11D67}\\u{11D68}\\u{11D6A}-\\u{11D8E}\\u{11D93}\\u{11D94}\\u{11D96}\\u{11D98}\\u{11DA0}-\\u{11DA9}\\u{11EE0}-\\u{11EF2}\\u{11EF5}-\\u{11EF8}\\u{11F02}-\\u{11F10}\\u{11F12}-\\u{11F35}\\u{11F3E}\\u{11F3F}\\u{11F41}\\u{11F43}-\\u{11F59}\\u{11FB0}\\u{11FC0}-\\u{11FD4}\\u{11FFF}-\\u{12399}\\u{12400}-\\u{1246E}\\u{12470}-\\u{12474}\\u{12480}-\\u{12543}\\u{12F90}-\\u{12FF2}\\u{13000}-\\u{1343F}\\u{13441}-\\u{13446}\\u{13460}-\\u{143FA}\\u{14400}-\\u{14646}\\u{16100}-\\u{1611D}\\u{1612A}-\\u{1612C}\\u{16130}-\\u{16139}\\u{16800}-\\u{16A38}\\u{16A40}-\\u{16A5E}\\u{16A60}-\\u{16A69}\\u{16A6E}-\\u{16ABE}\\u{16AC0}-\\u{16AC9}\\u{16AD0}-\\u{16AED}\\u{16AF5}\\u{16B00}-\\u{16B2F}\\u{16B37}-\\u{16B45}\\u{16B50}-\\u{16B59}\\u{16B5B}-\\u{16B61}\\u{16B63}-\\u{16B77}\\u{16B7D}-\\u{16B8F}\\u{16D40}-\\u{16D79}\\u{16E40}-\\u{16E9A}\\u{16F00}-\\u{16F4A}\\u{16F50}-\\u{16F87}\\u{16F93}-\\u{16F9F}\\u{16FE0}\\u{16FE1}\\u{16FE3}\\u{16FF0}\\u{16FF1}\\u{17000}-\\u{187F7}\\u{18800}-\\u{18CD5}\\u{18CFF}-\\u{18D08}\\u{1AFF0}-\\u{1AFF3}\\u{1AFF5}-\\u{1AFFB}\\u{1AFFD}\\u{1AFFE}\\u{1B000}-\\u{1B122}\\u{1B132}\\u{1B150}-\\u{1B152}\\u{1B155}\\u{1B164}-\\u{1B167}\\u{1B170}-\\u{1B2FB}\\u{1BC00}-\\u{1BC6A}\\u{1BC70}-\\u{1BC7C}\\u{1BC80}-\\u{1BC88}\\u{1BC90}-\\u{1BC99}\\u{1BC9C}\\u{1BC9F}\\u{1CCD6}-\\u{1CCEF}\\u{1CF50}-\\u{1CFC3}\\u{1D000}-\\u{1D0F5}\\u{1D100}-\\u{1D126}\\u{1D129}-\\u{1D166}\\u{1D16A}-\\u{1D172}\\u{1D183}\\u{1D184}\\u{1D18C}-\\u{1D1A9}\\u{1D1AE}-\\u{1D1E8}\\u{1D2C0}-\\u{1D2D3}\\u{1D2E0}-\\u{1D2F3}\\u{1D360}-\\u{1D378}\\u{1D400}-\\u{1D454}\\u{1D456}-\\u{1D49C}\\u{1D49E}\\u{1D49F}\\u{1D4A2}\\u{1D4A5}\\u{1D4A6}\\u{1D4A9}-\\u{1D4AC}\\u{1D4AE}-\\u{1D4B9}\\u{1D4BB}\\u{1D4BD}-\\u{1D4C3}\\u{1D4C5}-\\u{1D505}\\u{1D507}-\\u{1D50A}\\u{1D50D}-\\u{1D514}\\u{1D516}-\\u{1D51C}\\u{1D51E}-\\u{1D539}\\u{1D53B}-\\u{1D53E}\\u{1D540}-\\u{1D544}\\u{1D546}\\u{1D54A}-\\u{1D550}\\u{1D552}-\\u{1D6A5}\\u{1D6A8}-\\u{1D6C0}\\u{1D6C2}-\\u{1D6DA}\\u{1D6DC}-\\u{1D6FA}\\u{1D6FC}-\\u{1D714}\\u{1D716}-\\u{1D734}\\u{1D736}-\\u{1D74E}\\u{1D750}-\\u{1D76E}\\u{1D770}-\\u{1D788}\\u{1D78A}-\\u{1D7A8}\\u{1D7AA}-\\u{1D7C2}\\u{1D7C4}-\\u{1D7CB}\\u{1D800}-\\u{1D9FF}\\u{1DA37}-\\u{1DA3A}\\u{1DA6D}-\\u{1DA74}\\u{1DA76}-\\u{1DA83}\\u{1DA85}-\\u{1DA8B}\\u{1DF00}-\\u{1DF1E}\\u{1DF25}-\\u{1DF2A}\\u{1E030}-\\u{1E06D}\\u{1E100}-\\u{1E12C}\\u{1E137}-\\u{1E13D}\\u{1E140}-\\u{1E149}\\u{1E14E}\\u{1E14F}\\u{1E290}-\\u{1E2AD}\\u{1E2C0}-\\u{1E2EB}\\u{1E2F0}-\\u{1E2F9}\\u{1E4D0}-\\u{1E4EB}\\u{1E4F0}-\\u{1E4F9}\\u{1E5D0}-\\u{1E5ED}\\u{1E5F0}-\\u{1E5FA}\\u{1E5FF}\\u{1E7E0}-\\u{1E7E6}\\u{1E7E8}-\\u{1E7EB}\\u{1E7ED}\\u{1E7EE}\\u{1E7F0}-\\u{1E7FE}\\u{1F110}-\\u{1F12E}\\u{1F130}-\\u{1F169}\\u{1F170}-\\u{1F1AC}\\u{1F1E6}-\\u{1F202}\\u{1F210}-\\u{1F23B}\\u{1F240}-\\u{1F248}\\u{1F250}\\u{1F251}\\u{20000}-\\u{2A6DF}\\u{2A700}-\\u{2B739}\\u{2B740}-\\u{2B81D}\\u{2B820}-\\u{2CEA1}\\u{2CEB0}-\\u{2EBE0}\\u{2EBF0}-\\u{2EE5D}\\u{2F800}-\\u{2FA1D}\\u{30000}-\\u{3134A}\\u{31350}-\\u{323AF}\\u{F0000}-\\u{FFFFD}\\u{100000}-\\u{10FFFD}]/u;\nconst bidiS1RTL = /[\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05EA\\u05EF-\\u05F4\\u0608\\u060B\\u060D\\u061B-\\u064A\\u066D-\\u066F\\u0671-\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u070D\\u070F\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u07FE-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u083E\\u0840-\\u0858\\u085E\\u0860-\\u086A\\u0870-\\u088E\\u08A0-\\u08C9\\u200F\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBC2\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFC\\uFE70-\\uFE74\\uFE76-\\uFEFC\\u{10800}-\\u{10805}\\u{10808}\\u{1080A}-\\u{10835}\\u{10837}\\u{10838}\\u{1083C}\\u{1083F}-\\u{10855}\\u{10857}-\\u{1089E}\\u{108A7}-\\u{108AF}\\u{108E0}-\\u{108F2}\\u{108F4}\\u{108F5}\\u{108FB}-\\u{1091B}\\u{10920}-\\u{10939}\\u{1093F}\\u{10980}-\\u{109B7}\\u{109BC}-\\u{109CF}\\u{109D2}-\\u{10A00}\\u{10A10}-\\u{10A13}\\u{10A15}-\\u{10A17}\\u{10A19}-\\u{10A35}\\u{10A40}-\\u{10A48}\\u{10A50}-\\u{10A58}\\u{10A60}-\\u{10A9F}\\u{10AC0}-\\u{10AE4}\\u{10AEB}-\\u{10AF6}\\u{10B00}-\\u{10B35}\\u{10B40}-\\u{10B55}\\u{10B58}-\\u{10B72}\\u{10B78}-\\u{10B91}\\u{10B99}-\\u{10B9C}\\u{10BA9}-\\u{10BAF}\\u{10C00}-\\u{10C48}\\u{10C80}-\\u{10CB2}\\u{10CC0}-\\u{10CF2}\\u{10CFA}-\\u{10D23}\\u{10D4A}-\\u{10D65}\\u{10D6F}-\\u{10D85}\\u{10D8E}\\u{10D8F}\\u{10E80}-\\u{10EA9}\\u{10EAD}\\u{10EB0}\\u{10EB1}\\u{10EC2}-\\u{10EC4}\\u{10F00}-\\u{10F27}\\u{10F30}-\\u{10F45}\\u{10F51}-\\u{10F59}\\u{10F70}-\\u{10F81}\\u{10F86}-\\u{10F89}\\u{10FB0}-\\u{10FCB}\\u{10FE0}-\\u{10FF6}\\u{1E800}-\\u{1E8C4}\\u{1E8C7}-\\u{1E8CF}\\u{1E900}-\\u{1E943}\\u{1E94B}\\u{1E950}-\\u{1E959}\\u{1E95E}\\u{1E95F}\\u{1EC71}-\\u{1ECB4}\\u{1ED01}-\\u{1ED3D}\\u{1EE00}-\\u{1EE03}\\u{1EE05}-\\u{1EE1F}\\u{1EE21}\\u{1EE22}\\u{1EE24}\\u{1EE27}\\u{1EE29}-\\u{1EE32}\\u{1EE34}-\\u{1EE37}\\u{1EE39}\\u{1EE3B}\\u{1EE42}\\u{1EE47}\\u{1EE49}\\u{1EE4B}\\u{1EE4D}-\\u{1EE4F}\\u{1EE51}\\u{1EE52}\\u{1EE54}\\u{1EE57}\\u{1EE59}\\u{1EE5B}\\u{1EE5D}\\u{1EE5F}\\u{1EE61}\\u{1EE62}\\u{1EE64}\\u{1EE67}-\\u{1EE6A}\\u{1EE6C}-\\u{1EE72}\\u{1EE74}-\\u{1EE77}\\u{1EE79}-\\u{1EE7C}\\u{1EE7E}\\u{1EE80}-\\u{1EE89}\\u{1EE8B}-\\u{1EE9B}\\u{1EEA1}-\\u{1EEA3}\\u{1EEA5}-\\u{1EEA9}\\u{1EEAB}-\\u{1EEBB}]/u;\nconst bidiS2 = /^[\\0-\\x08\\x0E-\\x1B!-@\\[-`\\{-\\x84\\x86-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02B9\\u02BA\\u02C2-\\u02CF\\u02D2-\\u02DF\\u02E5-\\u02ED\\u02EF-\\u036F\\u0374\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0483-\\u0489\\u058A\\u058D-\\u058F\\u0591-\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F4\\u0600-\\u070D\\u070F-\\u074A\\u074D-\\u07B1\\u07C0-\\u07FA\\u07FD-\\u082D\\u0830-\\u083E\\u0840-\\u085B\\u085E\\u0860-\\u086A\\u0870-\\u088E\\u0890\\u0891\\u0897-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09F2\\u09F3\\u09FB\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AF1\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0BF3-\\u0BFA\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C78-\\u0C7E\\u0C81\\u0CBC\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E3F\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39-\\u0F3D\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1390-\\u1399\\u1400\\u169B\\u169C\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DB\\u17DD\\u17F0-\\u17F9\\u1800-\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u200B-\\u200D\\u200F-\\u2027\\u202F-\\u205E\\u2060-\\u2064\\u206A-\\u2070\\u2074-\\u207E\\u2080-\\u208E\\u20A0-\\u20C0\\u20D0-\\u20F0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u2150-\\u215F\\u2189-\\u218B\\u2190-\\u2335\\u237B-\\u2394\\u2396-\\u2429\\u2440-\\u244A\\u2460-\\u249B\\u24EA-\\u26AB\\u26AD-\\u27FF\\u2900-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CEF-\\u2CF1\\u2CF9-\\u2CFF\\u2D7F\\u2DE0-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u302A-\\u302D\\u3030\\u3036\\u3037\\u303D-\\u303F\\u3099-\\u309C\\u30A0\\u30FB\\u31C0-\\u31E5\\u31EF\\u321D\\u321E\\u3250-\\u325F\\u327C-\\u327E\\u32B1-\\u32BF\\u32CC-\\u32CF\\u3377-\\u337A\\u33DE\\u33DF\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA60D-\\uA60F\\uA66F-\\uA67F\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA700-\\uA721\\uA788\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA828-\\uA82C\\uA838\\uA839\\uA874-\\uA877\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uAB6A\\uAB6B\\uABE5\\uABE8\\uABED\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBC2\\uFBD3-\\uFD8F\\uFD92-\\uFDC7\\uFDCF\\uFDF0-\\uFE19\\uFE20-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFEFF\\uFF01-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD\\u{10101}\\u{10140}-\\u{1018C}\\u{10190}-\\u{1019C}\\u{101A0}\\u{101FD}\\u{102E0}-\\u{102FB}\\u{10376}-\\u{1037A}\\u{10800}-\\u{10805}\\u{10808}\\u{1080A}-\\u{10835}\\u{10837}\\u{10838}\\u{1083C}\\u{1083F}-\\u{10855}\\u{10857}-\\u{1089E}\\u{108A7}-\\u{108AF}\\u{108E0}-\\u{108F2}\\u{108F4}\\u{108F5}\\u{108FB}-\\u{1091B}\\u{1091F}-\\u{10939}\\u{1093F}\\u{10980}-\\u{109B7}\\u{109BC}-\\u{109CF}\\u{109D2}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A13}\\u{10A15}-\\u{10A17}\\u{10A19}-\\u{10A35}\\u{10A38}-\\u{10A3A}\\u{10A3F}-\\u{10A48}\\u{10A50}-\\u{10A58}\\u{10A60}-\\u{10A9F}\\u{10AC0}-\\u{10AE6}\\u{10AEB}-\\u{10AF6}\\u{10B00}-\\u{10B35}\\u{10B39}-\\u{10B55}\\u{10B58}-\\u{10B72}\\u{10B78}-\\u{10B91}\\u{10B99}-\\u{10B9C}\\u{10BA9}-\\u{10BAF}\\u{10C00}-\\u{10C48}\\u{10C80}-\\u{10CB2}\\u{10CC0}-\\u{10CF2}\\u{10CFA}-\\u{10D27}\\u{10D30}-\\u{10D39}\\u{10D40}-\\u{10D65}\\u{10D69}-\\u{10D85}\\u{10D8E}\\u{10D8F}\\u{10E60}-\\u{10E7E}\\u{10E80}-\\u{10EA9}\\u{10EAB}-\\u{10EAD}\\u{10EB0}\\u{10EB1}\\u{10EC2}-\\u{10EC4}\\u{10EFC}-\\u{10F27}\\u{10F30}-\\u{10F59}\\u{10F70}-\\u{10F89}\\u{10FB0}-\\u{10FCB}\\u{10FE0}-\\u{10FF6}\\u{11001}\\u{11038}-\\u{11046}\\u{11052}-\\u{11065}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{113BB}-\\u{113C0}\\u{113CE}\\u{113D0}\\u{113D2}\\u{113E1}\\u{113E2}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{11660}-\\u{1166C}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A06}\\u{11A09}\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{11F5A}\\u{11FD5}-\\u{11FF1}\\u{13440}\\u{13447}-\\u{13455}\\u{1611E}-\\u{16129}\\u{1612D}-\\u{1612F}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE2}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1BCA0}-\\u{1BCA3}\\u{1CC00}-\\u{1CCD5}\\u{1CCF0}-\\u{1CCF9}\\u{1CD00}-\\u{1CEB3}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D173}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D1E9}\\u{1D1EA}\\u{1D200}-\\u{1D245}\\u{1D300}-\\u{1D356}\\u{1D6C1}\\u{1D6DB}\\u{1D6FB}\\u{1D715}\\u{1D735}\\u{1D74F}\\u{1D76F}\\u{1D789}\\u{1D7A9}\\u{1D7C3}\\u{1D7CE}-\\u{1D7FF}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E2FF}\\u{1E4EC}-\\u{1E4EF}\\u{1E5EE}\\u{1E5EF}\\u{1E800}-\\u{1E8C4}\\u{1E8C7}-\\u{1E8D6}\\u{1E900}-\\u{1E94B}\\u{1E950}-\\u{1E959}\\u{1E95E}\\u{1E95F}\\u{1EC71}-\\u{1ECB4}\\u{1ED01}-\\u{1ED3D}\\u{1EE00}-\\u{1EE03}\\u{1EE05}-\\u{1EE1F}\\u{1EE21}\\u{1EE22}\\u{1EE24}\\u{1EE27}\\u{1EE29}-\\u{1EE32}\\u{1EE34}-\\u{1EE37}\\u{1EE39}\\u{1EE3B}\\u{1EE42}\\u{1EE47}\\u{1EE49}\\u{1EE4B}\\u{1EE4D}-\\u{1EE4F}\\u{1EE51}\\u{1EE52}\\u{1EE54}\\u{1EE57}\\u{1EE59}\\u{1EE5B}\\u{1EE5D}\\u{1EE5F}\\u{1EE61}\\u{1EE62}\\u{1EE64}\\u{1EE67}-\\u{1EE6A}\\u{1EE6C}-\\u{1EE72}\\u{1EE74}-\\u{1EE77}\\u{1EE79}-\\u{1EE7C}\\u{1EE7E}\\u{1EE80}-\\u{1EE89}\\u{1EE8B}-\\u{1EE9B}\\u{1EEA1}-\\u{1EEA3}\\u{1EEA5}-\\u{1EEA9}\\u{1EEAB}-\\u{1EEBB}\\u{1EEF0}\\u{1EEF1}\\u{1F000}-\\u{1F02B}\\u{1F030}-\\u{1F093}\\u{1F0A0}-\\u{1F0AE}\\u{1F0B1}-\\u{1F0BF}\\u{1F0C1}-\\u{1F0CF}\\u{1F0D1}-\\u{1F0F5}\\u{1F100}-\\u{1F10F}\\u{1F12F}\\u{1F16A}-\\u{1F16F}\\u{1F1AD}\\u{1F260}-\\u{1F265}\\u{1F300}-\\u{1F6D7}\\u{1F6DC}-\\u{1F6EC}\\u{1F6F0}-\\u{1F6FC}\\u{1F700}-\\u{1F776}\\u{1F77B}-\\u{1F7D9}\\u{1F7E0}-\\u{1F7EB}\\u{1F7F0}\\u{1F800}-\\u{1F80B}\\u{1F810}-\\u{1F847}\\u{1F850}-\\u{1F859}\\u{1F860}-\\u{1F887}\\u{1F890}-\\u{1F8AD}\\u{1F8B0}-\\u{1F8BB}\\u{1F8C0}\\u{1F8C1}\\u{1F900}-\\u{1FA53}\\u{1FA60}-\\u{1FA6D}\\u{1FA70}-\\u{1FA7C}\\u{1FA80}-\\u{1FA89}\\u{1FA8F}-\\u{1FAC6}\\u{1FACE}-\\u{1FADC}\\u{1FADF}-\\u{1FAE9}\\u{1FAF0}-\\u{1FAF8}\\u{1FB00}-\\u{1FB92}\\u{1FB94}-\\u{1FBF9}\\u{E0001}\\u{E0020}-\\u{E007F}\\u{E0100}-\\u{E01EF}]*$/u;\nconst bidiS3 = /[0-9\\xB2\\xB3\\xB9\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05EA\\u05EF-\\u05F4\\u0600-\\u0605\\u0608\\u060B\\u060D\\u061B-\\u064A\\u0660-\\u0669\\u066B-\\u066F\\u0671-\\u06D5\\u06DD\\u06E5\\u06E6\\u06EE-\\u070D\\u070F\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u07FE-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u083E\\u0840-\\u0858\\u085E\\u0860-\\u086A\\u0870-\\u088E\\u0890\\u0891\\u08A0-\\u08C9\\u08E2\\u200F\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2488-\\u249B\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBC2\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFC\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\u{102E1}-\\u{102FB}\\u{10800}-\\u{10805}\\u{10808}\\u{1080A}-\\u{10835}\\u{10837}\\u{10838}\\u{1083C}\\u{1083F}-\\u{10855}\\u{10857}-\\u{1089E}\\u{108A7}-\\u{108AF}\\u{108E0}-\\u{108F2}\\u{108F4}\\u{108F5}\\u{108FB}-\\u{1091B}\\u{10920}-\\u{10939}\\u{1093F}\\u{10980}-\\u{109B7}\\u{109BC}-\\u{109CF}\\u{109D2}-\\u{10A00}\\u{10A10}-\\u{10A13}\\u{10A15}-\\u{10A17}\\u{10A19}-\\u{10A35}\\u{10A40}-\\u{10A48}\\u{10A50}-\\u{10A58}\\u{10A60}-\\u{10A9F}\\u{10AC0}-\\u{10AE4}\\u{10AEB}-\\u{10AF6}\\u{10B00}-\\u{10B35}\\u{10B40}-\\u{10B55}\\u{10B58}-\\u{10B72}\\u{10B78}-\\u{10B91}\\u{10B99}-\\u{10B9C}\\u{10BA9}-\\u{10BAF}\\u{10C00}-\\u{10C48}\\u{10C80}-\\u{10CB2}\\u{10CC0}-\\u{10CF2}\\u{10CFA}-\\u{10D23}\\u{10D30}-\\u{10D39}\\u{10D40}-\\u{10D65}\\u{10D6F}-\\u{10D85}\\u{10D8E}\\u{10D8F}\\u{10E60}-\\u{10E7E}\\u{10E80}-\\u{10EA9}\\u{10EAD}\\u{10EB0}\\u{10EB1}\\u{10EC2}-\\u{10EC4}\\u{10F00}-\\u{10F27}\\u{10F30}-\\u{10F45}\\u{10F51}-\\u{10F59}\\u{10F70}-\\u{10F81}\\u{10F86}-\\u{10F89}\\u{10FB0}-\\u{10FCB}\\u{10FE0}-\\u{10FF6}\\u{1CCF0}-\\u{1CCF9}\\u{1D7CE}-\\u{1D7FF}\\u{1E800}-\\u{1E8C4}\\u{1E8C7}-\\u{1E8CF}\\u{1E900}-\\u{1E943}\\u{1E94B}\\u{1E950}-\\u{1E959}\\u{1E95E}\\u{1E95F}\\u{1EC71}-\\u{1ECB4}\\u{1ED01}-\\u{1ED3D}\\u{1EE00}-\\u{1EE03}\\u{1EE05}-\\u{1EE1F}\\u{1EE21}\\u{1EE22}\\u{1EE24}\\u{1EE27}\\u{1EE29}-\\u{1EE32}\\u{1EE34}-\\u{1EE37}\\u{1EE39}\\u{1EE3B}\\u{1EE42}\\u{1EE47}\\u{1EE49}\\u{1EE4B}\\u{1EE4D}-\\u{1EE4F}\\u{1EE51}\\u{1EE52}\\u{1EE54}\\u{1EE57}\\u{1EE59}\\u{1EE5B}\\u{1EE5D}\\u{1EE5F}\\u{1EE61}\\u{1EE62}\\u{1EE64}\\u{1EE67}-\\u{1EE6A}\\u{1EE6C}-\\u{1EE72}\\u{1EE74}-\\u{1EE77}\\u{1EE79}-\\u{1EE7C}\\u{1EE7E}\\u{1EE80}-\\u{1EE89}\\u{1EE8B}-\\u{1EE9B}\\u{1EEA1}-\\u{1EEA3}\\u{1EEA5}-\\u{1EEA9}\\u{1EEAB}-\\u{1EEBB}\\u{1F100}-\\u{1F10A}\\u{1FBF0}-\\u{1FBF9}][\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0897-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10D69}-\\u{10D6D}\\u{10EAB}\\u{10EAC}\\u{10EFC}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11001}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{113BB}-\\u{113C0}\\u{113CE}\\u{113D0}\\u{113D2}\\u{113E1}\\u{113E2}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A06}\\u{11A09}\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{11F5A}\\u{13440}\\u{13447}-\\u{13455}\\u{1611E}-\\u{16129}\\u{1612D}-\\u{1612F}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D17B}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E5EE}\\u{1E5EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94A}\\u{E0100}-\\u{E01EF}]*$/u;\nconst bidiS4EN = /[0-9\\xB2\\xB3\\xB9\\u06F0-\\u06F9\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2488-\\u249B\\uFF10-\\uFF19\\u{102E1}-\\u{102FB}\\u{1CCF0}-\\u{1CCF9}\\u{1D7CE}-\\u{1D7FF}\\u{1F100}-\\u{1F10A}\\u{1FBF0}-\\u{1FBF9}]/u;\nconst bidiS4AN = /[\\u0600-\\u0605\\u0660-\\u0669\\u066B\\u066C\\u06DD\\u0890\\u0891\\u08E2\\u{10D30}-\\u{10D39}\\u{10D40}-\\u{10D49}\\u{10E60}-\\u{10E7E}]/u;\nconst bidiS5 = /^[\\0-\\x08\\x0E-\\x1B!-\\x84\\x86-\\u0377\\u037A-\\u037F\\u0384-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u052F\\u0531-\\u0556\\u0559-\\u058A\\u058D-\\u058F\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0606\\u0607\\u0609\\u060A\\u060C\\u060E-\\u061A\\u064B-\\u065F\\u066A\\u0670\\u06D6-\\u06DC\\u06DE-\\u06E4\\u06E7-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07F6-\\u07F9\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0897-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A76\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3C-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C5D\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C77-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDD\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1-\\u0CF3\\u0D00-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4F\\u0D54-\\u0D63\\u0D66-\\u0D7F\\u0D81-\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4\\u0E01-\\u0E3A\\u0E3F-\\u0E5B\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECE\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FDA\\u1000-\\u10C5\\u10C7\\u10CD\\u10D0-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1400-\\u167F\\u1681-\\u169C\\u16A0-\\u16F8\\u1700-\\u1715\\u171F-\\u1736\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1800-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1940\\u1944-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u19DE-\\u1A1B\\u1A1E-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD\\u1AB0-\\u1ACE\\u1B00-\\u1B4C\\u1B4E-\\u1BF3\\u1BFC-\\u1C37\\u1C3B-\\u1C49\\u1C4D-\\u1C8A\\u1C90-\\u1CBA\\u1CBD-\\u1CC7\\u1CD0-\\u1CFA\\u1D00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u200B-\\u200E\\u2010-\\u2027\\u202F-\\u205E\\u2060-\\u2064\\u206A-\\u2071\\u2074-\\u208E\\u2090-\\u209C\\u20A0-\\u20C0\\u20D0-\\u20F0\\u2100-\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u2460-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2CF3\\u2CF9-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u303F\\u3041-\\u3096\\u3099-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3190-\\u31E5\\u31EF-\\u321E\\u3220-\\uA48C\\uA490-\\uA4C6\\uA4D0-\\uA62B\\uA640-\\uA6F7\\uA700-\\uA7CD\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7DC\\uA7F2-\\uA82C\\uA830-\\uA839\\uA840-\\uA877\\uA880-\\uA8C5\\uA8CE-\\uA8D9\\uA8E0-\\uA953\\uA95F-\\uA97C\\uA980-\\uA9CD\\uA9CF-\\uA9D9\\uA9DE-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAAC2\\uAADB-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB6B\\uAB70-\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uD800-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1E\\uFB29\\uFD3E-\\uFD4F\\uFDCF\\uFDFD-\\uFE19\\uFE20-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD\\u{10000}-\\u{1000B}\\u{1000D}-\\u{10026}\\u{10028}-\\u{1003A}\\u{1003C}\\u{1003D}\\u{1003F}-\\u{1004D}\\u{10050}-\\u{1005D}\\u{10080}-\\u{100FA}\\u{10100}-\\u{10102}\\u{10107}-\\u{10133}\\u{10137}-\\u{1018E}\\u{10190}-\\u{1019C}\\u{101A0}\\u{101D0}-\\u{101FD}\\u{10280}-\\u{1029C}\\u{102A0}-\\u{102D0}\\u{102E0}-\\u{102FB}\\u{10300}-\\u{10323}\\u{1032D}-\\u{1034A}\\u{10350}-\\u{1037A}\\u{10380}-\\u{1039D}\\u{1039F}-\\u{103C3}\\u{103C8}-\\u{103D5}\\u{10400}-\\u{1049D}\\u{104A0}-\\u{104A9}\\u{104B0}-\\u{104D3}\\u{104D8}-\\u{104FB}\\u{10500}-\\u{10527}\\u{10530}-\\u{10563}\\u{1056F}-\\u{1057A}\\u{1057C}-\\u{1058A}\\u{1058C}-\\u{10592}\\u{10594}\\u{10595}\\u{10597}-\\u{105A1}\\u{105A3}-\\u{105B1}\\u{105B3}-\\u{105B9}\\u{105BB}\\u{105BC}\\u{105C0}-\\u{105F3}\\u{10600}-\\u{10736}\\u{10740}-\\u{10755}\\u{10760}-\\u{10767}\\u{10780}-\\u{10785}\\u{10787}-\\u{107B0}\\u{107B2}-\\u{107BA}\\u{1091F}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10B39}-\\u{10B3F}\\u{10D24}-\\u{10D27}\\u{10D69}-\\u{10D6E}\\u{10EAB}\\u{10EAC}\\u{10EFC}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11000}-\\u{1104D}\\u{11052}-\\u{11075}\\u{1107F}-\\u{110C2}\\u{110CD}\\u{110D0}-\\u{110E8}\\u{110F0}-\\u{110F9}\\u{11100}-\\u{11134}\\u{11136}-\\u{11147}\\u{11150}-\\u{11176}\\u{11180}-\\u{111DF}\\u{111E1}-\\u{111F4}\\u{11200}-\\u{11211}\\u{11213}-\\u{11241}\\u{11280}-\\u{11286}\\u{11288}\\u{1128A}-\\u{1128D}\\u{1128F}-\\u{1129D}\\u{1129F}-\\u{112A9}\\u{112B0}-\\u{112EA}\\u{112F0}-\\u{112F9}\\u{11300}-\\u{11303}\\u{11305}-\\u{1130C}\\u{1130F}\\u{11310}\\u{11313}-\\u{11328}\\u{1132A}-\\u{11330}\\u{11332}\\u{11333}\\u{11335}-\\u{11339}\\u{1133B}-\\u{11344}\\u{11347}\\u{11348}\\u{1134B}-\\u{1134D}\\u{11350}\\u{11357}\\u{1135D}-\\u{11363}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{11380}-\\u{11389}\\u{1138B}\\u{1138E}\\u{11390}-\\u{113B5}\\u{113B7}-\\u{113C0}\\u{113C2}\\u{113C5}\\u{113C7}-\\u{113CA}\\u{113CC}-\\u{113D5}\\u{113D7}\\u{113D8}\\u{113E1}\\u{113E2}\\u{11400}-\\u{1145B}\\u{1145D}-\\u{11461}\\u{11480}-\\u{114C7}\\u{114D0}-\\u{114D9}\\u{11580}-\\u{115B5}\\u{115B8}-\\u{115DD}\\u{11600}-\\u{11644}\\u{11650}-\\u{11659}\\u{11660}-\\u{1166C}\\u{11680}-\\u{116B9}\\u{116C0}-\\u{116C9}\\u{116D0}-\\u{116E3}\\u{11700}-\\u{1171A}\\u{1171D}-\\u{1172B}\\u{11730}-\\u{11746}\\u{11800}-\\u{1183B}\\u{118A0}-\\u{118F2}\\u{118FF}-\\u{11906}\\u{11909}\\u{1190C}-\\u{11913}\\u{11915}\\u{11916}\\u{11918}-\\u{11935}\\u{11937}\\u{11938}\\u{1193B}-\\u{11946}\\u{11950}-\\u{11959}\\u{119A0}-\\u{119A7}\\u{119AA}-\\u{119D7}\\u{119DA}-\\u{119E4}\\u{11A00}-\\u{11A47}\\u{11A50}-\\u{11AA2}\\u{11AB0}-\\u{11AF8}\\u{11B00}-\\u{11B09}\\u{11BC0}-\\u{11BE1}\\u{11BF0}-\\u{11BF9}\\u{11C00}-\\u{11C08}\\u{11C0A}-\\u{11C36}\\u{11C38}-\\u{11C45}\\u{11C50}-\\u{11C6C}\\u{11C70}-\\u{11C8F}\\u{11C92}-\\u{11CA7}\\u{11CA9}-\\u{11CB6}\\u{11D00}-\\u{11D06}\\u{11D08}\\u{11D09}\\u{11D0B}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D47}\\u{11D50}-\\u{11D59}\\u{11D60}-\\u{11D65}\\u{11D67}\\u{11D68}\\u{11D6A}-\\u{11D8E}\\u{11D90}\\u{11D91}\\u{11D93}-\\u{11D98}\\u{11DA0}-\\u{11DA9}\\u{11EE0}-\\u{11EF8}\\u{11F00}-\\u{11F10}\\u{11F12}-\\u{11F3A}\\u{11F3E}-\\u{11F5A}\\u{11FB0}\\u{11FC0}-\\u{11FF1}\\u{11FFF}-\\u{12399}\\u{12400}-\\u{1246E}\\u{12470}-\\u{12474}\\u{12480}-\\u{12543}\\u{12F90}-\\u{12FF2}\\u{13000}-\\u{13455}\\u{13460}-\\u{143FA}\\u{14400}-\\u{14646}\\u{16100}-\\u{16139}\\u{16800}-\\u{16A38}\\u{16A40}-\\u{16A5E}\\u{16A60}-\\u{16A69}\\u{16A6E}-\\u{16ABE}\\u{16AC0}-\\u{16AC9}\\u{16AD0}-\\u{16AED}\\u{16AF0}-\\u{16AF5}\\u{16B00}-\\u{16B45}\\u{16B50}-\\u{16B59}\\u{16B5B}-\\u{16B61}\\u{16B63}-\\u{16B77}\\u{16B7D}-\\u{16B8F}\\u{16D40}-\\u{16D79}\\u{16E40}-\\u{16E9A}\\u{16F00}-\\u{16F4A}\\u{16F4F}-\\u{16F87}\\u{16F8F}-\\u{16F9F}\\u{16FE0}-\\u{16FE4}\\u{16FF0}\\u{16FF1}\\u{17000}-\\u{187F7}\\u{18800}-\\u{18CD5}\\u{18CFF}-\\u{18D08}\\u{1AFF0}-\\u{1AFF3}\\u{1AFF5}-\\u{1AFFB}\\u{1AFFD}\\u{1AFFE}\\u{1B000}-\\u{1B122}\\u{1B132}\\u{1B150}-\\u{1B152}\\u{1B155}\\u{1B164}-\\u{1B167}\\u{1B170}-\\u{1B2FB}\\u{1BC00}-\\u{1BC6A}\\u{1BC70}-\\u{1BC7C}\\u{1BC80}-\\u{1BC88}\\u{1BC90}-\\u{1BC99}\\u{1BC9C}-\\u{1BCA3}\\u{1CC00}-\\u{1CCF9}\\u{1CD00}-\\u{1CEB3}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1CF50}-\\u{1CFC3}\\u{1D000}-\\u{1D0F5}\\u{1D100}-\\u{1D126}\\u{1D129}-\\u{1D1EA}\\u{1D200}-\\u{1D245}\\u{1D2C0}-\\u{1D2D3}\\u{1D2E0}-\\u{1D2F3}\\u{1D300}-\\u{1D356}\\u{1D360}-\\u{1D378}\\u{1D400}-\\u{1D454}\\u{1D456}-\\u{1D49C}\\u{1D49E}\\u{1D49F}\\u{1D4A2}\\u{1D4A5}\\u{1D4A6}\\u{1D4A9}-\\u{1D4AC}\\u{1D4AE}-\\u{1D4B9}\\u{1D4BB}\\u{1D4BD}-\\u{1D4C3}\\u{1D4C5}-\\u{1D505}\\u{1D507}-\\u{1D50A}\\u{1D50D}-\\u{1D514}\\u{1D516}-\\u{1D51C}\\u{1D51E}-\\u{1D539}\\u{1D53B}-\\u{1D53E}\\u{1D540}-\\u{1D544}\\u{1D546}\\u{1D54A}-\\u{1D550}\\u{1D552}-\\u{1D6A5}\\u{1D6A8}-\\u{1D7CB}\\u{1D7CE}-\\u{1DA8B}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1DF00}-\\u{1DF1E}\\u{1DF25}-\\u{1DF2A}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E030}-\\u{1E06D}\\u{1E08F}\\u{1E100}-\\u{1E12C}\\u{1E130}-\\u{1E13D}\\u{1E140}-\\u{1E149}\\u{1E14E}\\u{1E14F}\\u{1E290}-\\u{1E2AE}\\u{1E2C0}-\\u{1E2F9}\\u{1E2FF}\\u{1E4D0}-\\u{1E4F9}\\u{1E5D0}-\\u{1E5FA}\\u{1E5FF}\\u{1E7E0}-\\u{1E7E6}\\u{1E7E8}-\\u{1E7EB}\\u{1E7ED}\\u{1E7EE}\\u{1E7F0}-\\u{1E7FE}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94A}\\u{1EEF0}\\u{1EEF1}\\u{1F000}-\\u{1F02B}\\u{1F030}-\\u{1F093}\\u{1F0A0}-\\u{1F0AE}\\u{1F0B1}-\\u{1F0BF}\\u{1F0C1}-\\u{1F0CF}\\u{1F0D1}-\\u{1F0F5}\\u{1F100}-\\u{1F1AD}\\u{1F1E6}-\\u{1F202}\\u{1F210}-\\u{1F23B}\\u{1F240}-\\u{1F248}\\u{1F250}\\u{1F251}\\u{1F260}-\\u{1F265}\\u{1F300}-\\u{1F6D7}\\u{1F6DC}-\\u{1F6EC}\\u{1F6F0}-\\u{1F6FC}\\u{1F700}-\\u{1F776}\\u{1F77B}-\\u{1F7D9}\\u{1F7E0}-\\u{1F7EB}\\u{1F7F0}\\u{1F800}-\\u{1F80B}\\u{1F810}-\\u{1F847}\\u{1F850}-\\u{1F859}\\u{1F860}-\\u{1F887}\\u{1F890}-\\u{1F8AD}\\u{1F8B0}-\\u{1F8BB}\\u{1F8C0}\\u{1F8C1}\\u{1F900}-\\u{1FA53}\\u{1FA60}-\\u{1FA6D}\\u{1FA70}-\\u{1FA7C}\\u{1FA80}-\\u{1FA89}\\u{1FA8F}-\\u{1FAC6}\\u{1FACE}-\\u{1FADC}\\u{1FADF}-\\u{1FAE9}\\u{1FAF0}-\\u{1FAF8}\\u{1FB00}-\\u{1FB92}\\u{1FB94}-\\u{1FBF9}\\u{20000}-\\u{2A6DF}\\u{2A700}-\\u{2B739}\\u{2B740}-\\u{2B81D}\\u{2B820}-\\u{2CEA1}\\u{2CEB0}-\\u{2EBE0}\\u{2EBF0}-\\u{2EE5D}\\u{2F800}-\\u{2FA1D}\\u{30000}-\\u{3134A}\\u{31350}-\\u{323AF}\\u{E0001}\\u{E0020}-\\u{E007F}\\u{E0100}-\\u{E01EF}\\u{F0000}-\\u{FFFFD}\\u{100000}-\\u{10FFFD}]*$/u;\nconst bidiS6 = /[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02BB-\\u02C1\\u02D0\\u02D1\\u02E0-\\u02E4\\u02EE\\u0370-\\u0373\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0482\\u048A-\\u052F\\u0531-\\u0556\\u0559-\\u0589\\u06F0-\\u06F9\\u0903-\\u0939\\u093B\\u093D-\\u0940\\u0949-\\u094C\\u094E-\\u0950\\u0958-\\u0961\\u0964-\\u0980\\u0982\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09FA\\u09FC\\u09FD\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A40\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A76\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AF0\\u0AF9\\u0B02\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0BE6-\\u0BF2\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C41-\\u0C44\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C77\\u0C7F\\u0C80\\u0C82-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1-\\u0CF3\\u0D02-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D4F\\u0D54-\\u0D61\\u0D66-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E4F-\\u0E5B\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00-\\u0F17\\u0F1A-\\u0F34\\u0F36\\u0F38\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F7F\\u0F85\\u0F88-\\u0F8C\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u1000-\\u102C\\u1031\\u1038\\u103B\\u103C\\u103F-\\u1057\\u105A-\\u105D\\u1061-\\u1070\\u1075-\\u1081\\u1083\\u1084\\u1087-\\u108C\\u108E-\\u109C\\u109E-\\u10C5\\u10C7\\u10CD\\u10D0-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1360-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u167F\\u1681-\\u169A\\u16A0-\\u16F8\\u1700-\\u1711\\u1715\\u171F-\\u1731\\u1734-\\u1736\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u17D4-\\u17DA\\u17DC\\u17E0-\\u17E9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A19\\u1A1A\\u1A1E-\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD\\u1B04-\\u1B33\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B4C\\u1B4E-\\u1B6A\\u1B74-\\u1B7F\\u1B82-\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BAE-\\u1BE5\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1BFC-\\u1C2B\\u1C34\\u1C35\\u1C3B-\\u1C49\\u1C4D-\\u1C8A\\u1C90-\\u1CBA\\u1CBD-\\u1CC7\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5-\\u1CF7\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200E\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u214F\\u2160-\\u2188\\u2336-\\u237A\\u2395\\u2488-\\u24E9\\u26AC\\u2800-\\u28FF\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u302E\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3190-\\u31BF\\u31F0-\\u321C\\u3220-\\u324F\\u3260-\\u327B\\u327F-\\u32B0\\u32C0-\\u32CB\\u32D0-\\u3376\\u337B-\\u33DD\\u33E0-\\u33FE\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA680-\\uA69D\\uA6A0-\\uA6EF\\uA6F2-\\uA6F7\\uA722-\\uA787\\uA789-\\uA7CD\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7DC\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA824\\uA827\\uA830-\\uA837\\uA840-\\uA873\\uA880-\\uA8C3\\uA8CE-\\uA8D9\\uA8F2-\\uA8FE\\uA900-\\uA925\\uA92E-\\uA946\\uA952\\uA953\\uA95F-\\uA97C\\uA983-\\uA9B2\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BE-\\uA9CD\\uA9CF-\\uA9D9\\uA9DE-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA7B\\uAA7D-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAAEB\\uAAEE-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB69\\uAB70-\\uABE4\\uABE6\\uABE7\\uABE9-\\uABEC\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uD800-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u{10000}-\\u{1000B}\\u{1000D}-\\u{10026}\\u{10028}-\\u{1003A}\\u{1003C}\\u{1003D}\\u{1003F}-\\u{1004D}\\u{10050}-\\u{1005D}\\u{10080}-\\u{100FA}\\u{10100}\\u{10102}\\u{10107}-\\u{10133}\\u{10137}-\\u{1013F}\\u{1018D}\\u{1018E}\\u{101D0}-\\u{101FC}\\u{10280}-\\u{1029C}\\u{102A0}-\\u{102D0}\\u{102E1}-\\u{102FB}\\u{10300}-\\u{10323}\\u{1032D}-\\u{1034A}\\u{10350}-\\u{10375}\\u{10380}-\\u{1039D}\\u{1039F}-\\u{103C3}\\u{103C8}-\\u{103D5}\\u{10400}-\\u{1049D}\\u{104A0}-\\u{104A9}\\u{104B0}-\\u{104D3}\\u{104D8}-\\u{104FB}\\u{10500}-\\u{10527}\\u{10530}-\\u{10563}\\u{1056F}-\\u{1057A}\\u{1057C}-\\u{1058A}\\u{1058C}-\\u{10592}\\u{10594}\\u{10595}\\u{10597}-\\u{105A1}\\u{105A3}-\\u{105B1}\\u{105B3}-\\u{105B9}\\u{105BB}\\u{105BC}\\u{105C0}-\\u{105F3}\\u{10600}-\\u{10736}\\u{10740}-\\u{10755}\\u{10760}-\\u{10767}\\u{10780}-\\u{10785}\\u{10787}-\\u{107B0}\\u{107B2}-\\u{107BA}\\u{11000}\\u{11002}-\\u{11037}\\u{11047}-\\u{1104D}\\u{11066}-\\u{1106F}\\u{11071}\\u{11072}\\u{11075}\\u{11082}-\\u{110B2}\\u{110B7}\\u{110B8}\\u{110BB}-\\u{110C1}\\u{110CD}\\u{110D0}-\\u{110E8}\\u{110F0}-\\u{110F9}\\u{11103}-\\u{11126}\\u{1112C}\\u{11136}-\\u{11147}\\u{11150}-\\u{11172}\\u{11174}-\\u{11176}\\u{11182}-\\u{111B5}\\u{111BF}-\\u{111C8}\\u{111CD}\\u{111CE}\\u{111D0}-\\u{111DF}\\u{111E1}-\\u{111F4}\\u{11200}-\\u{11211}\\u{11213}-\\u{1122E}\\u{11232}\\u{11233}\\u{11235}\\u{11238}-\\u{1123D}\\u{1123F}\\u{11240}\\u{11280}-\\u{11286}\\u{11288}\\u{1128A}-\\u{1128D}\\u{1128F}-\\u{1129D}\\u{1129F}-\\u{112A9}\\u{112B0}-\\u{112DE}\\u{112E0}-\\u{112E2}\\u{112F0}-\\u{112F9}\\u{11302}\\u{11303}\\u{11305}-\\u{1130C}\\u{1130F}\\u{11310}\\u{11313}-\\u{11328}\\u{1132A}-\\u{11330}\\u{11332}\\u{11333}\\u{11335}-\\u{11339}\\u{1133D}-\\u{1133F}\\u{11341}-\\u{11344}\\u{11347}\\u{11348}\\u{1134B}-\\u{1134D}\\u{11350}\\u{11357}\\u{1135D}-\\u{11363}\\u{11380}-\\u{11389}\\u{1138B}\\u{1138E}\\u{11390}-\\u{113B5}\\u{113B7}-\\u{113BA}\\u{113C2}\\u{113C5}\\u{113C7}-\\u{113CA}\\u{113CC}\\u{113CD}\\u{113CF}\\u{113D1}\\u{113D3}-\\u{113D5}\\u{113D7}\\u{113D8}\\u{11400}-\\u{11437}\\u{11440}\\u{11441}\\u{11445}\\u{11447}-\\u{1145B}\\u{1145D}\\u{1145F}-\\u{11461}\\u{11480}-\\u{114B2}\\u{114B9}\\u{114BB}-\\u{114BE}\\u{114C1}\\u{114C4}-\\u{114C7}\\u{114D0}-\\u{114D9}\\u{11580}-\\u{115B1}\\u{115B8}-\\u{115BB}\\u{115BE}\\u{115C1}-\\u{115DB}\\u{11600}-\\u{11632}\\u{1163B}\\u{1163C}\\u{1163E}\\u{11641}-\\u{11644}\\u{11650}-\\u{11659}\\u{11680}-\\u{116AA}\\u{116AC}\\u{116AE}\\u{116AF}\\u{116B6}\\u{116B8}\\u{116B9}\\u{116C0}-\\u{116C9}\\u{116D0}-\\u{116E3}\\u{11700}-\\u{1171A}\\u{1171E}\\u{11720}\\u{11721}\\u{11726}\\u{11730}-\\u{11746}\\u{11800}-\\u{1182E}\\u{11838}\\u{1183B}\\u{118A0}-\\u{118F2}\\u{118FF}-\\u{11906}\\u{11909}\\u{1190C}-\\u{11913}\\u{11915}\\u{11916}\\u{11918}-\\u{11935}\\u{11937}\\u{11938}\\u{1193D}\\u{1193F}-\\u{11942}\\u{11944}-\\u{11946}\\u{11950}-\\u{11959}\\u{119A0}-\\u{119A7}\\u{119AA}-\\u{119D3}\\u{119DC}-\\u{119DF}\\u{119E1}-\\u{119E4}\\u{11A00}\\u{11A07}\\u{11A08}\\u{11A0B}-\\u{11A32}\\u{11A39}\\u{11A3A}\\u{11A3F}-\\u{11A46}\\u{11A50}\\u{11A57}\\u{11A58}\\u{11A5C}-\\u{11A89}\\u{11A97}\\u{11A9A}-\\u{11AA2}\\u{11AB0}-\\u{11AF8}\\u{11B00}-\\u{11B09}\\u{11BC0}-\\u{11BE1}\\u{11BF0}-\\u{11BF9}\\u{11C00}-\\u{11C08}\\u{11C0A}-\\u{11C2F}\\u{11C3E}-\\u{11C45}\\u{11C50}-\\u{11C6C}\\u{11C70}-\\u{11C8F}\\u{11CA9}\\u{11CB1}\\u{11CB4}\\u{11D00}-\\u{11D06}\\u{11D08}\\u{11D09}\\u{11D0B}-\\u{11D30}\\u{11D46}\\u{11D50}-\\u{11D59}\\u{11D60}-\\u{11D65}\\u{11D67}\\u{11D68}\\u{11D6A}-\\u{11D8E}\\u{11D93}\\u{11D94}\\u{11D96}\\u{11D98}\\u{11DA0}-\\u{11DA9}\\u{11EE0}-\\u{11EF2}\\u{11EF5}-\\u{11EF8}\\u{11F02}-\\u{11F10}\\u{11F12}-\\u{11F35}\\u{11F3E}\\u{11F3F}\\u{11F41}\\u{11F43}-\\u{11F59}\\u{11FB0}\\u{11FC0}-\\u{11FD4}\\u{11FFF}-\\u{12399}\\u{12400}-\\u{1246E}\\u{12470}-\\u{12474}\\u{12480}-\\u{12543}\\u{12F90}-\\u{12FF2}\\u{13000}-\\u{1343F}\\u{13441}-\\u{13446}\\u{13460}-\\u{143FA}\\u{14400}-\\u{14646}\\u{16100}-\\u{1611D}\\u{1612A}-\\u{1612C}\\u{16130}-\\u{16139}\\u{16800}-\\u{16A38}\\u{16A40}-\\u{16A5E}\\u{16A60}-\\u{16A69}\\u{16A6E}-\\u{16ABE}\\u{16AC0}-\\u{16AC9}\\u{16AD0}-\\u{16AED}\\u{16AF5}\\u{16B00}-\\u{16B2F}\\u{16B37}-\\u{16B45}\\u{16B50}-\\u{16B59}\\u{16B5B}-\\u{16B61}\\u{16B63}-\\u{16B77}\\u{16B7D}-\\u{16B8F}\\u{16D40}-\\u{16D79}\\u{16E40}-\\u{16E9A}\\u{16F00}-\\u{16F4A}\\u{16F50}-\\u{16F87}\\u{16F93}-\\u{16F9F}\\u{16FE0}\\u{16FE1}\\u{16FE3}\\u{16FF0}\\u{16FF1}\\u{17000}-\\u{187F7}\\u{18800}-\\u{18CD5}\\u{18CFF}-\\u{18D08}\\u{1AFF0}-\\u{1AFF3}\\u{1AFF5}-\\u{1AFFB}\\u{1AFFD}\\u{1AFFE}\\u{1B000}-\\u{1B122}\\u{1B132}\\u{1B150}-\\u{1B152}\\u{1B155}\\u{1B164}-\\u{1B167}\\u{1B170}-\\u{1B2FB}\\u{1BC00}-\\u{1BC6A}\\u{1BC70}-\\u{1BC7C}\\u{1BC80}-\\u{1BC88}\\u{1BC90}-\\u{1BC99}\\u{1BC9C}\\u{1BC9F}\\u{1CCD6}-\\u{1CCF9}\\u{1CF50}-\\u{1CFC3}\\u{1D000}-\\u{1D0F5}\\u{1D100}-\\u{1D126}\\u{1D129}-\\u{1D166}\\u{1D16A}-\\u{1D172}\\u{1D183}\\u{1D184}\\u{1D18C}-\\u{1D1A9}\\u{1D1AE}-\\u{1D1E8}\\u{1D2C0}-\\u{1D2D3}\\u{1D2E0}-\\u{1D2F3}\\u{1D360}-\\u{1D378}\\u{1D400}-\\u{1D454}\\u{1D456}-\\u{1D49C}\\u{1D49E}\\u{1D49F}\\u{1D4A2}\\u{1D4A5}\\u{1D4A6}\\u{1D4A9}-\\u{1D4AC}\\u{1D4AE}-\\u{1D4B9}\\u{1D4BB}\\u{1D4BD}-\\u{1D4C3}\\u{1D4C5}-\\u{1D505}\\u{1D507}-\\u{1D50A}\\u{1D50D}-\\u{1D514}\\u{1D516}-\\u{1D51C}\\u{1D51E}-\\u{1D539}\\u{1D53B}-\\u{1D53E}\\u{1D540}-\\u{1D544}\\u{1D546}\\u{1D54A}-\\u{1D550}\\u{1D552}-\\u{1D6A5}\\u{1D6A8}-\\u{1D6C0}\\u{1D6C2}-\\u{1D6DA}\\u{1D6DC}-\\u{1D6FA}\\u{1D6FC}-\\u{1D714}\\u{1D716}-\\u{1D734}\\u{1D736}-\\u{1D74E}\\u{1D750}-\\u{1D76E}\\u{1D770}-\\u{1D788}\\u{1D78A}-\\u{1D7A8}\\u{1D7AA}-\\u{1D7C2}\\u{1D7C4}-\\u{1D7CB}\\u{1D7CE}-\\u{1D9FF}\\u{1DA37}-\\u{1DA3A}\\u{1DA6D}-\\u{1DA74}\\u{1DA76}-\\u{1DA83}\\u{1DA85}-\\u{1DA8B}\\u{1DF00}-\\u{1DF1E}\\u{1DF25}-\\u{1DF2A}\\u{1E030}-\\u{1E06D}\\u{1E100}-\\u{1E12C}\\u{1E137}-\\u{1E13D}\\u{1E140}-\\u{1E149}\\u{1E14E}\\u{1E14F}\\u{1E290}-\\u{1E2AD}\\u{1E2C0}-\\u{1E2EB}\\u{1E2F0}-\\u{1E2F9}\\u{1E4D0}-\\u{1E4EB}\\u{1E4F0}-\\u{1E4F9}\\u{1E5D0}-\\u{1E5ED}\\u{1E5F0}-\\u{1E5FA}\\u{1E5FF}\\u{1E7E0}-\\u{1E7E6}\\u{1E7E8}-\\u{1E7EB}\\u{1E7ED}\\u{1E7EE}\\u{1E7F0}-\\u{1E7FE}\\u{1F100}-\\u{1F10A}\\u{1F110}-\\u{1F12E}\\u{1F130}-\\u{1F169}\\u{1F170}-\\u{1F1AC}\\u{1F1E6}-\\u{1F202}\\u{1F210}-\\u{1F23B}\\u{1F240}-\\u{1F248}\\u{1F250}\\u{1F251}\\u{1FBF0}-\\u{1FBF9}\\u{20000}-\\u{2A6DF}\\u{2A700}-\\u{2B739}\\u{2B740}-\\u{2B81D}\\u{2B820}-\\u{2CEA1}\\u{2CEB0}-\\u{2EBE0}\\u{2EBF0}-\\u{2EE5D}\\u{2F800}-\\u{2FA1D}\\u{30000}-\\u{3134A}\\u{31350}-\\u{323AF}\\u{F0000}-\\u{FFFFD}\\u{100000}-\\u{10FFFD}][\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0897-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10D69}-\\u{10D6D}\\u{10EAB}\\u{10EAC}\\u{10EFC}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11001}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{113BB}-\\u{113C0}\\u{113CE}\\u{113D0}\\u{113D2}\\u{113E1}\\u{113E2}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A06}\\u{11A09}\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{11F5A}\\u{13440}\\u{13447}-\\u{13455}\\u{1611E}-\\u{16129}\\u{1612D}-\\u{1612F}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D17B}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E5EE}\\u{1E5EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94A}\\u{E0100}-\\u{E01EF}]*$/u;\n\nmodule.exports = {\n    combiningMarks,\n  combiningClassVirama,\n  validZWNJ,\n  bidiDomain,\n  bidiS1LTR,\n  bidiS1RTL,\n  bidiS2,\n  bidiS3,\n  bidiS4EN,\n  bidiS4AN,\n  bidiS5,\n  bidiS6\n  };\n","\"use strict\";\n\nmodule.exports.STATUS_MAPPING = {\n  mapped: 1,\n  valid: 2,\n  disallowed: 3,\n  deviation: 6,\n  ignored: 7\n};\n","\"use strict\";\n\nfunction makeException(ErrorType, message, options) {\n  if (options.globals) {\n    ErrorType = options.globals[ErrorType.name];\n  }\n  return new ErrorType(`${options.context ? options.context : \"Value\"} ${message}.`);\n}\n\nfunction toNumber(value, options) {\n  if (typeof value === \"bigint\") {\n    throw makeException(TypeError, \"is a BigInt which cannot be converted to a number\", options);\n  }\n  if (!options.globals) {\n    return Number(value);\n  }\n  return options.globals.Number(value);\n}\n\n// Round x to the nearest integer, choosing the even integer if it lies halfway between two.\nfunction evenRound(x) {\n  // There are four cases for numbers with fractional part being .5:\n  //\n  // case |     x     | floor(x) | round(x) | expected | x <> 0 | x % 1 | x & 1 |   example\n  //   1  |  2n + 0.5 |  2n      |  2n + 1  |  2n      |   >    |  0.5  |   0   |  0.5 ->  0\n  //   2  |  2n + 1.5 |  2n + 1  |  2n + 2  |  2n + 2  |   >    |  0.5  |   1   |  1.5 ->  2\n  //   3  | -2n - 0.5 | -2n - 1  | -2n      | -2n      |   <    | -0.5  |   0   | -0.5 ->  0\n  //   4  | -2n - 1.5 | -2n - 2  | -2n - 1  | -2n - 2  |   <    | -0.5  |   1   | -1.5 -> -2\n  // (where n is a non-negative integer)\n  //\n  // Branch here for cases 1 and 4\n  if ((x > 0 && (x % 1) === +0.5 && (x & 1) === 0) ||\n        (x < 0 && (x % 1) === -0.5 && (x & 1) === 1)) {\n    return censorNegativeZero(Math.floor(x));\n  }\n\n  return censorNegativeZero(Math.round(x));\n}\n\nfunction integerPart(n) {\n  return censorNegativeZero(Math.trunc(n));\n}\n\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n}\n\nfunction modulo(x, y) {\n  // https://tc39.github.io/ecma262/#eqn-modulo\n  // Note that http://stackoverflow.com/a/4467559/3191 does NOT work for large modulos\n  const signMightNotMatch = x % y;\n  if (sign(y) !== sign(signMightNotMatch)) {\n    return signMightNotMatch + y;\n  }\n  return signMightNotMatch;\n}\n\nfunction censorNegativeZero(x) {\n  return x === 0 ? 0 : x;\n}\n\nfunction createIntegerConversion(bitLength, { unsigned }) {\n  let lowerBound, upperBound;\n  if (unsigned) {\n    lowerBound = 0;\n    upperBound = 2 ** bitLength - 1;\n  } else {\n    lowerBound = -(2 ** (bitLength - 1));\n    upperBound = 2 ** (bitLength - 1) - 1;\n  }\n\n  const twoToTheBitLength = 2 ** bitLength;\n  const twoToOneLessThanTheBitLength = 2 ** (bitLength - 1);\n\n  return (value, options = {}) => {\n    let x = toNumber(value, options);\n    x = censorNegativeZero(x);\n\n    if (options.enforceRange) {\n      if (!Number.isFinite(x)) {\n        throw makeException(TypeError, \"is not a finite number\", options);\n      }\n\n      x = integerPart(x);\n\n      if (x < lowerBound || x > upperBound) {\n        throw makeException(\n          TypeError,\n          `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`,\n          options\n        );\n      }\n\n      return x;\n    }\n\n    if (!Number.isNaN(x) && options.clamp) {\n      x = Math.min(Math.max(x, lowerBound), upperBound);\n      x = evenRound(x);\n      return x;\n    }\n\n    if (!Number.isFinite(x) || x === 0) {\n      return 0;\n    }\n    x = integerPart(x);\n\n    // Math.pow(2, 64) is not accurately representable in JavaScript, so try to avoid these per-spec operations if\n    // possible. Hopefully it's an optimization for the non-64-bitLength cases too.\n    if (x >= lowerBound && x <= upperBound) {\n      return x;\n    }\n\n    // These will not work great for bitLength of 64, but oh well. See the README for more details.\n    x = modulo(x, twoToTheBitLength);\n    if (!unsigned && x >= twoToOneLessThanTheBitLength) {\n      return x - twoToTheBitLength;\n    }\n    return x;\n  };\n}\n\nfunction createLongLongConversion(bitLength, { unsigned }) {\n  const upperBound = Number.MAX_SAFE_INTEGER;\n  const lowerBound = unsigned ? 0 : Number.MIN_SAFE_INTEGER;\n  const asBigIntN = unsigned ? BigInt.asUintN : BigInt.asIntN;\n\n  return (value, options = {}) => {\n    let x = toNumber(value, options);\n    x = censorNegativeZero(x);\n\n    if (options.enforceRange) {\n      if (!Number.isFinite(x)) {\n        throw makeException(TypeError, \"is not a finite number\", options);\n      }\n\n      x = integerPart(x);\n\n      if (x < lowerBound || x > upperBound) {\n        throw makeException(\n          TypeError,\n          `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`,\n          options\n        );\n      }\n\n      return x;\n    }\n\n    if (!Number.isNaN(x) && options.clamp) {\n      x = Math.min(Math.max(x, lowerBound), upperBound);\n      x = evenRound(x);\n      return x;\n    }\n\n    if (!Number.isFinite(x) || x === 0) {\n      return 0;\n    }\n\n    let xBigInt = BigInt(integerPart(x));\n    xBigInt = asBigIntN(bitLength, xBigInt);\n    return Number(xBigInt);\n  };\n}\n\nexports.any = value => {\n  return value;\n};\n\nexports.undefined = () => {\n  return undefined;\n};\n\nexports.boolean = value => {\n  return Boolean(value);\n};\n\nexports.byte = createIntegerConversion(8, { unsigned: false });\nexports.octet = createIntegerConversion(8, { unsigned: true });\n\nexports.short = createIntegerConversion(16, { unsigned: false });\nexports[\"unsigned short\"] = createIntegerConversion(16, { unsigned: true });\n\nexports.long = createIntegerConversion(32, { unsigned: false });\nexports[\"unsigned long\"] = createIntegerConversion(32, { unsigned: true });\n\nexports[\"long long\"] = createLongLongConversion(64, { unsigned: false });\nexports[\"unsigned long long\"] = createLongLongConversion(64, { unsigned: true });\n\nexports.double = (value, options = {}) => {\n  const x = toNumber(value, options);\n\n  if (!Number.isFinite(x)) {\n    throw makeException(TypeError, \"is not a finite floating-point value\", options);\n  }\n\n  return x;\n};\n\nexports[\"unrestricted double\"] = (value, options = {}) => {\n  const x = toNumber(value, options);\n\n  return x;\n};\n\nexports.float = (value, options = {}) => {\n  const x = toNumber(value, options);\n\n  if (!Number.isFinite(x)) {\n    throw makeException(TypeError, \"is not a finite floating-point value\", options);\n  }\n\n  if (Object.is(x, -0)) {\n    return x;\n  }\n\n  const y = Math.fround(x);\n\n  if (!Number.isFinite(y)) {\n    throw makeException(TypeError, \"is outside the range of a single-precision floating-point value\", options);\n  }\n\n  return y;\n};\n\nexports[\"unrestricted float\"] = (value, options = {}) => {\n  const x = toNumber(value, options);\n\n  if (isNaN(x)) {\n    return x;\n  }\n\n  if (Object.is(x, -0)) {\n    return x;\n  }\n\n  return Math.fround(x);\n};\n\nexports.DOMString = (value, options = {}) => {\n  if (options.treatNullAsEmptyString && value === null) {\n    return \"\";\n  }\n\n  if (typeof value === \"symbol\") {\n    throw makeException(TypeError, \"is a symbol, which cannot be converted to a string\", options);\n  }\n\n  const StringCtor = options.globals ? options.globals.String : String;\n  return StringCtor(value);\n};\n\nexports.ByteString = (value, options = {}) => {\n  const x = exports.DOMString(value, options);\n  let c;\n  for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {\n    if (c > 255) {\n      throw makeException(TypeError, \"is not a valid ByteString\", options);\n    }\n  }\n\n  return x;\n};\n\nexports.USVString = (value, options = {}) => {\n  const S = exports.DOMString(value, options);\n  const n = S.length;\n  const U = [];\n  for (let i = 0; i < n; ++i) {\n    const c = S.charCodeAt(i);\n    if (c < 0xD800 || c > 0xDFFF) {\n      U.push(String.fromCodePoint(c));\n    } else if (0xDC00 <= c && c <= 0xDFFF) {\n      U.push(String.fromCodePoint(0xFFFD));\n    } else if (i === n - 1) {\n      U.push(String.fromCodePoint(0xFFFD));\n    } else {\n      const d = S.charCodeAt(i + 1);\n      if (0xDC00 <= d && d <= 0xDFFF) {\n        const a = c & 0x3FF;\n        const b = d & 0x3FF;\n        U.push(String.fromCodePoint((2 << 15) + ((2 << 9) * a) + b));\n        ++i;\n      } else {\n        U.push(String.fromCodePoint(0xFFFD));\n      }\n    }\n  }\n\n  return U.join(\"\");\n};\n\nexports.object = (value, options = {}) => {\n  if (value === null || (typeof value !== \"object\" && typeof value !== \"function\")) {\n    throw makeException(TypeError, \"is not an object\", options);\n  }\n\n  return value;\n};\n\nconst abByteLengthGetter =\n    Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get;\nconst sabByteLengthGetter =\n    typeof SharedArrayBuffer === \"function\" ?\n      Object.getOwnPropertyDescriptor(SharedArrayBuffer.prototype, \"byteLength\").get :\n      null;\n\nfunction isNonSharedArrayBuffer(value) {\n  try {\n    // This will throw on SharedArrayBuffers, but not detached ArrayBuffers.\n    // (The spec says it should throw, but the spec conflicts with implementations: https://github.com/tc39/ecma262/issues/678)\n    abByteLengthGetter.call(value);\n\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction isSharedArrayBuffer(value) {\n  try {\n    sabByteLengthGetter.call(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction isArrayBufferDetached(value) {\n  try {\n    // eslint-disable-next-line no-new\n    new Uint8Array(value);\n    return false;\n  } catch {\n    return true;\n  }\n}\n\nexports.ArrayBuffer = (value, options = {}) => {\n  if (!isNonSharedArrayBuffer(value)) {\n    if (options.allowShared && !isSharedArrayBuffer(value)) {\n      throw makeException(TypeError, \"is not an ArrayBuffer or SharedArrayBuffer\", options);\n    }\n    throw makeException(TypeError, \"is not an ArrayBuffer\", options);\n  }\n  if (isArrayBufferDetached(value)) {\n    throw makeException(TypeError, \"is a detached ArrayBuffer\", options);\n  }\n\n  return value;\n};\n\nconst dvByteLengthGetter =\n    Object.getOwnPropertyDescriptor(DataView.prototype, \"byteLength\").get;\nexports.DataView = (value, options = {}) => {\n  try {\n    dvByteLengthGetter.call(value);\n  } catch (e) {\n    throw makeException(TypeError, \"is not a DataView\", options);\n  }\n\n  if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n    throw makeException(TypeError, \"is backed by a SharedArrayBuffer, which is not allowed\", options);\n  }\n  if (isArrayBufferDetached(value.buffer)) {\n    throw makeException(TypeError, \"is backed by a detached ArrayBuffer\", options);\n  }\n\n  return value;\n};\n\n// Returns the unforgeable `TypedArray` constructor name or `undefined`,\n// if the `this` value isn't a valid `TypedArray` object.\n//\n// https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag\nconst typedArrayNameGetter = Object.getOwnPropertyDescriptor(\n  Object.getPrototypeOf(Uint8Array).prototype,\n  Symbol.toStringTag\n).get;\n[\n  Int8Array,\n  Int16Array,\n  Int32Array,\n  Uint8Array,\n  Uint16Array,\n  Uint32Array,\n  Uint8ClampedArray,\n  Float32Array,\n  Float64Array\n].forEach(func => {\n  const { name } = func;\n  const article = /^[AEIOU]/u.test(name) ? \"an\" : \"a\";\n  exports[name] = (value, options = {}) => {\n    if (!ArrayBuffer.isView(value) || typedArrayNameGetter.call(value) !== name) {\n      throw makeException(TypeError, `is not ${article} ${name} object`, options);\n    }\n    if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n      throw makeException(TypeError, \"is a view on a SharedArrayBuffer, which is not allowed\", options);\n    }\n    if (isArrayBufferDetached(value.buffer)) {\n      throw makeException(TypeError, \"is a view on a detached ArrayBuffer\", options);\n    }\n\n    return value;\n  };\n});\n\n// Common definitions\n\nexports.ArrayBufferView = (value, options = {}) => {\n  if (!ArrayBuffer.isView(value)) {\n    throw makeException(TypeError, \"is not a view on an ArrayBuffer or SharedArrayBuffer\", options);\n  }\n\n  if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n    throw makeException(TypeError, \"is a view on a SharedArrayBuffer, which is not allowed\", options);\n  }\n\n  if (isArrayBufferDetached(value.buffer)) {\n    throw makeException(TypeError, \"is a view on a detached ArrayBuffer\", options);\n  }\n  return value;\n};\n\nexports.BufferSource = (value, options = {}) => {\n  if (ArrayBuffer.isView(value)) {\n    if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n      throw makeException(TypeError, \"is a view on a SharedArrayBuffer, which is not allowed\", options);\n    }\n\n    if (isArrayBufferDetached(value.buffer)) {\n      throw makeException(TypeError, \"is a view on a detached ArrayBuffer\", options);\n    }\n    return value;\n  }\n\n  if (!options.allowShared && !isNonSharedArrayBuffer(value)) {\n    throw makeException(TypeError, \"is not an ArrayBuffer or a view on one\", options);\n  }\n  if (options.allowShared && !isSharedArrayBuffer(value) && !isNonSharedArrayBuffer(value)) {\n    throw makeException(TypeError, \"is not an ArrayBuffer, SharedArrayBuffer, or a view on one\", options);\n  }\n  if (isArrayBufferDetached(value)) {\n    throw makeException(TypeError, \"is a detached ArrayBuffer\", options);\n  }\n\n  return value;\n};\n\nexports.DOMTimeStamp = exports[\"unsigned long long\"];\n","\"use strict\";\n\nconst { URL, URLSearchParams } = require(\"./webidl2js-wrapper\");\nconst urlStateMachine = require(\"./lib/url-state-machine\");\nconst percentEncoding = require(\"./lib/percent-encoding\");\n\nconst sharedGlobalObject = { Array, Object, Promise, String, TypeError };\nURL.install(sharedGlobalObject, [\"Window\"]);\nURLSearchParams.install(sharedGlobalObject, [\"Window\"]);\n\nexports.URL = sharedGlobalObject.URL;\nexports.URLSearchParams = sharedGlobalObject.URLSearchParams;\n\nexports.parseURL = urlStateMachine.parseURL;\nexports.basicURLParse = urlStateMachine.basicURLParse;\nexports.serializeURL = urlStateMachine.serializeURL;\nexports.serializePath = urlStateMachine.serializePath;\nexports.serializeHost = urlStateMachine.serializeHost;\nexports.serializeInteger = urlStateMachine.serializeInteger;\nexports.serializeURLOrigin = urlStateMachine.serializeURLOrigin;\nexports.setTheUsername = urlStateMachine.setTheUsername;\nexports.setThePassword = urlStateMachine.setThePassword;\nexports.cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;\nexports.hasAnOpaquePath = urlStateMachine.hasAnOpaquePath;\n\nexports.percentDecodeString = percentEncoding.percentDecodeString;\nexports.percentDecodeBytes = percentEncoding.percentDecodeBytes;\n","\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (typeof value !== \"function\") {\n    throw new globalObject.TypeError(context + \" is not a function\");\n  }\n\n  function invokeTheCallbackFunction(...args) {\n    const thisArg = utils.tryWrapperForImpl(this);\n    let callResult;\n\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    callResult = Reflect.apply(value, thisArg, args);\n\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\n\n    return callResult;\n  }\n\n  invokeTheCallbackFunction.construct = (...args) => {\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    let callResult = Reflect.construct(value, args);\n\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\n\n    return callResult;\n  };\n\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n\n  return invokeTheCallbackFunction;\n};\n","\"use strict\";\nconst usm = require(\"./url-state-machine\");\nconst urlencoded = require(\"./urlencoded\");\nconst URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = class URLImpl {\n  // Unlike the spec, we duplicate some code between the constructor and canParse, because we want to give useful error\n  // messages in the constructor that distinguish between the different causes of failure.\n  constructor(globalObject, [url, base]) {\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n\n    this._url = parsedURL;\n\n    // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n    this._query = URLSearchParams.createImpl(globalObject, [query], { doNotStripQMark: true });\n    this._query._url = this;\n  }\n\n  static parse(globalObject, input, base) {\n    try {\n      return new URLImpl(globalObject, [input, base]);\n    } catch {\n      return null;\n    }\n  }\n\n  static canParse(url, base) {\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        return false;\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n    const { query } = parsedURL;\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencodedString(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return `${this._url.scheme}:`;\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(`${v}:`, { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n  }\n\n  set host(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    return usm.serializePath(this._url);\n  }\n\n  set pathname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return `?${this._url.query}`;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n    this._query._list = urlencoded.parseUrlencodedString(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return `#${this._url.fragment}`;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n","\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"URL\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'URL'.`);\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"URL\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class URL {\n    constructor(url) {\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to construct 'URL': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to construct 'URL': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to construct 'URL': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    toJSON() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'toJSON' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol].toJSON();\n    }\n\n    get href() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get href' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"href\"];\n    }\n\n    set href(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set href' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'href' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"href\"] = V;\n    }\n\n    toString() {\n      const esValue = this;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'toString' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"href\"];\n    }\n\n    get origin() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get origin' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"origin\"];\n    }\n\n    get protocol() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get protocol' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"protocol\"];\n    }\n\n    set protocol(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set protocol' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'protocol' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"protocol\"] = V;\n    }\n\n    get username() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get username' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"username\"];\n    }\n\n    set username(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set username' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'username' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"username\"] = V;\n    }\n\n    get password() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get password' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"password\"];\n    }\n\n    set password(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set password' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'password' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"password\"] = V;\n    }\n\n    get host() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get host' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"host\"];\n    }\n\n    set host(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set host' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'host' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"host\"] = V;\n    }\n\n    get hostname() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get hostname' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"hostname\"];\n    }\n\n    set hostname(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set hostname' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'hostname' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"hostname\"] = V;\n    }\n\n    get port() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get port' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"port\"];\n    }\n\n    set port(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set port' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'port' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"port\"] = V;\n    }\n\n    get pathname() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get pathname' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"pathname\"];\n    }\n\n    set pathname(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set pathname' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'pathname' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"pathname\"] = V;\n    }\n\n    get search() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get search' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"search\"];\n    }\n\n    set search(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set search' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'search' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"search\"] = V;\n    }\n\n    get searchParams() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get searchParams' called on an object that is not a valid instance of URL.\");\n      }\n\n      return utils.getSameObject(this, \"searchParams\", () => {\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"searchParams\"]);\n      });\n    }\n\n    get hash() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get hash' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"hash\"];\n    }\n\n    set hash(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set hash' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'hash' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"hash\"] = V;\n    }\n\n    static parse(url) {\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'parse' on 'URL': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'parse' on 'URL': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'parse' on 'URL': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(Impl.implementation.parse(globalObject, ...args));\n    }\n\n    static canParse(url) {\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'canParse' on 'URL': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'canParse' on 'URL': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'canParse' on 'URL': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return Impl.implementation.canParse(...args);\n    }\n  }\n  Object.defineProperties(URL.prototype, {\n    toJSON: { enumerable: true },\n    href: { enumerable: true },\n    toString: { enumerable: true },\n    origin: { enumerable: true },\n    protocol: { enumerable: true },\n    username: { enumerable: true },\n    password: { enumerable: true },\n    host: { enumerable: true },\n    hostname: { enumerable: true },\n    port: { enumerable: true },\n    pathname: { enumerable: true },\n    search: { enumerable: true },\n    searchParams: { enumerable: true },\n    hash: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"URL\", configurable: true }\n  });\n  Object.defineProperties(URL, { parse: { enumerable: true }, canParse: { enumerable: true } });\n  ctorRegistry[interfaceName] = URL;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: URL\n  });\n\n  if (globalNames.includes(\"Window\")) {\n    Object.defineProperty(globalObject, \"webkitURL\", {\n      configurable: true,\n      writable: true,\n      value: URL\n    });\n  }\n};\n\nconst Impl = require(\"./URL-impl.js\");\n","\"use strict\";\nconst urlencoded = require(\"./urlencoded\");\n\nexports.implementation = class URLSearchParamsImpl {\n  constructor(globalObject, constructorArgs, { doNotStripQMark = false }) {\n    let init = constructorArgs[0];\n    this._list = [];\n    this._url = null;\n\n    if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n      init = init.slice(1);\n    }\n\n    if (Array.isArray(init)) {\n      for (const pair of init) {\n        if (pair.length !== 2) {\n          throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" +\n                              \"contain exactly two elements.\");\n        }\n        this._list.push([pair[0], pair[1]]);\n      }\n    } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n      for (const name of Object.keys(init)) {\n        const value = init[name];\n        this._list.push([name, value]);\n      }\n    } else {\n      this._list = urlencoded.parseUrlencodedString(init);\n    }\n  }\n\n  _updateSteps() {\n    if (this._url !== null) {\n      let serializedQuery = urlencoded.serializeUrlencoded(this._list);\n      if (serializedQuery === \"\") {\n        serializedQuery = null;\n      }\n\n      this._url._url.query = serializedQuery;\n    }\n  }\n\n  get size() {\n    return this._list.length;\n  }\n\n  append(name, value) {\n    this._list.push([name, value]);\n    this._updateSteps();\n  }\n\n  delete(name, value) {\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name && (value === undefined || this._list[i][1] === value)) {\n        this._list.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n    this._updateSteps();\n  }\n\n  get(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return tuple[1];\n      }\n    }\n    return null;\n  }\n\n  getAll(name) {\n    const output = [];\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        output.push(tuple[1]);\n      }\n    }\n    return output;\n  }\n\n  has(name, value) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name && (value === undefined || tuple[1] === value)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  set(name, value) {\n    let found = false;\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        if (found) {\n          this._list.splice(i, 1);\n        } else {\n          found = true;\n          this._list[i][1] = value;\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n    if (!found) {\n      this._list.push([name, value]);\n    }\n    this._updateSteps();\n  }\n\n  sort() {\n    this._list.sort((a, b) => {\n      if (a[0] < b[0]) {\n        return -1;\n      }\n      if (a[0] > b[0]) {\n        return 1;\n      }\n      return 0;\n    });\n\n    this._updateSteps();\n  }\n\n  [Symbol.iterator]() {\n    return this._list[Symbol.iterator]();\n  }\n\n  toString() {\n    return urlencoded.serializeUrlencoded(this._list);\n  }\n};\n","\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst Function = require(\"./Function.js\");\nconst newObjectInRealm = utils.newObjectInRealm;\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"URLSearchParams\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'URLSearchParams'.`);\n};\n\nexports.createDefaultIterator = (globalObject, target, kind) => {\n  const ctorRegistry = globalObject[ctorRegistrySymbol];\n  const iteratorPrototype = ctorRegistry[\"URLSearchParams Iterator\"];\n  const iterator = Object.create(iteratorPrototype);\n  Object.defineProperty(iterator, utils.iterInternalSymbol, {\n    value: { target, kind, index: 0 },\n    configurable: true\n  });\n  return iterator;\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"URLSearchParams\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class URLSearchParams {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          if (utils.isObject(curArg)) {\n            if (curArg[Symbol.iterator] !== undefined) {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\n                  \"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \" is not an iterable object.\"\n                );\n              } else {\n                const V = [];\n                const tmp = curArg;\n                for (let nextItem of tmp) {\n                  if (!utils.isObject(nextItem)) {\n                    throw new globalObject.TypeError(\n                      \"Failed to construct 'URLSearchParams': parameter 1\" +\n                        \" sequence\" +\n                        \"'s element\" +\n                        \" is not an iterable object.\"\n                    );\n                  } else {\n                    const V = [];\n                    const tmp = nextItem;\n                    for (let nextItem of tmp) {\n                      nextItem = conversions[\"USVString\"](nextItem, {\n                        context:\n                          \"Failed to construct 'URLSearchParams': parameter 1\" +\n                          \" sequence\" +\n                          \"'s element\" +\n                          \"'s element\",\n                        globals: globalObject\n                      });\n\n                      V.push(nextItem);\n                    }\n                    nextItem = V;\n                  }\n\n                  V.push(nextItem);\n                }\n                curArg = V;\n              }\n            } else {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\n                  \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \" is not an object.\"\n                );\n              } else {\n                const result = Object.create(null);\n                for (const key of Reflect.ownKeys(curArg)) {\n                  const desc = Object.getOwnPropertyDescriptor(curArg, key);\n                  if (desc && desc.enumerable) {\n                    let typedKey = key;\n\n                    typedKey = conversions[\"USVString\"](typedKey, {\n                      context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s key\",\n                      globals: globalObject\n                    });\n\n                    let typedValue = curArg[key];\n\n                    typedValue = conversions[\"USVString\"](typedValue, {\n                      context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s value\",\n                      globals: globalObject\n                    });\n\n                    result[typedKey] = typedValue;\n                  }\n                }\n                curArg = result;\n              }\n            }\n          } else {\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to construct 'URLSearchParams': parameter 1\",\n              globals: globalObject\n            });\n          }\n        } else {\n          curArg = \"\";\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    append(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'append' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'URLSearchParams': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].append(...args));\n    }\n\n    delete(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'delete' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].delete(...args));\n    }\n\n    get(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'get' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].get(...args);\n    }\n\n    getAll(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'getAll' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'getAll' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));\n    }\n\n    has(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'has' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'has' on 'URLSearchParams': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return esValue[implSymbol].has(...args);\n    }\n\n    set(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'URLSearchParams': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].set(...args));\n    }\n\n    sort() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'sort' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      return utils.tryWrapperForImpl(esValue[implSymbol].sort());\n    }\n\n    toString() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'toString' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      return esValue[implSymbol].toString();\n    }\n\n    keys() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key\");\n    }\n\n    values() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\n          \"'values' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n      return exports.createDefaultIterator(globalObject, this, \"value\");\n    }\n\n    entries() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\n          \"'entries' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key+value\");\n    }\n\n    forEach(callback) {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\n          \"'forEach' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          \"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\"\n        );\n      }\n      callback = Function.convert(globalObject, callback, {\n        context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n      });\n      const thisArg = arguments[1];\n      let pairs = Array.from(this[implSymbol]);\n      let i = 0;\n      while (i < pairs.length) {\n        const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n        callback.call(thisArg, value, key, this);\n        pairs = Array.from(this[implSymbol]);\n        i++;\n      }\n    }\n\n    get size() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get size' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      return esValue[implSymbol][\"size\"];\n    }\n  }\n  Object.defineProperties(URLSearchParams.prototype, {\n    append: { enumerable: true },\n    delete: { enumerable: true },\n    get: { enumerable: true },\n    getAll: { enumerable: true },\n    has: { enumerable: true },\n    set: { enumerable: true },\n    sort: { enumerable: true },\n    toString: { enumerable: true },\n    keys: { enumerable: true },\n    values: { enumerable: true },\n    entries: { enumerable: true },\n    forEach: { enumerable: true },\n    size: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"URLSearchParams\", configurable: true },\n    [Symbol.iterator]: { value: URLSearchParams.prototype.entries, configurable: true, writable: true }\n  });\n  ctorRegistry[interfaceName] = URLSearchParams;\n\n  ctorRegistry[\"URLSearchParams Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], {\n    [Symbol.toStringTag]: {\n      configurable: true,\n      value: \"URLSearchParams Iterator\"\n    }\n  });\n  utils.define(ctorRegistry[\"URLSearchParams Iterator\"], {\n    next() {\n      const internal = this && this[utils.iterInternalSymbol];\n      if (!internal) {\n        throw new globalObject.TypeError(\"next() called on a value that is not a URLSearchParams iterator object\");\n      }\n\n      const { target, kind, index } = internal;\n      const values = Array.from(target[implSymbol]);\n      const len = values.length;\n      if (index >= len) {\n        return newObjectInRealm(globalObject, { value: undefined, done: true });\n      }\n\n      const pair = values[index];\n      internal.index = index + 1;\n      return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n    }\n  });\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: URLSearchParams\n  });\n};\n\nconst Impl = require(\"./URLSearchParams-impl.js\");\n","\"use strict\";\nconst utf8Encoder = new TextEncoder();\nconst utf8Decoder = new TextDecoder(\"utf-8\", { ignoreBOM: true });\n\nfunction utf8Encode(string) {\n  return utf8Encoder.encode(string);\n}\n\nfunction utf8DecodeWithoutBOM(bytes) {\n  return utf8Decoder.decode(bytes);\n}\n\nmodule.exports = {\n  utf8Encode,\n  utf8DecodeWithoutBOM\n};\n","\"use strict\";\n\n// Note that we take code points as JS numbers, not JS strings.\n\nfunction isASCIIDigit(c) {\n  return c >= 0x30 && c <= 0x39;\n}\n\nfunction isASCIIAlpha(c) {\n  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);\n}\n\nfunction isASCIIAlphanumeric(c) {\n  return isASCIIAlpha(c) || isASCIIDigit(c);\n}\n\nfunction isASCIIHex(c) {\n  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);\n}\n\nmodule.exports = {\n  isASCIIDigit,\n  isASCIIAlpha,\n  isASCIIAlphanumeric,\n  isASCIIHex\n};\n","\"use strict\";\nconst { isASCIIHex } = require(\"./infra\");\nconst { utf8Encode } = require(\"./encoding\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\n// https://url.spec.whatwg.org/#percent-encode\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = `0${hex}`;\n  }\n\n  return `%${hex}`;\n}\n\n// https://url.spec.whatwg.org/#percent-decode\nfunction percentDecodeBytes(input) {\n  const output = new Uint8Array(input.byteLength);\n  let outputIndex = 0;\n  for (let i = 0; i < input.byteLength; ++i) {\n    const byte = input[i];\n    if (byte !== 0x25) {\n      output[outputIndex++] = byte;\n    } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n      output[outputIndex++] = byte;\n    } else {\n      const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n      output[outputIndex++] = bytePoint;\n      i += 2;\n    }\n  }\n\n  return output.slice(0, outputIndex);\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\nfunction percentDecodeString(input) {\n  const bytes = utf8Encode(input);\n  return percentDecodeBytes(bytes);\n}\n\n// https://url.spec.whatwg.org/#c0-control-percent-encode-set\nfunction isC0ControlPercentEncode(c) {\n  return c <= 0x1F || c > 0x7E;\n}\n\n// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst extraFragmentPercentEncodeSet = new Set([p(\" \"), p(\"\\\"\"), p(\"<\"), p(\">\"), p(\"`\")]);\nfunction isFragmentPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#query-percent-encode-set\nconst extraQueryPercentEncodeSet = new Set([p(\" \"), p(\"\\\"\"), p(\"#\"), p(\"<\"), p(\">\")]);\nfunction isQueryPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#special-query-percent-encode-set\nfunction isSpecialQueryPercentEncode(c) {\n  return isQueryPercentEncode(c) || c === p(\"'\");\n}\n\n// https://url.spec.whatwg.org/#path-percent-encode-set\nconst extraPathPercentEncodeSet = new Set([p(\"?\"), p(\"`\"), p(\"{\"), p(\"}\"), p(\"^\")]);\nfunction isPathPercentEncode(c) {\n  return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#userinfo-percent-encode-set\nconst extraUserinfoPercentEncodeSet =\n  new Set([p(\"/\"), p(\":\"), p(\";\"), p(\"=\"), p(\"@\"), p(\"[\"), p(\"\\\\\"), p(\"]\"), p(\"|\")]);\nfunction isUserinfoPercentEncode(c) {\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#component-percent-encode-set\nconst extraComponentPercentEncodeSet = new Set([p(\"$\"), p(\"%\"), p(\"&\"), p(\"+\"), p(\",\")]);\nfunction isComponentPercentEncode(c) {\n  return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set\nconst extraURLEncodedPercentEncodeSet = new Set([p(\"!\"), p(\"'\"), p(\"(\"), p(\")\"), p(\"~\")]);\nfunction isURLEncodedPercentEncode(c) {\n  return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#utf-8-percent-encode\n// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.\n// The \"-Internal\" variant here has code points as JS strings. The external version used by other files has code points\n// as JS numbers, like the rest of the codebase.\nfunction utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {\n  const bytes = utf8Encode(codePoint);\n  let output = \"\";\n  for (const byte of bytes) {\n    // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.\n    if (!percentEncodePredicate(byte)) {\n      output += String.fromCharCode(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n\n  return output;\n}\n\nfunction utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {\n  return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);\n}\n\n// https://url.spec.whatwg.org/#string-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#string-utf-8-percent-encode\nfunction utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {\n  let output = \"\";\n  for (const codePoint of input) {\n    if (spaceAsPlus && codePoint === \" \") {\n      output += \"+\";\n    } else {\n      output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);\n    }\n  }\n  return output;\n}\n\nmodule.exports = {\n  isC0ControlPercentEncode,\n  isFragmentPercentEncode,\n  isQueryPercentEncode,\n  isSpecialQueryPercentEncode,\n  isPathPercentEncode,\n  isUserinfoPercentEncode,\n  isURLEncodedPercentEncode,\n  percentDecodeString,\n  percentDecodeBytes,\n  utf8PercentEncodeString,\n  utf8PercentEncodeCodePoint\n};\n","\"use strict\";\nconst tr46 = require(\"tr46\");\n\nconst infra = require(\"./infra\");\nconst { utf8DecodeWithoutBOM } = require(\"./encoding\");\nconst { percentDecodeString, utf8PercentEncodeCodePoint, utf8PercentEncodeString, isC0ControlPercentEncode,\n  isFragmentPercentEncode, isQueryPercentEncode, isSpecialQueryPercentEncode, isPathPercentEncode,\n  isUserinfoPercentEncode } = require(\"./percent-encoding\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\nconst specialSchemes = {\n  ftp: 21,\n  file: null,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\n\nconst failure = Symbol(\"failure\");\n\nfunction countSymbols(str) {\n  return [...str].length;\n}\n\nfunction at(input, idx) {\n  const c = input[idx];\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\n}\n\nfunction isSingleDot(buffer) {\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\n}\n\nfunction isDoubleDot(buffer) {\n  buffer = buffer.toLowerCase();\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\n}\n\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\n  return infra.isASCIIAlpha(cp1) && (cp2 === p(\":\") || cp2 === p(\"|\"));\n}\n\nfunction isWindowsDriveLetterString(string) {\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\n}\n\nfunction isNormalizedWindowsDriveLetterString(string) {\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\n}\n\nfunction containsForbiddenHostCodePoint(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\n}\n\nfunction containsForbiddenDomainCodePoint(string) {\n  return containsForbiddenHostCodePoint(string) || string.search(/[\\u0000-\\u001F]|%|\\u007F/u) !== -1;\n}\n\nfunction isSpecialScheme(scheme) {\n  return specialSchemes[scheme] !== undefined;\n}\n\nfunction isSpecial(url) {\n  return isSpecialScheme(url.scheme);\n}\n\nfunction isNotSpecial(url) {\n  return !isSpecialScheme(url.scheme);\n}\n\nfunction defaultPort(scheme) {\n  return specialSchemes[scheme];\n}\n\nfunction parseIPv4Number(input) {\n  if (input === \"\") {\n    return failure;\n  }\n\n  let R = 10;\n\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\n    input = input.substring(2);\n    R = 16;\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\n    input = input.substring(1);\n    R = 8;\n  }\n\n  if (input === \"\") {\n    return 0;\n  }\n\n  let regex = /[^0-7]/u;\n  if (R === 10) {\n    regex = /[^0-9]/u;\n  }\n  if (R === 16) {\n    regex = /[^0-9A-Fa-f]/u;\n  }\n\n  if (regex.test(input)) {\n    return failure;\n  }\n\n  return parseInt(input, R);\n}\n\nfunction parseIPv4(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length > 1) {\n      parts.pop();\n    }\n  }\n\n  if (parts.length > 4) {\n    return failure;\n  }\n\n  const numbers = [];\n  for (const part of parts) {\n    const n = parseIPv4Number(part);\n    if (n === failure) {\n      return failure;\n    }\n\n    numbers.push(n);\n  }\n\n  for (let i = 0; i < numbers.length - 1; ++i) {\n    if (numbers[i] > 255) {\n      return failure;\n    }\n  }\n  if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {\n    return failure;\n  }\n\n  let ipv4 = numbers.pop();\n  let counter = 0;\n\n  for (const n of numbers) {\n    ipv4 += n * 256 ** (3 - counter);\n    ++counter;\n  }\n\n  return ipv4;\n}\n\nfunction serializeIPv4(address) {\n  let output = \"\";\n  let n = address;\n\n  for (let i = 1; i <= 4; ++i) {\n    output = String(n % 256) + output;\n    if (i !== 4) {\n      output = `.${output}`;\n    }\n    n = Math.floor(n / 256);\n  }\n\n  return output;\n}\n\nfunction parseIPv6(input) {\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\n  let pieceIndex = 0;\n  let compress = null;\n  let pointer = 0;\n\n  input = Array.from(input, c => c.codePointAt(0));\n\n  if (input[pointer] === p(\":\")) {\n    if (input[pointer + 1] !== p(\":\")) {\n      return failure;\n    }\n\n    pointer += 2;\n    ++pieceIndex;\n    compress = pieceIndex;\n  }\n\n  while (pointer < input.length) {\n    if (pieceIndex === 8) {\n      return failure;\n    }\n\n    if (input[pointer] === p(\":\")) {\n      if (compress !== null) {\n        return failure;\n      }\n      ++pointer;\n      ++pieceIndex;\n      compress = pieceIndex;\n      continue;\n    }\n\n    let value = 0;\n    let length = 0;\n\n    while (length < 4 && infra.isASCIIHex(input[pointer])) {\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\n      ++pointer;\n      ++length;\n    }\n\n    if (input[pointer] === p(\".\")) {\n      if (length === 0) {\n        return failure;\n      }\n\n      pointer -= length;\n\n      if (pieceIndex > 6) {\n        return failure;\n      }\n\n      let numbersSeen = 0;\n\n      while (input[pointer] !== undefined) {\n        let ipv4Piece = null;\n\n        if (numbersSeen > 0) {\n          if (input[pointer] === p(\".\") && numbersSeen < 4) {\n            ++pointer;\n          } else {\n            return failure;\n          }\n        }\n\n        if (!infra.isASCIIDigit(input[pointer])) {\n          return failure;\n        }\n\n        while (infra.isASCIIDigit(input[pointer])) {\n          const number = parseInt(at(input, pointer));\n          if (ipv4Piece === null) {\n            ipv4Piece = number;\n          } else if (ipv4Piece === 0) {\n            return failure;\n          } else {\n            ipv4Piece = ipv4Piece * 10 + number;\n          }\n          if (ipv4Piece > 255) {\n            return failure;\n          }\n          ++pointer;\n        }\n\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\n\n        ++numbersSeen;\n\n        if (numbersSeen === 2 || numbersSeen === 4) {\n          ++pieceIndex;\n        }\n      }\n\n      if (numbersSeen !== 4) {\n        return failure;\n      }\n\n      break;\n    } else if (input[pointer] === p(\":\")) {\n      ++pointer;\n      if (input[pointer] === undefined) {\n        return failure;\n      }\n    } else if (input[pointer] !== undefined) {\n      return failure;\n    }\n\n    address[pieceIndex] = value;\n    ++pieceIndex;\n  }\n\n  if (compress !== null) {\n    let swaps = pieceIndex - compress;\n    pieceIndex = 7;\n    while (pieceIndex !== 0 && swaps > 0) {\n      const temp = address[compress + swaps - 1];\n      address[compress + swaps - 1] = address[pieceIndex];\n      address[pieceIndex] = temp;\n      --pieceIndex;\n      --swaps;\n    }\n  } else if (compress === null && pieceIndex !== 8) {\n    return failure;\n  }\n\n  return address;\n}\n\nfunction serializeIPv6(address) {\n  let output = \"\";\n  const compress = findTheIPv6AddressCompressedPieceIndex(address);\n  let ignore0 = false;\n\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\n    if (ignore0 && address[pieceIndex] === 0) {\n      continue;\n    } else if (ignore0) {\n      ignore0 = false;\n    }\n\n    if (compress === pieceIndex) {\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\n      output += separator;\n      ignore0 = true;\n      continue;\n    }\n\n    output += address[pieceIndex].toString(16);\n\n    if (pieceIndex !== 7) {\n      output += \":\";\n    }\n  }\n\n  return output;\n}\n\nfunction parseHost(input, isOpaque = false) {\n  if (input[0] === \"[\") {\n    if (input[input.length - 1] !== \"]\") {\n      return failure;\n    }\n\n    return parseIPv6(input.substring(1, input.length - 1));\n  }\n\n  if (isOpaque) {\n    return parseOpaqueHost(input);\n  }\n\n  const domain = utf8DecodeWithoutBOM(percentDecodeString(input));\n  const asciiDomain = domainToASCII(domain);\n  if (asciiDomain === failure) {\n    return failure;\n  }\n\n  if (endsInANumber(asciiDomain)) {\n    return parseIPv4(asciiDomain);\n  }\n\n  return asciiDomain;\n}\n\nfunction endsInANumber(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length === 1) {\n      return false;\n    }\n    parts.pop();\n  }\n\n  const last = parts[parts.length - 1];\n  if (parseIPv4Number(last) !== failure) {\n    return true;\n  }\n\n  if (/^[0-9]+$/u.test(last)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction parseOpaqueHost(input) {\n  if (containsForbiddenHostCodePoint(input)) {\n    return failure;\n  }\n\n  return utf8PercentEncodeString(input, isC0ControlPercentEncode);\n}\n\nfunction findTheIPv6AddressCompressedPieceIndex(address) {\n  let longestIndex = null;\n  let longestSize = 1; // only find elements > 1\n  let foundIndex = null;\n  let foundSize = 0;\n\n  for (let pieceIndex = 0; pieceIndex < address.length; ++pieceIndex) {\n    if (address[pieceIndex] !== 0) {\n      if (foundSize > longestSize) {\n        longestIndex = foundIndex;\n        longestSize = foundSize;\n      }\n\n      foundIndex = null;\n      foundSize = 0;\n    } else {\n      if (foundIndex === null) {\n        foundIndex = pieceIndex;\n      }\n      ++foundSize;\n    }\n  }\n\n  if (foundSize > longestSize) {\n    return foundIndex;\n  }\n\n  return longestIndex;\n}\n\nfunction serializeHost(host) {\n  if (typeof host === \"number\") {\n    return serializeIPv4(host);\n  }\n\n  // IPv6 serializer\n  if (host instanceof Array) {\n    return `[${serializeIPv6(host)}]`;\n  }\n\n  return host;\n}\n\nfunction domainToASCII(domain, beStrict = false) {\n  const result = tr46.toASCII(domain, {\n    checkHyphens: beStrict,\n    checkBidi: true,\n    checkJoiners: true,\n    useSTD3ASCIIRules: beStrict,\n    transitionalProcessing: false,\n    verifyDNSLength: beStrict,\n    ignoreInvalidPunycode: false\n  });\n  if (result === null) {\n    return failure;\n  }\n\n  if (!beStrict) {\n    if (result === \"\") {\n      return failure;\n    }\n    if (containsForbiddenDomainCodePoint(result)) {\n      return failure;\n    }\n  }\n  return result;\n}\n\nfunction trimControlChars(string) {\n  // Avoid using regexp because of this V8 bug: https://issues.chromium.org/issues/42204424\n\n  let start = 0;\n  let end = string.length;\n  for (; start < end; ++start) {\n    if (string.charCodeAt(start) > 0x20) {\n      break;\n    }\n  }\n  for (; end > start; --end) {\n    if (string.charCodeAt(end - 1) > 0x20) {\n      break;\n    }\n  }\n  return string.substring(start, end);\n}\n\nfunction trimTabAndNewline(url) {\n  return url.replace(/\\u0009|\\u000A|\\u000D/ug, \"\");\n}\n\nfunction shortenPath(url) {\n  const { path } = url;\n  if (path.length === 0) {\n    return;\n  }\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\n    return;\n  }\n\n  path.pop();\n}\n\nfunction includesCredentials(url) {\n  return url.username !== \"\" || url.password !== \"\";\n}\n\nfunction cannotHaveAUsernamePasswordPort(url) {\n  return url.host === null || url.host === \"\" || url.scheme === \"file\";\n}\n\nfunction hasAnOpaquePath(url) {\n  return typeof url.path === \"string\";\n}\n\nfunction isNormalizedWindowsDriveLetter(string) {\n  return /^[A-Za-z]:$/u.test(string);\n}\n\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\n  this.pointer = 0;\n  this.input = input;\n  this.base = base || null;\n  this.encodingOverride = encodingOverride || \"utf-8\";\n  this.stateOverride = stateOverride;\n  this.url = url;\n  this.failure = false;\n  this.parseError = false;\n\n  if (!this.url) {\n    this.url = {\n      scheme: \"\",\n      username: \"\",\n      password: \"\",\n      host: null,\n      port: null,\n      path: [],\n      query: null,\n      fragment: null\n    };\n\n    const res = trimControlChars(this.input);\n    if (res !== this.input) {\n      this.parseError = true;\n    }\n    this.input = res;\n  }\n\n  const res = trimTabAndNewline(this.input);\n  if (res !== this.input) {\n    this.parseError = true;\n  }\n  this.input = res;\n\n  this.state = stateOverride || \"scheme start\";\n\n  this.buffer = \"\";\n  this.atFlag = false;\n  this.arrFlag = false;\n  this.passwordTokenSeenFlag = false;\n\n  this.input = Array.from(this.input, c => c.codePointAt(0));\n\n  for (; this.pointer <= this.input.length; ++this.pointer) {\n    const c = this.input[this.pointer];\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\n\n    // exec state machine\n    const ret = this[`parse ${this.state}`](c, cStr);\n    if (!ret) {\n      break; // terminate algorithm\n    } else if (ret === failure) {\n      this.failure = true;\n      break;\n    }\n  }\n}\n\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\n  if (infra.isASCIIAlpha(c)) {\n    this.buffer += cStr.toLowerCase();\n    this.state = \"scheme\";\n  } else if (!this.stateOverride) {\n    this.state = \"no scheme\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\n  if (infra.isASCIIAlphanumeric(c) || c === p(\"+\") || c === p(\"-\") || c === p(\".\")) {\n    this.buffer += cStr.toLowerCase();\n  } else if (c === p(\":\")) {\n    if (this.stateOverride) {\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\n        return false;\n      }\n\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\n        return false;\n      }\n\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\n        return false;\n      }\n\n      if (this.url.scheme === \"file\" && this.url.host === \"\") {\n        return false;\n      }\n    }\n    this.url.scheme = this.buffer;\n    if (this.stateOverride) {\n      if (this.url.port === defaultPort(this.url.scheme)) {\n        this.url.port = null;\n      }\n      return false;\n    }\n    this.buffer = \"\";\n    if (this.url.scheme === \"file\") {\n      if (this.input[this.pointer + 1] !== p(\"/\") || this.input[this.pointer + 2] !== p(\"/\")) {\n        this.parseError = true;\n      }\n      this.state = \"file\";\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\n      this.state = \"special relative or authority\";\n    } else if (isSpecial(this.url)) {\n      this.state = \"special authority slashes\";\n    } else if (this.input[this.pointer + 1] === p(\"/\")) {\n      this.state = \"path or authority\";\n      ++this.pointer;\n    } else {\n      this.url.path = \"\";\n      this.state = \"opaque path\";\n    }\n  } else if (!this.stateOverride) {\n    this.buffer = \"\";\n    this.state = \"no scheme\";\n    this.pointer = -1;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\n  if (this.base === null || (hasAnOpaquePath(this.base) && c !== p(\"#\"))) {\n    return failure;\n  } else if (hasAnOpaquePath(this.base) && c === p(\"#\")) {\n    this.url.scheme = this.base.scheme;\n    this.url.path = this.base.path;\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (this.base.scheme === \"file\") {\n    this.state = \"file\";\n    --this.pointer;\n  } else {\n    this.state = \"relative\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\n  if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"relative\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\n  if (c === p(\"/\")) {\n    this.state = \"authority\";\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\n  this.url.scheme = this.base.scheme;\n  if (c === p(\"/\")) {\n    this.state = \"relative slash\";\n  } else if (isSpecial(this.url) && c === p(\"\\\\\")) {\n    this.parseError = true;\n    this.state = \"relative slash\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    if (c === p(\"?\")) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else if (!isNaN(c)) {\n      this.url.query = null;\n      this.url.path.pop();\n      this.state = \"path\";\n      --this.pointer;\n    }\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\n  if (isSpecial(this.url) && (c === p(\"/\") || c === p(\"\\\\\"))) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"special authority ignore slashes\";\n  } else if (c === p(\"/\")) {\n    this.state = \"authority\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\n  if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"special authority ignore slashes\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\n  if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n    this.state = \"authority\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\n  if (c === p(\"@\")) {\n    this.parseError = true;\n    if (this.atFlag) {\n      this.buffer = `%40${this.buffer}`;\n    }\n    this.atFlag = true;\n\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\n    const len = countSymbols(this.buffer);\n    for (let pointer = 0; pointer < len; ++pointer) {\n      const codePoint = this.buffer.codePointAt(pointer);\n\n      if (codePoint === p(\":\") && !this.passwordTokenSeenFlag) {\n        this.passwordTokenSeenFlag = true;\n        continue;\n      }\n      const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);\n      if (this.passwordTokenSeenFlag) {\n        this.url.password += encodedCodePoints;\n      } else {\n        this.url.username += encodedCodePoints;\n      }\n    }\n    this.buffer = \"\";\n  } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") ||\n             (isSpecial(this.url) && c === p(\"\\\\\"))) {\n    if (this.atFlag && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    this.pointer -= countSymbols(this.buffer) + 1;\n    this.buffer = \"\";\n    this.state = \"host\";\n  } else {\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse hostname\"] =\nURLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\n  if (this.stateOverride && this.url.scheme === \"file\") {\n    --this.pointer;\n    this.state = \"file host\";\n  } else if (c === p(\":\") && !this.arrFlag) {\n    if (this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n\n    if (this.stateOverride === \"hostname\") {\n      return false;\n    }\n\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"port\";\n  } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") ||\n             (isSpecial(this.url) && c === p(\"\\\\\"))) {\n    --this.pointer;\n    if (isSpecial(this.url) && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    } else if (this.stateOverride && this.buffer === \"\" &&\n               (includesCredentials(this.url) || this.url.port !== null)) {\n      this.parseError = true;\n      return false;\n    }\n\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"path start\";\n    if (this.stateOverride) {\n      return false;\n    }\n  } else {\n    if (c === p(\"[\")) {\n      this.arrFlag = true;\n    } else if (c === p(\"]\")) {\n      this.arrFlag = false;\n    }\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\n  if (infra.isASCIIDigit(c)) {\n    this.buffer += cStr;\n  } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") ||\n             (isSpecial(this.url) && c === p(\"\\\\\")) ||\n             this.stateOverride) {\n    if (this.buffer !== \"\") {\n      const port = parseInt(this.buffer);\n      if (port > 2 ** 16 - 1) {\n        this.parseError = true;\n        return failure;\n      }\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\n      this.buffer = \"\";\n    }\n    if (this.stateOverride) {\n      return false;\n    }\n    this.state = \"path start\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n\n  return true;\n};\n\nconst fileOtherwiseCodePoints = new Set([p(\"/\"), p(\"\\\\\"), p(\"?\"), p(\"#\")]);\n\nfunction startsWithWindowsDriveLetter(input, pointer) {\n  const length = input.length - pointer;\n  return length >= 2 &&\n    isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) &&\n    (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));\n}\n\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\n  this.url.scheme = \"file\";\n  this.url.host = \"\";\n\n  if (c === p(\"/\") || c === p(\"\\\\\")) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"file slash\";\n  } else if (this.base !== null && this.base.scheme === \"file\") {\n    this.url.host = this.base.host;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    if (c === p(\"?\")) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else if (!isNaN(c)) {\n      this.url.query = null;\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {\n        shortenPath(this.url);\n      } else {\n        this.parseError = true;\n        this.url.path = [];\n      }\n\n      this.state = \"path\";\n      --this.pointer;\n    }\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\n  if (c === p(\"/\") || c === p(\"\\\\\")) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"file host\";\n  } else {\n    if (this.base !== null && this.base.scheme === \"file\") {\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer) &&\n          isNormalizedWindowsDriveLetterString(this.base.path[0])) {\n        this.url.path.push(this.base.path[0]);\n      }\n      this.url.host = this.base.host;\n    }\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\n  if (isNaN(c) || c === p(\"/\") || c === p(\"\\\\\") || c === p(\"?\") || c === p(\"#\")) {\n    --this.pointer;\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\n      this.parseError = true;\n      this.state = \"path\";\n    } else if (this.buffer === \"\") {\n      this.url.host = \"\";\n      if (this.stateOverride) {\n        return false;\n      }\n      this.state = \"path start\";\n    } else {\n      let host = parseHost(this.buffer, isNotSpecial(this.url));\n      if (host === failure) {\n        return failure;\n      }\n      if (host === \"localhost\") {\n        host = \"\";\n      }\n      this.url.host = host;\n\n      if (this.stateOverride) {\n        return false;\n      }\n\n      this.buffer = \"\";\n      this.state = \"path start\";\n    }\n  } else {\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\n  if (isSpecial(this.url)) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"path\";\n\n    if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n      --this.pointer;\n    }\n  } else if (!this.stateOverride && c === p(\"?\")) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (!this.stateOverride && c === p(\"#\")) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (c !== undefined) {\n    this.state = \"path\";\n    if (c !== p(\"/\")) {\n      --this.pointer;\n    }\n  } else if (this.stateOverride && this.url.host === null) {\n    this.url.path.push(\"\");\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\n  if (isNaN(c) || c === p(\"/\") || (isSpecial(this.url) && c === p(\"\\\\\")) ||\n      (!this.stateOverride && (c === p(\"?\") || c === p(\"#\")))) {\n    if (isSpecial(this.url) && c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n\n    if (isDoubleDot(this.buffer)) {\n      shortenPath(this.url);\n      if (c !== p(\"/\") && !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n        this.url.path.push(\"\");\n      }\n    } else if (isSingleDot(this.buffer) && c !== p(\"/\") &&\n               !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n      this.url.path.push(\"\");\n    } else if (!isSingleDot(this.buffer)) {\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\n        this.buffer = `${this.buffer[0]}:`;\n      }\n      this.url.path.push(this.buffer);\n    }\n    this.buffer = \"\";\n    if (c === p(\"?\")) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    }\n    if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === p(\"%\") &&\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse opaque path\"] = function parseOpaquePath(c) {\n  if (c === p(\"?\")) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === p(\"#\")) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (c === p(\" \")) {\n    const remaining = this.input[this.pointer + 1];\n    if (remaining === p(\"?\") || remaining === p(\"#\")) {\n      this.url.path += \"%20\";\n    } else {\n      this.url.path += \" \";\n    }\n  } else {\n    // TODO: Add: not a URL code point\n    if (!isNaN(c) && c !== p(\"%\")) {\n      this.parseError = true;\n    }\n\n    if (c === p(\"%\") &&\n        (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n         !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    if (!isNaN(c)) {\n      this.url.path += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);\n    }\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\n  if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\n    this.encodingOverride = \"utf-8\";\n  }\n\n  if ((!this.stateOverride && c === p(\"#\")) || isNaN(c)) {\n    const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;\n    this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);\n\n    this.buffer = \"\";\n\n    if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else if (!isNaN(c)) {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === p(\"%\") &&\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\n  if (!isNaN(c)) {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === p(\"%\") &&\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);\n  }\n\n  return true;\n};\n\nfunction serializeURL(url, excludeFragment) {\n  let output = `${url.scheme}:`;\n  if (url.host !== null) {\n    output += \"//\";\n\n    if (url.username !== \"\" || url.password !== \"\") {\n      output += url.username;\n      if (url.password !== \"\") {\n        output += `:${url.password}`;\n      }\n      output += \"@\";\n    }\n\n    output += serializeHost(url.host);\n\n    if (url.port !== null) {\n      output += `:${url.port}`;\n    }\n  }\n\n  if (url.host === null && !hasAnOpaquePath(url) && url.path.length > 1 && url.path[0] === \"\") {\n    output += \"/.\";\n  }\n  output += serializePath(url);\n\n  if (url.query !== null) {\n    output += `?${url.query}`;\n  }\n\n  if (!excludeFragment && url.fragment !== null) {\n    output += `#${url.fragment}`;\n  }\n\n  return output;\n}\n\nfunction serializeOrigin(tuple) {\n  let result = `${tuple.scheme}://`;\n  result += serializeHost(tuple.host);\n\n  if (tuple.port !== null) {\n    result += `:${tuple.port}`;\n  }\n\n  return result;\n}\n\nfunction serializePath(url) {\n  if (hasAnOpaquePath(url)) {\n    return url.path;\n  }\n\n  let output = \"\";\n  for (const segment of url.path) {\n    output += `/${segment}`;\n  }\n  return output;\n}\n\nmodule.exports.serializeURL = serializeURL;\n\nmodule.exports.serializePath = serializePath;\n\nmodule.exports.serializeURLOrigin = function (url) {\n  // https://url.spec.whatwg.org/#concept-url-origin\n  switch (url.scheme) {\n    case \"blob\": {\n      const pathURL = module.exports.parseURL(serializePath(url));\n      if (pathURL === null) {\n        return \"null\";\n      }\n      if (pathURL.scheme !== \"http\" && pathURL.scheme !== \"https\") {\n        return \"null\";\n      }\n      return module.exports.serializeURLOrigin(pathURL);\n    }\n    case \"ftp\":\n    case \"http\":\n    case \"https\":\n    case \"ws\":\n    case \"wss\":\n      return serializeOrigin({\n        scheme: url.scheme,\n        host: url.host,\n        port: url.port\n      });\n    case \"file\":\n      // The spec says:\n      // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.\n      // Browsers tested so far:\n      // - Chrome says \"file://\", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.\n      //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586\n      // - Firefox says \"null\", but treats file: URLs as same-origin sometimes based on directory stuff; see\n      //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs\n      return \"null\";\n    default:\n      // serializing an opaque origin returns \"null\"\n      return \"null\";\n  }\n};\n\nmodule.exports.basicURLParse = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\n  if (usm.failure) {\n    return null;\n  }\n\n  return usm.url;\n};\n\nmodule.exports.setTheUsername = function (url, username) {\n  url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);\n};\n\nmodule.exports.setThePassword = function (url, password) {\n  url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);\n};\n\nmodule.exports.serializeHost = serializeHost;\n\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\n\nmodule.exports.hasAnOpaquePath = hasAnOpaquePath;\n\nmodule.exports.serializeInteger = function (integer) {\n  return String(integer);\n};\n\nmodule.exports.parseURL = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  // We don't handle blobs, so this just delegates:\n  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });\n};\n","\"use strict\";\nconst { utf8Encode, utf8DecodeWithoutBOM } = require(\"./encoding\");\nconst { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = require(\"./percent-encoding\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-parser\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, p(\"&\"));\n  const output = [];\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n\n    let name, value;\n    const indexOfEqual = bytes.indexOf(p(\"=\"));\n\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = new Uint8Array(0);\n    }\n\n    name = replaceByteInByteSequence(name, 0x2B, 0x20);\n    value = replaceByteInByteSequence(value, 0x2B, 0x20);\n\n    const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n    const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n\n    output.push([nameString, valueString]);\n  }\n  return output;\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-string-parser\nfunction parseUrlencodedString(input) {\n  return parseUrlencoded(utf8Encode(input));\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-serializer\nfunction serializeUrlencoded(tuples) {\n  // TODO: accept and use encoding argument\n\n  let output = \"\";\n  for (const [i, tuple] of tuples.entries()) {\n    const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n    const value = utf8PercentEncodeString(tuple[1], isURLEncodedPercentEncode, true);\n\n    if (i !== 0) {\n      output += \"&\";\n    }\n    output += `${name}=${value}`;\n  }\n  return output;\n}\n\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\n\nmodule.exports = {\n  parseUrlencodedString,\n  serializeUrlencoded\n};\n","\"use strict\";\n\n// Returns \"Type(value) is Object\" in ES terminology.\nfunction isObject(value) {\n  return (typeof value === \"object\" && value !== null) || typeof value === \"function\";\n}\n\nconst hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\n\n// Like `Object.assign`, but using `[[GetOwnProperty]]` and `[[DefineOwnProperty]]`\n// instead of `[[Get]]` and `[[Set]]` and only allowing objects\nfunction define(target, source) {\n  for (const key of Reflect.ownKeys(source)) {\n    const descriptor = Reflect.getOwnPropertyDescriptor(source, key);\n    if (descriptor && !Reflect.defineProperty(target, key, descriptor)) {\n      throw new TypeError(`Cannot redefine property: ${String(key)}`);\n    }\n  }\n}\n\nfunction newObjectInRealm(globalObject, object) {\n  const ctorRegistry = initCtorRegistry(globalObject);\n  return Object.defineProperties(\n    Object.create(ctorRegistry[\"%Object.prototype%\"]),\n    Object.getOwnPropertyDescriptors(object)\n  );\n}\n\nconst wrapperSymbol = Symbol(\"wrapper\");\nconst implSymbol = Symbol(\"impl\");\nconst sameObjectCaches = Symbol(\"SameObject caches\");\nconst ctorRegistrySymbol = Symbol.for(\"[webidl2js] constructor registry\");\n\nconst AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {}).prototype);\n\nfunction initCtorRegistry(globalObject) {\n  if (hasOwn(globalObject, ctorRegistrySymbol)) {\n    return globalObject[ctorRegistrySymbol];\n  }\n\n  const ctorRegistry = Object.create(null);\n\n  // In addition to registering all the WebIDL2JS-generated types in the constructor registry,\n  // we also register a few intrinsics that we make use of in generated code, since they are not\n  // easy to grab from the globalObject variable.\n  ctorRegistry[\"%Object.prototype%\"] = globalObject.Object.prototype;\n  ctorRegistry[\"%IteratorPrototype%\"] = Object.getPrototypeOf(\n    Object.getPrototypeOf(new globalObject.Array()[Symbol.iterator]())\n  );\n\n  try {\n    ctorRegistry[\"%AsyncIteratorPrototype%\"] = Object.getPrototypeOf(\n      Object.getPrototypeOf(\n        globalObject.eval(\"(async function* () {})\").prototype\n      )\n    );\n  } catch {\n    ctorRegistry[\"%AsyncIteratorPrototype%\"] = AsyncIteratorPrototype;\n  }\n\n  globalObject[ctorRegistrySymbol] = ctorRegistry;\n  return ctorRegistry;\n}\n\nfunction getSameObject(wrapper, prop, creator) {\n  if (!wrapper[sameObjectCaches]) {\n    wrapper[sameObjectCaches] = Object.create(null);\n  }\n\n  if (prop in wrapper[sameObjectCaches]) {\n    return wrapper[sameObjectCaches][prop];\n  }\n\n  wrapper[sameObjectCaches][prop] = creator();\n  return wrapper[sameObjectCaches][prop];\n}\n\nfunction wrapperForImpl(impl) {\n  return impl ? impl[wrapperSymbol] : null;\n}\n\nfunction implForWrapper(wrapper) {\n  return wrapper ? wrapper[implSymbol] : null;\n}\n\nfunction tryWrapperForImpl(impl) {\n  const wrapper = wrapperForImpl(impl);\n  return wrapper ? wrapper : impl;\n}\n\nfunction tryImplForWrapper(wrapper) {\n  const impl = implForWrapper(wrapper);\n  return impl ? impl : wrapper;\n}\n\nconst iterInternalSymbol = Symbol(\"internal\");\n\nfunction isArrayIndexPropName(P) {\n  if (typeof P !== \"string\") {\n    return false;\n  }\n  const i = P >>> 0;\n  if (i === 2 ** 32 - 1) {\n    return false;\n  }\n  const s = `${i}`;\n  if (P !== s) {\n    return false;\n  }\n  return true;\n}\n\nconst byteLengthGetter =\n    Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get;\nfunction isArrayBuffer(value) {\n  try {\n    byteLengthGetter.call(value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction iteratorResult([key, value], kind) {\n  let result;\n  switch (kind) {\n    case \"key\":\n      result = key;\n      break;\n    case \"value\":\n      result = value;\n      break;\n    case \"key+value\":\n      result = [key, value];\n      break;\n  }\n  return { value: result, done: false };\n}\n\nconst supportsPropertyIndex = Symbol(\"supports property index\");\nconst supportedPropertyIndices = Symbol(\"supported property indices\");\nconst supportsPropertyName = Symbol(\"supports property name\");\nconst supportedPropertyNames = Symbol(\"supported property names\");\nconst indexedGet = Symbol(\"indexed property get\");\nconst indexedSetNew = Symbol(\"indexed property set new\");\nconst indexedSetExisting = Symbol(\"indexed property set existing\");\nconst namedGet = Symbol(\"named property get\");\nconst namedSetNew = Symbol(\"named property set new\");\nconst namedSetExisting = Symbol(\"named property set existing\");\nconst namedDelete = Symbol(\"named property delete\");\n\nconst asyncIteratorNext = Symbol(\"async iterator get the next iteration result\");\nconst asyncIteratorReturn = Symbol(\"async iterator return steps\");\nconst asyncIteratorInit = Symbol(\"async iterator initialization steps\");\nconst asyncIteratorEOI = Symbol(\"async iterator end of iteration\");\n\nmodule.exports = exports = {\n  isObject,\n  hasOwn,\n  define,\n  newObjectInRealm,\n  wrapperSymbol,\n  implSymbol,\n  getSameObject,\n  ctorRegistrySymbol,\n  initCtorRegistry,\n  wrapperForImpl,\n  implForWrapper,\n  tryWrapperForImpl,\n  tryImplForWrapper,\n  iterInternalSymbol,\n  isArrayBuffer,\n  isArrayIndexPropName,\n  supportsPropertyIndex,\n  supportedPropertyIndices,\n  supportsPropertyName,\n  supportedPropertyNames,\n  indexedGet,\n  indexedSetNew,\n  indexedSetExisting,\n  namedGet,\n  namedSetNew,\n  namedSetExisting,\n  namedDelete,\n  asyncIteratorNext,\n  asyncIteratorReturn,\n  asyncIteratorInit,\n  asyncIteratorEOI,\n  iteratorResult\n};\n","\"use strict\";\n\nconst URL = require(\"./lib/URL\");\nconst URLSearchParams = require(\"./lib/URLSearchParams\");\n\nexports.URL = URL;\nexports.URLSearchParams = URLSearchParams;\n","const TypedArrayPrototypeGetSymbolToStringTag = (() => {\n    const g = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Uint8Array.prototype), Symbol.toStringTag).get;\n    return (value) => g.call(value);\n})();\nfunction isUint8Array(value) {\n    return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8Array';\n}\nfunction isAnyArrayBuffer(value) {\n    return (typeof value === 'object' &&\n        value != null &&\n        Symbol.toStringTag in value &&\n        (value[Symbol.toStringTag] === 'ArrayBuffer' ||\n            value[Symbol.toStringTag] === 'SharedArrayBuffer'));\n}\nfunction isRegExp(regexp) {\n    return regexp instanceof RegExp || Object.prototype.toString.call(regexp) === '[object RegExp]';\n}\nfunction isMap(value) {\n    return (typeof value === 'object' &&\n        value != null &&\n        Symbol.toStringTag in value &&\n        value[Symbol.toStringTag] === 'Map');\n}\nfunction isDate(date) {\n    return date instanceof Date || Object.prototype.toString.call(date) === '[object Date]';\n}\nfunction defaultInspect(x, _options) {\n    return JSON.stringify(x, (k, v) => {\n        if (typeof v === 'bigint') {\n            return { $numberLong: `${v}` };\n        }\n        else if (isMap(v)) {\n            return Object.fromEntries(v);\n        }\n        return v;\n    });\n}\nfunction getStylizeFunction(options) {\n    const stylizeExists = options != null &&\n        typeof options === 'object' &&\n        'stylize' in options &&\n        typeof options.stylize === 'function';\n    if (stylizeExists) {\n        return options.stylize;\n    }\n}\n\nconst BSON_MAJOR_VERSION = 6;\nconst BSON_VERSION_SYMBOL = Symbol.for('@@mdb.bson.version');\nconst BSON_INT32_MAX = 0x7fffffff;\nconst BSON_INT32_MIN = -2147483648;\nconst BSON_INT64_MAX = Math.pow(2, 63) - 1;\nconst BSON_INT64_MIN = -Math.pow(2, 63);\nconst JS_INT_MAX = Math.pow(2, 53);\nconst JS_INT_MIN = -Math.pow(2, 53);\nconst BSON_DATA_NUMBER = 1;\nconst BSON_DATA_STRING = 2;\nconst BSON_DATA_OBJECT = 3;\nconst BSON_DATA_ARRAY = 4;\nconst BSON_DATA_BINARY = 5;\nconst BSON_DATA_UNDEFINED = 6;\nconst BSON_DATA_OID = 7;\nconst BSON_DATA_BOOLEAN = 8;\nconst BSON_DATA_DATE = 9;\nconst BSON_DATA_NULL = 10;\nconst BSON_DATA_REGEXP = 11;\nconst BSON_DATA_DBPOINTER = 12;\nconst BSON_DATA_CODE = 13;\nconst BSON_DATA_SYMBOL = 14;\nconst BSON_DATA_CODE_W_SCOPE = 15;\nconst BSON_DATA_INT = 16;\nconst BSON_DATA_TIMESTAMP = 17;\nconst BSON_DATA_LONG = 18;\nconst BSON_DATA_DECIMAL128 = 19;\nconst BSON_DATA_MIN_KEY = 0xff;\nconst BSON_DATA_MAX_KEY = 0x7f;\nconst BSON_BINARY_SUBTYPE_DEFAULT = 0;\nconst BSON_BINARY_SUBTYPE_UUID_NEW = 4;\nconst BSONType = Object.freeze({\n    double: 1,\n    string: 2,\n    object: 3,\n    array: 4,\n    binData: 5,\n    undefined: 6,\n    objectId: 7,\n    bool: 8,\n    date: 9,\n    null: 10,\n    regex: 11,\n    dbPointer: 12,\n    javascript: 13,\n    symbol: 14,\n    javascriptWithScope: 15,\n    int: 16,\n    timestamp: 17,\n    long: 18,\n    decimal: 19,\n    minKey: -1,\n    maxKey: 127\n});\n\nclass BSONError extends Error {\n    get bsonError() {\n        return true;\n    }\n    get name() {\n        return 'BSONError';\n    }\n    constructor(message, options) {\n        super(message, options);\n    }\n    static isBSONError(value) {\n        return (value != null &&\n            typeof value === 'object' &&\n            'bsonError' in value &&\n            value.bsonError === true &&\n            'name' in value &&\n            'message' in value &&\n            'stack' in value);\n    }\n}\nclass BSONVersionError extends BSONError {\n    get name() {\n        return 'BSONVersionError';\n    }\n    constructor() {\n        super(`Unsupported BSON version, bson types must be from bson ${BSON_MAJOR_VERSION}.x.x`);\n    }\n}\nclass BSONRuntimeError extends BSONError {\n    get name() {\n        return 'BSONRuntimeError';\n    }\n    constructor(message) {\n        super(message);\n    }\n}\nclass BSONOffsetError extends BSONError {\n    get name() {\n        return 'BSONOffsetError';\n    }\n    constructor(message, offset, options) {\n        super(`${message}. offset: ${offset}`, options);\n        this.offset = offset;\n    }\n}\n\nlet TextDecoderFatal;\nlet TextDecoderNonFatal;\nfunction parseUtf8(buffer, start, end, fatal) {\n    if (fatal) {\n        TextDecoderFatal ??= new TextDecoder('utf8', { fatal: true });\n        try {\n            return TextDecoderFatal.decode(buffer.subarray(start, end));\n        }\n        catch (cause) {\n            throw new BSONError('Invalid UTF-8 string in BSON document', { cause });\n        }\n    }\n    TextDecoderNonFatal ??= new TextDecoder('utf8', { fatal: false });\n    return TextDecoderNonFatal.decode(buffer.subarray(start, end));\n}\n\nfunction tryReadBasicLatin(uint8array, start, end) {\n    if (uint8array.length === 0) {\n        return '';\n    }\n    const stringByteLength = end - start;\n    if (stringByteLength === 0) {\n        return '';\n    }\n    if (stringByteLength > 20) {\n        return null;\n    }\n    if (stringByteLength === 1 && uint8array[start] < 128) {\n        return String.fromCharCode(uint8array[start]);\n    }\n    if (stringByteLength === 2 && uint8array[start] < 128 && uint8array[start + 1] < 128) {\n        return String.fromCharCode(uint8array[start]) + String.fromCharCode(uint8array[start + 1]);\n    }\n    if (stringByteLength === 3 &&\n        uint8array[start] < 128 &&\n        uint8array[start + 1] < 128 &&\n        uint8array[start + 2] < 128) {\n        return (String.fromCharCode(uint8array[start]) +\n            String.fromCharCode(uint8array[start + 1]) +\n            String.fromCharCode(uint8array[start + 2]));\n    }\n    const latinBytes = [];\n    for (let i = start; i < end; i++) {\n        const byte = uint8array[i];\n        if (byte > 127) {\n            return null;\n        }\n        latinBytes.push(byte);\n    }\n    return String.fromCharCode(...latinBytes);\n}\nfunction tryWriteBasicLatin(destination, source, offset) {\n    if (source.length === 0)\n        return 0;\n    if (source.length > 25)\n        return null;\n    if (destination.length - offset < source.length)\n        return null;\n    for (let charOffset = 0, destinationOffset = offset; charOffset < source.length; charOffset++, destinationOffset++) {\n        const char = source.charCodeAt(charOffset);\n        if (char > 127)\n            return null;\n        destination[destinationOffset] = char;\n    }\n    return source.length;\n}\n\nfunction nodejsMathRandomBytes(byteLength) {\n    return nodeJsByteUtils.fromNumberArray(Array.from({ length: byteLength }, () => Math.floor(Math.random() * 256)));\n}\nconst nodejsRandomBytes = nodejsMathRandomBytes;\nconst nodeJsByteUtils = {\n    toLocalBufferType(potentialBuffer) {\n        if (Buffer.isBuffer(potentialBuffer)) {\n            return potentialBuffer;\n        }\n        if (ArrayBuffer.isView(potentialBuffer)) {\n            return Buffer.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);\n        }\n        const stringTag = potentialBuffer?.[Symbol.toStringTag] ?? Object.prototype.toString.call(potentialBuffer);\n        if (stringTag === 'ArrayBuffer' ||\n            stringTag === 'SharedArrayBuffer' ||\n            stringTag === '[object ArrayBuffer]' ||\n            stringTag === '[object SharedArrayBuffer]') {\n            return Buffer.from(potentialBuffer);\n        }\n        throw new BSONError(`Cannot create Buffer from the passed potentialBuffer.`);\n    },\n    allocate(size) {\n        return Buffer.alloc(size);\n    },\n    allocateUnsafe(size) {\n        return Buffer.allocUnsafe(size);\n    },\n    equals(a, b) {\n        return nodeJsByteUtils.toLocalBufferType(a).equals(b);\n    },\n    fromNumberArray(array) {\n        return Buffer.from(array);\n    },\n    fromBase64(base64) {\n        return Buffer.from(base64, 'base64');\n    },\n    toBase64(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('base64');\n    },\n    fromISO88591(codePoints) {\n        return Buffer.from(codePoints, 'binary');\n    },\n    toISO88591(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('binary');\n    },\n    fromHex(hex) {\n        return Buffer.from(hex, 'hex');\n    },\n    toHex(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('hex');\n    },\n    toUTF8(buffer, start, end, fatal) {\n        const basicLatin = end - start <= 20 ? tryReadBasicLatin(buffer, start, end) : null;\n        if (basicLatin != null) {\n            return basicLatin;\n        }\n        const string = nodeJsByteUtils.toLocalBufferType(buffer).toString('utf8', start, end);\n        if (fatal) {\n            for (let i = 0; i < string.length; i++) {\n                if (string.charCodeAt(i) === 0xfffd) {\n                    parseUtf8(buffer, start, end, true);\n                    break;\n                }\n            }\n        }\n        return string;\n    },\n    utf8ByteLength(input) {\n        return Buffer.byteLength(input, 'utf8');\n    },\n    encodeUTF8Into(buffer, source, byteOffset) {\n        const latinBytesWritten = tryWriteBasicLatin(buffer, source, byteOffset);\n        if (latinBytesWritten != null) {\n            return latinBytesWritten;\n        }\n        return nodeJsByteUtils.toLocalBufferType(buffer).write(source, byteOffset, undefined, 'utf8');\n    },\n    randomBytes: nodejsRandomBytes,\n    swap32(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).swap32();\n    }\n};\n\nfunction isReactNative() {\n    const { navigator } = globalThis;\n    return typeof navigator === 'object' && navigator.product === 'ReactNative';\n}\nfunction webMathRandomBytes(byteLength) {\n    if (byteLength < 0) {\n        throw new RangeError(`The argument 'byteLength' is invalid. Received ${byteLength}`);\n    }\n    return webByteUtils.fromNumberArray(Array.from({ length: byteLength }, () => Math.floor(Math.random() * 256)));\n}\nconst webRandomBytes = (() => {\n    const { crypto } = globalThis;\n    if (crypto != null && typeof crypto.getRandomValues === 'function') {\n        return (byteLength) => {\n            return crypto.getRandomValues(webByteUtils.allocate(byteLength));\n        };\n    }\n    else {\n        if (isReactNative()) {\n            const { console } = globalThis;\n            console?.warn?.('BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.');\n        }\n        return webMathRandomBytes;\n    }\n})();\nconst HEX_DIGIT = /(\\d|[a-f])/i;\nconst webByteUtils = {\n    toLocalBufferType(potentialUint8array) {\n        const stringTag = potentialUint8array?.[Symbol.toStringTag] ??\n            Object.prototype.toString.call(potentialUint8array);\n        if (stringTag === 'Uint8Array') {\n            return potentialUint8array;\n        }\n        if (ArrayBuffer.isView(potentialUint8array)) {\n            return new Uint8Array(potentialUint8array.buffer.slice(potentialUint8array.byteOffset, potentialUint8array.byteOffset + potentialUint8array.byteLength));\n        }\n        if (stringTag === 'ArrayBuffer' ||\n            stringTag === 'SharedArrayBuffer' ||\n            stringTag === '[object ArrayBuffer]' ||\n            stringTag === '[object SharedArrayBuffer]') {\n            return new Uint8Array(potentialUint8array);\n        }\n        throw new BSONError(`Cannot make a Uint8Array from passed potentialBuffer.`);\n    },\n    allocate(size) {\n        if (typeof size !== 'number') {\n            throw new TypeError(`The \"size\" argument must be of type number. Received ${String(size)}`);\n        }\n        return new Uint8Array(size);\n    },\n    allocateUnsafe(size) {\n        return webByteUtils.allocate(size);\n    },\n    equals(a, b) {\n        if (a.byteLength !== b.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < a.byteLength; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    },\n    fromNumberArray(array) {\n        return Uint8Array.from(array);\n    },\n    fromBase64(base64) {\n        return Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n    },\n    toBase64(uint8array) {\n        return btoa(webByteUtils.toISO88591(uint8array));\n    },\n    fromISO88591(codePoints) {\n        return Uint8Array.from(codePoints, c => c.charCodeAt(0) & 0xff);\n    },\n    toISO88591(uint8array) {\n        return Array.from(Uint16Array.from(uint8array), b => String.fromCharCode(b)).join('');\n    },\n    fromHex(hex) {\n        const evenLengthHex = hex.length % 2 === 0 ? hex : hex.slice(0, hex.length - 1);\n        const buffer = [];\n        for (let i = 0; i < evenLengthHex.length; i += 2) {\n            const firstDigit = evenLengthHex[i];\n            const secondDigit = evenLengthHex[i + 1];\n            if (!HEX_DIGIT.test(firstDigit)) {\n                break;\n            }\n            if (!HEX_DIGIT.test(secondDigit)) {\n                break;\n            }\n            const hexDigit = Number.parseInt(`${firstDigit}${secondDigit}`, 16);\n            buffer.push(hexDigit);\n        }\n        return Uint8Array.from(buffer);\n    },\n    toHex(uint8array) {\n        return Array.from(uint8array, byte => byte.toString(16).padStart(2, '0')).join('');\n    },\n    toUTF8(uint8array, start, end, fatal) {\n        const basicLatin = end - start <= 20 ? tryReadBasicLatin(uint8array, start, end) : null;\n        if (basicLatin != null) {\n            return basicLatin;\n        }\n        return parseUtf8(uint8array, start, end, fatal);\n    },\n    utf8ByteLength(input) {\n        return new TextEncoder().encode(input).byteLength;\n    },\n    encodeUTF8Into(uint8array, source, byteOffset) {\n        const bytes = new TextEncoder().encode(source);\n        uint8array.set(bytes, byteOffset);\n        return bytes.byteLength;\n    },\n    randomBytes: webRandomBytes,\n    swap32(buffer) {\n        if (buffer.length % 4 !== 0) {\n            throw new RangeError('Buffer size must be a multiple of 32-bits');\n        }\n        for (let i = 0; i < buffer.length; i += 4) {\n            const byte0 = buffer[i];\n            const byte1 = buffer[i + 1];\n            const byte2 = buffer[i + 2];\n            const byte3 = buffer[i + 3];\n            buffer[i] = byte3;\n            buffer[i + 1] = byte2;\n            buffer[i + 2] = byte1;\n            buffer[i + 3] = byte0;\n        }\n        return buffer;\n    }\n};\n\nconst hasGlobalBuffer = typeof Buffer === 'function' && Buffer.prototype?._isBuffer !== true;\nconst ByteUtils = hasGlobalBuffer ? nodeJsByteUtils : webByteUtils;\n\nclass BSONValue {\n    get [BSON_VERSION_SYMBOL]() {\n        return BSON_MAJOR_VERSION;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')](depth, options, inspect) {\n        return this.inspect(depth, options, inspect);\n    }\n}\n\nconst FLOAT = new Float64Array(1);\nconst FLOAT_BYTES = new Uint8Array(FLOAT.buffer, 0, 8);\nFLOAT[0] = -1;\nconst isBigEndian = FLOAT_BYTES[7] === 0;\nconst NumberUtils = {\n    isBigEndian,\n    getNonnegativeInt32LE(source, offset) {\n        if (source[offset + 3] > 127) {\n            throw new RangeError(`Size cannot be negative at offset: ${offset}`);\n        }\n        return (source[offset] |\n            (source[offset + 1] << 8) |\n            (source[offset + 2] << 16) |\n            (source[offset + 3] << 24));\n    },\n    getInt32LE(source, offset) {\n        return (source[offset] |\n            (source[offset + 1] << 8) |\n            (source[offset + 2] << 16) |\n            (source[offset + 3] << 24));\n    },\n    getUint32LE(source, offset) {\n        return (source[offset] +\n            source[offset + 1] * 256 +\n            source[offset + 2] * 65536 +\n            source[offset + 3] * 16777216);\n    },\n    getUint32BE(source, offset) {\n        return (source[offset + 3] +\n            source[offset + 2] * 256 +\n            source[offset + 1] * 65536 +\n            source[offset] * 16777216);\n    },\n    getBigInt64LE(source, offset) {\n        const hi = BigInt(source[offset + 4] +\n            source[offset + 5] * 256 +\n            source[offset + 6] * 65536 +\n            (source[offset + 7] << 24));\n        const lo = BigInt(source[offset] +\n            source[offset + 1] * 256 +\n            source[offset + 2] * 65536 +\n            source[offset + 3] * 16777216);\n        return (hi << BigInt(32)) + lo;\n    },\n    getFloat64LE: isBigEndian\n        ? (source, offset) => {\n            FLOAT_BYTES[7] = source[offset];\n            FLOAT_BYTES[6] = source[offset + 1];\n            FLOAT_BYTES[5] = source[offset + 2];\n            FLOAT_BYTES[4] = source[offset + 3];\n            FLOAT_BYTES[3] = source[offset + 4];\n            FLOAT_BYTES[2] = source[offset + 5];\n            FLOAT_BYTES[1] = source[offset + 6];\n            FLOAT_BYTES[0] = source[offset + 7];\n            return FLOAT[0];\n        }\n        : (source, offset) => {\n            FLOAT_BYTES[0] = source[offset];\n            FLOAT_BYTES[1] = source[offset + 1];\n            FLOAT_BYTES[2] = source[offset + 2];\n            FLOAT_BYTES[3] = source[offset + 3];\n            FLOAT_BYTES[4] = source[offset + 4];\n            FLOAT_BYTES[5] = source[offset + 5];\n            FLOAT_BYTES[6] = source[offset + 6];\n            FLOAT_BYTES[7] = source[offset + 7];\n            return FLOAT[0];\n        },\n    setInt32BE(destination, offset, value) {\n        destination[offset + 3] = value;\n        value >>>= 8;\n        destination[offset + 2] = value;\n        value >>>= 8;\n        destination[offset + 1] = value;\n        value >>>= 8;\n        destination[offset] = value;\n        return 4;\n    },\n    setInt32LE(destination, offset, value) {\n        destination[offset] = value;\n        value >>>= 8;\n        destination[offset + 1] = value;\n        value >>>= 8;\n        destination[offset + 2] = value;\n        value >>>= 8;\n        destination[offset + 3] = value;\n        return 4;\n    },\n    setBigInt64LE(destination, offset, value) {\n        const mask32bits = BigInt(0xffff_ffff);\n        let lo = Number(value & mask32bits);\n        destination[offset] = lo;\n        lo >>= 8;\n        destination[offset + 1] = lo;\n        lo >>= 8;\n        destination[offset + 2] = lo;\n        lo >>= 8;\n        destination[offset + 3] = lo;\n        let hi = Number((value >> BigInt(32)) & mask32bits);\n        destination[offset + 4] = hi;\n        hi >>= 8;\n        destination[offset + 5] = hi;\n        hi >>= 8;\n        destination[offset + 6] = hi;\n        hi >>= 8;\n        destination[offset + 7] = hi;\n        return 8;\n    },\n    setFloat64LE: isBigEndian\n        ? (destination, offset, value) => {\n            FLOAT[0] = value;\n            destination[offset] = FLOAT_BYTES[7];\n            destination[offset + 1] = FLOAT_BYTES[6];\n            destination[offset + 2] = FLOAT_BYTES[5];\n            destination[offset + 3] = FLOAT_BYTES[4];\n            destination[offset + 4] = FLOAT_BYTES[3];\n            destination[offset + 5] = FLOAT_BYTES[2];\n            destination[offset + 6] = FLOAT_BYTES[1];\n            destination[offset + 7] = FLOAT_BYTES[0];\n            return 8;\n        }\n        : (destination, offset, value) => {\n            FLOAT[0] = value;\n            destination[offset] = FLOAT_BYTES[0];\n            destination[offset + 1] = FLOAT_BYTES[1];\n            destination[offset + 2] = FLOAT_BYTES[2];\n            destination[offset + 3] = FLOAT_BYTES[3];\n            destination[offset + 4] = FLOAT_BYTES[4];\n            destination[offset + 5] = FLOAT_BYTES[5];\n            destination[offset + 6] = FLOAT_BYTES[6];\n            destination[offset + 7] = FLOAT_BYTES[7];\n            return 8;\n        }\n};\n\nclass Binary extends BSONValue {\n    get _bsontype() {\n        return 'Binary';\n    }\n    constructor(buffer, subType) {\n        super();\n        if (!(buffer == null) &&\n            typeof buffer === 'string' &&\n            !ArrayBuffer.isView(buffer) &&\n            !isAnyArrayBuffer(buffer) &&\n            !Array.isArray(buffer)) {\n            throw new BSONError('Binary can only be constructed from Uint8Array or number[]');\n        }\n        this.sub_type = subType ?? Binary.BSON_BINARY_SUBTYPE_DEFAULT;\n        if (buffer == null) {\n            this.buffer = ByteUtils.allocate(Binary.BUFFER_SIZE);\n            this.position = 0;\n        }\n        else {\n            this.buffer = Array.isArray(buffer)\n                ? ByteUtils.fromNumberArray(buffer)\n                : ByteUtils.toLocalBufferType(buffer);\n            this.position = this.buffer.byteLength;\n        }\n    }\n    put(byteValue) {\n        if (typeof byteValue === 'string' && byteValue.length !== 1) {\n            throw new BSONError('only accepts single character String');\n        }\n        else if (typeof byteValue !== 'number' && byteValue.length !== 1)\n            throw new BSONError('only accepts single character Uint8Array or Array');\n        let decodedByte;\n        if (typeof byteValue === 'string') {\n            decodedByte = byteValue.charCodeAt(0);\n        }\n        else if (typeof byteValue === 'number') {\n            decodedByte = byteValue;\n        }\n        else {\n            decodedByte = byteValue[0];\n        }\n        if (decodedByte < 0 || decodedByte > 255) {\n            throw new BSONError('only accepts number in a valid unsigned byte range 0-255');\n        }\n        if (this.buffer.byteLength > this.position) {\n            this.buffer[this.position++] = decodedByte;\n        }\n        else {\n            const newSpace = ByteUtils.allocate(Binary.BUFFER_SIZE + this.buffer.length);\n            newSpace.set(this.buffer, 0);\n            this.buffer = newSpace;\n            this.buffer[this.position++] = decodedByte;\n        }\n    }\n    write(sequence, offset) {\n        offset = typeof offset === 'number' ? offset : this.position;\n        if (this.buffer.byteLength < offset + sequence.length) {\n            const newSpace = ByteUtils.allocate(this.buffer.byteLength + sequence.length);\n            newSpace.set(this.buffer, 0);\n            this.buffer = newSpace;\n        }\n        if (ArrayBuffer.isView(sequence)) {\n            this.buffer.set(ByteUtils.toLocalBufferType(sequence), offset);\n            this.position =\n                offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;\n        }\n        else if (typeof sequence === 'string') {\n            throw new BSONError('input cannot be string');\n        }\n    }\n    read(position, length) {\n        length = length && length > 0 ? length : this.position;\n        const end = position + length;\n        return this.buffer.subarray(position, end > this.position ? this.position : end);\n    }\n    value() {\n        return this.buffer.length === this.position\n            ? this.buffer\n            : this.buffer.subarray(0, this.position);\n    }\n    length() {\n        return this.position;\n    }\n    toJSON() {\n        return ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n    }\n    toString(encoding) {\n        if (encoding === 'hex')\n            return ByteUtils.toHex(this.buffer.subarray(0, this.position));\n        if (encoding === 'base64')\n            return ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n        if (encoding === 'utf8' || encoding === 'utf-8')\n            return ByteUtils.toUTF8(this.buffer, 0, this.position, false);\n        return ByteUtils.toUTF8(this.buffer, 0, this.position, false);\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        if (this.sub_type === Binary.SUBTYPE_VECTOR) {\n            validateBinaryVector(this);\n        }\n        const base64String = ByteUtils.toBase64(this.buffer);\n        const subType = Number(this.sub_type).toString(16);\n        if (options.legacy) {\n            return {\n                $binary: base64String,\n                $type: subType.length === 1 ? '0' + subType : subType\n            };\n        }\n        return {\n            $binary: {\n                base64: base64String,\n                subType: subType.length === 1 ? '0' + subType : subType\n            }\n        };\n    }\n    toUUID() {\n        if (this.sub_type === Binary.SUBTYPE_UUID) {\n            return new UUID(this.buffer.subarray(0, this.position));\n        }\n        throw new BSONError(`Binary sub_type \"${this.sub_type}\" is not supported for converting to UUID. Only \"${Binary.SUBTYPE_UUID}\" is currently supported.`);\n    }\n    static createFromHexString(hex, subType) {\n        return new Binary(ByteUtils.fromHex(hex), subType);\n    }\n    static createFromBase64(base64, subType) {\n        return new Binary(ByteUtils.fromBase64(base64), subType);\n    }\n    static fromExtendedJSON(doc, options) {\n        options = options || {};\n        let data;\n        let type;\n        if ('$binary' in doc) {\n            if (options.legacy && typeof doc.$binary === 'string' && '$type' in doc) {\n                type = doc.$type ? parseInt(doc.$type, 16) : 0;\n                data = ByteUtils.fromBase64(doc.$binary);\n            }\n            else {\n                if (typeof doc.$binary !== 'string') {\n                    type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;\n                    data = ByteUtils.fromBase64(doc.$binary.base64);\n                }\n            }\n        }\n        else if ('$uuid' in doc) {\n            type = 4;\n            data = UUID.bytesFromString(doc.$uuid);\n        }\n        if (!data) {\n            throw new BSONError(`Unexpected Binary Extended JSON format ${JSON.stringify(doc)}`);\n        }\n        return type === BSON_BINARY_SUBTYPE_UUID_NEW ? new UUID(data) : new Binary(data, type);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const base64 = ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n        const base64Arg = inspect(base64, options);\n        const subTypeArg = inspect(this.sub_type, options);\n        return `Binary.createFromBase64(${base64Arg}, ${subTypeArg})`;\n    }\n    toInt8Array() {\n        if (this.sub_type !== Binary.SUBTYPE_VECTOR) {\n            throw new BSONError('Binary sub_type is not Vector');\n        }\n        if (this.buffer[0] !== Binary.VECTOR_TYPE.Int8) {\n            throw new BSONError('Binary datatype field is not Int8');\n        }\n        validateBinaryVector(this);\n        return new Int8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));\n    }\n    toFloat32Array() {\n        if (this.sub_type !== Binary.SUBTYPE_VECTOR) {\n            throw new BSONError('Binary sub_type is not Vector');\n        }\n        if (this.buffer[0] !== Binary.VECTOR_TYPE.Float32) {\n            throw new BSONError('Binary datatype field is not Float32');\n        }\n        validateBinaryVector(this);\n        const floatBytes = new Uint8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));\n        if (NumberUtils.isBigEndian)\n            ByteUtils.swap32(floatBytes);\n        return new Float32Array(floatBytes.buffer);\n    }\n    toPackedBits() {\n        if (this.sub_type !== Binary.SUBTYPE_VECTOR) {\n            throw new BSONError('Binary sub_type is not Vector');\n        }\n        if (this.buffer[0] !== Binary.VECTOR_TYPE.PackedBit) {\n            throw new BSONError('Binary datatype field is not packed bit');\n        }\n        validateBinaryVector(this);\n        return new Uint8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));\n    }\n    toBits() {\n        if (this.sub_type !== Binary.SUBTYPE_VECTOR) {\n            throw new BSONError('Binary sub_type is not Vector');\n        }\n        if (this.buffer[0] !== Binary.VECTOR_TYPE.PackedBit) {\n            throw new BSONError('Binary datatype field is not packed bit');\n        }\n        validateBinaryVector(this);\n        const byteCount = this.length() - 2;\n        const bitCount = byteCount * 8 - this.buffer[1];\n        const bits = new Int8Array(bitCount);\n        for (let bitOffset = 0; bitOffset < bits.length; bitOffset++) {\n            const byteOffset = (bitOffset / 8) | 0;\n            const byte = this.buffer[byteOffset + 2];\n            const shift = 7 - (bitOffset % 8);\n            const bit = (byte >> shift) & 1;\n            bits[bitOffset] = bit;\n        }\n        return bits;\n    }\n    static fromInt8Array(array) {\n        const buffer = ByteUtils.allocate(array.byteLength + 2);\n        buffer[0] = Binary.VECTOR_TYPE.Int8;\n        buffer[1] = 0;\n        const intBytes = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n        buffer.set(intBytes, 2);\n        const bin = new this(buffer, this.SUBTYPE_VECTOR);\n        validateBinaryVector(bin);\n        return bin;\n    }\n    static fromFloat32Array(array) {\n        const binaryBytes = ByteUtils.allocate(array.byteLength + 2);\n        binaryBytes[0] = Binary.VECTOR_TYPE.Float32;\n        binaryBytes[1] = 0;\n        const floatBytes = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n        binaryBytes.set(floatBytes, 2);\n        if (NumberUtils.isBigEndian)\n            ByteUtils.swap32(new Uint8Array(binaryBytes.buffer, 2));\n        const bin = new this(binaryBytes, this.SUBTYPE_VECTOR);\n        validateBinaryVector(bin);\n        return bin;\n    }\n    static fromPackedBits(array, padding = 0) {\n        const buffer = ByteUtils.allocate(array.byteLength + 2);\n        buffer[0] = Binary.VECTOR_TYPE.PackedBit;\n        buffer[1] = padding;\n        buffer.set(array, 2);\n        const bin = new this(buffer, this.SUBTYPE_VECTOR);\n        validateBinaryVector(bin);\n        return bin;\n    }\n    static fromBits(bits) {\n        const byteLength = (bits.length + 7) >>> 3;\n        const bytes = new Uint8Array(byteLength + 2);\n        bytes[0] = Binary.VECTOR_TYPE.PackedBit;\n        const remainder = bits.length % 8;\n        bytes[1] = remainder === 0 ? 0 : 8 - remainder;\n        for (let bitOffset = 0; bitOffset < bits.length; bitOffset++) {\n            const byteOffset = bitOffset >>> 3;\n            const bit = bits[bitOffset];\n            if (bit !== 0 && bit !== 1) {\n                throw new BSONError(`Invalid bit value at ${bitOffset}: must be 0 or 1, found ${bits[bitOffset]}`);\n            }\n            if (bit === 0)\n                continue;\n            const shift = 7 - (bitOffset % 8);\n            bytes[byteOffset + 2] |= bit << shift;\n        }\n        return new this(bytes, Binary.SUBTYPE_VECTOR);\n    }\n}\nBinary.BSON_BINARY_SUBTYPE_DEFAULT = 0;\nBinary.BUFFER_SIZE = 256;\nBinary.SUBTYPE_DEFAULT = 0;\nBinary.SUBTYPE_FUNCTION = 1;\nBinary.SUBTYPE_BYTE_ARRAY = 2;\nBinary.SUBTYPE_UUID_OLD = 3;\nBinary.SUBTYPE_UUID = 4;\nBinary.SUBTYPE_MD5 = 5;\nBinary.SUBTYPE_ENCRYPTED = 6;\nBinary.SUBTYPE_COLUMN = 7;\nBinary.SUBTYPE_SENSITIVE = 8;\nBinary.SUBTYPE_VECTOR = 9;\nBinary.SUBTYPE_USER_DEFINED = 128;\nBinary.VECTOR_TYPE = Object.freeze({\n    Int8: 0x03,\n    Float32: 0x27,\n    PackedBit: 0x10\n});\nfunction validateBinaryVector(vector) {\n    if (vector.sub_type !== Binary.SUBTYPE_VECTOR)\n        return;\n    const size = vector.position;\n    const datatype = vector.buffer[0];\n    const padding = vector.buffer[1];\n    if ((datatype === Binary.VECTOR_TYPE.Float32 || datatype === Binary.VECTOR_TYPE.Int8) &&\n        padding !== 0) {\n        throw new BSONError('Invalid Vector: padding must be zero for int8 and float32 vectors');\n    }\n    if (datatype === Binary.VECTOR_TYPE.Float32) {\n        if (size !== 0 && size - 2 !== 0 && (size - 2) % 4 !== 0) {\n            throw new BSONError('Invalid Vector: Float32 vector must contain a multiple of 4 bytes');\n        }\n    }\n    if (datatype === Binary.VECTOR_TYPE.PackedBit && padding !== 0 && size === 2) {\n        throw new BSONError('Invalid Vector: padding must be zero for packed bit vectors that are empty');\n    }\n    if (datatype === Binary.VECTOR_TYPE.PackedBit && padding > 7) {\n        throw new BSONError(`Invalid Vector: padding must be a value between 0 and 7. found: ${padding}`);\n    }\n}\nconst UUID_BYTE_LENGTH = 16;\nconst UUID_WITHOUT_DASHES = /^[0-9A-F]{32}$/i;\nconst UUID_WITH_DASHES = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\nclass UUID extends Binary {\n    constructor(input) {\n        let bytes;\n        if (input == null) {\n            bytes = UUID.generate();\n        }\n        else if (input instanceof UUID) {\n            bytes = ByteUtils.toLocalBufferType(new Uint8Array(input.buffer));\n        }\n        else if (ArrayBuffer.isView(input) && input.byteLength === UUID_BYTE_LENGTH) {\n            bytes = ByteUtils.toLocalBufferType(input);\n        }\n        else if (typeof input === 'string') {\n            bytes = UUID.bytesFromString(input);\n        }\n        else {\n            throw new BSONError('Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).');\n        }\n        super(bytes, BSON_BINARY_SUBTYPE_UUID_NEW);\n    }\n    get id() {\n        return this.buffer;\n    }\n    set id(value) {\n        this.buffer = value;\n    }\n    toHexString(includeDashes = true) {\n        if (includeDashes) {\n            return [\n                ByteUtils.toHex(this.buffer.subarray(0, 4)),\n                ByteUtils.toHex(this.buffer.subarray(4, 6)),\n                ByteUtils.toHex(this.buffer.subarray(6, 8)),\n                ByteUtils.toHex(this.buffer.subarray(8, 10)),\n                ByteUtils.toHex(this.buffer.subarray(10, 16))\n            ].join('-');\n        }\n        return ByteUtils.toHex(this.buffer);\n    }\n    toString(encoding) {\n        if (encoding === 'hex')\n            return ByteUtils.toHex(this.id);\n        if (encoding === 'base64')\n            return ByteUtils.toBase64(this.id);\n        return this.toHexString();\n    }\n    toJSON() {\n        return this.toHexString();\n    }\n    equals(otherId) {\n        if (!otherId) {\n            return false;\n        }\n        if (otherId instanceof UUID) {\n            return ByteUtils.equals(otherId.id, this.id);\n        }\n        try {\n            return ByteUtils.equals(new UUID(otherId).id, this.id);\n        }\n        catch {\n            return false;\n        }\n    }\n    toBinary() {\n        return new Binary(this.id, Binary.SUBTYPE_UUID);\n    }\n    static generate() {\n        const bytes = ByteUtils.randomBytes(UUID_BYTE_LENGTH);\n        bytes[6] = (bytes[6] & 0x0f) | 0x40;\n        bytes[8] = (bytes[8] & 0x3f) | 0x80;\n        return bytes;\n    }\n    static isValid(input) {\n        if (!input) {\n            return false;\n        }\n        if (typeof input === 'string') {\n            return UUID.isValidUUIDString(input);\n        }\n        if (isUint8Array(input)) {\n            return input.byteLength === UUID_BYTE_LENGTH;\n        }\n        return (input._bsontype === 'Binary' &&\n            input.sub_type === this.SUBTYPE_UUID &&\n            input.buffer.byteLength === 16);\n    }\n    static createFromHexString(hexString) {\n        const buffer = UUID.bytesFromString(hexString);\n        return new UUID(buffer);\n    }\n    static createFromBase64(base64) {\n        return new UUID(ByteUtils.fromBase64(base64));\n    }\n    static bytesFromString(representation) {\n        if (!UUID.isValidUUIDString(representation)) {\n            throw new BSONError('UUID string representation must be 32 hex digits or canonical hyphenated representation');\n        }\n        return ByteUtils.fromHex(representation.replace(/-/g, ''));\n    }\n    static isValidUUIDString(representation) {\n        return UUID_WITHOUT_DASHES.test(representation) || UUID_WITH_DASHES.test(representation);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new UUID(${inspect(this.toHexString(), options)})`;\n    }\n}\n\nclass Code extends BSONValue {\n    get _bsontype() {\n        return 'Code';\n    }\n    constructor(code, scope) {\n        super();\n        this.code = code.toString();\n        this.scope = scope ?? null;\n    }\n    toJSON() {\n        if (this.scope != null) {\n            return { code: this.code, scope: this.scope };\n        }\n        return { code: this.code };\n    }\n    toExtendedJSON() {\n        if (this.scope) {\n            return { $code: this.code, $scope: this.scope };\n        }\n        return { $code: this.code };\n    }\n    static fromExtendedJSON(doc) {\n        return new Code(doc.$code, doc.$scope);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        let parametersString = inspect(this.code, options);\n        const multiLineFn = parametersString.includes('\\n');\n        if (this.scope != null) {\n            parametersString += `,${multiLineFn ? '\\n' : ' '}${inspect(this.scope, options)}`;\n        }\n        const endingNewline = multiLineFn && this.scope === null;\n        return `new Code(${multiLineFn ? '\\n' : ''}${parametersString}${endingNewline ? '\\n' : ''})`;\n    }\n}\n\nfunction isDBRefLike(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        '$id' in value &&\n        value.$id != null &&\n        '$ref' in value &&\n        typeof value.$ref === 'string' &&\n        (!('$db' in value) || ('$db' in value && typeof value.$db === 'string')));\n}\nclass DBRef extends BSONValue {\n    get _bsontype() {\n        return 'DBRef';\n    }\n    constructor(collection, oid, db, fields) {\n        super();\n        const parts = collection.split('.');\n        if (parts.length === 2) {\n            db = parts.shift();\n            collection = parts.shift();\n        }\n        this.collection = collection;\n        this.oid = oid;\n        this.db = db;\n        this.fields = fields || {};\n    }\n    get namespace() {\n        return this.collection;\n    }\n    set namespace(value) {\n        this.collection = value;\n    }\n    toJSON() {\n        const o = Object.assign({\n            $ref: this.collection,\n            $id: this.oid\n        }, this.fields);\n        if (this.db != null)\n            o.$db = this.db;\n        return o;\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        let o = {\n            $ref: this.collection,\n            $id: this.oid\n        };\n        if (options.legacy) {\n            return o;\n        }\n        if (this.db)\n            o.$db = this.db;\n        o = Object.assign(o, this.fields);\n        return o;\n    }\n    static fromExtendedJSON(doc) {\n        const copy = Object.assign({}, doc);\n        delete copy.$ref;\n        delete copy.$id;\n        delete copy.$db;\n        return new DBRef(doc.$ref, doc.$id, doc.$db, copy);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const args = [\n            inspect(this.namespace, options),\n            inspect(this.oid, options),\n            ...(this.db ? [inspect(this.db, options)] : []),\n            ...(Object.keys(this.fields).length > 0 ? [inspect(this.fields, options)] : [])\n        ];\n        args[1] = inspect === defaultInspect ? `new ObjectId(${args[1]})` : args[1];\n        return `new DBRef(${args.join(', ')})`;\n    }\n}\n\nfunction removeLeadingZerosAndExplicitPlus(str) {\n    if (str === '') {\n        return str;\n    }\n    let startIndex = 0;\n    const isNegative = str[startIndex] === '-';\n    const isExplicitlyPositive = str[startIndex] === '+';\n    if (isExplicitlyPositive || isNegative) {\n        startIndex += 1;\n    }\n    let foundInsignificantZero = false;\n    for (; startIndex < str.length && str[startIndex] === '0'; ++startIndex) {\n        foundInsignificantZero = true;\n    }\n    if (!foundInsignificantZero) {\n        return isExplicitlyPositive ? str.slice(1) : str;\n    }\n    return `${isNegative ? '-' : ''}${str.length === startIndex ? '0' : str.slice(startIndex)}`;\n}\nfunction validateStringCharacters(str, radix) {\n    radix = radix ?? 10;\n    const validCharacters = '0123456789abcdefghijklmnopqrstuvwxyz'.slice(0, radix);\n    const regex = new RegExp(`[^-+${validCharacters}]`, 'i');\n    return regex.test(str) ? false : str;\n}\n\nlet wasm = undefined;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n}\ncatch {\n}\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_24_DBL = 1 << 24;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\nconst INT_CACHE = {};\nconst UINT_CACHE = {};\nconst MAX_INT64_STRING_LENGTH = 20;\nconst DECIMAL_REG_EX = /^(\\+?0|(\\+|-)?[1-9][0-9]*)$/;\nclass Long extends BSONValue {\n    get _bsontype() {\n        return 'Long';\n    }\n    get __isLong__() {\n        return true;\n    }\n    constructor(lowOrValue = 0, highOrUnsigned, unsigned) {\n        super();\n        const unsignedBool = typeof highOrUnsigned === 'boolean' ? highOrUnsigned : Boolean(unsigned);\n        const high = typeof highOrUnsigned === 'number' ? highOrUnsigned : 0;\n        const res = typeof lowOrValue === 'string'\n            ? Long.fromString(lowOrValue, unsignedBool)\n            : typeof lowOrValue === 'bigint'\n                ? Long.fromBigInt(lowOrValue, unsignedBool)\n                : { low: lowOrValue | 0, high: high | 0, unsigned: unsignedBool };\n        this.low = res.low;\n        this.high = res.high;\n        this.unsigned = res.unsigned;\n    }\n    static fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    }\n    static fromInt(value, unsigned) {\n        let obj, cachedObj, cache;\n        if (unsigned) {\n            value >>>= 0;\n            if ((cache = 0 <= value && value < 256)) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache)\n                UINT_CACHE[value] = obj;\n            return obj;\n        }\n        else {\n            value |= 0;\n            if ((cache = -128 <= value && value < 128)) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = Long.fromBits(value, value < 0 ? -1 : 0, false);\n            if (cache)\n                INT_CACHE[value] = obj;\n            return obj;\n        }\n    }\n    static fromNumber(value, unsigned) {\n        if (isNaN(value))\n            return unsigned ? Long.UZERO : Long.ZERO;\n        if (unsigned) {\n            if (value < 0)\n                return Long.UZERO;\n            if (value >= TWO_PWR_64_DBL)\n                return Long.MAX_UNSIGNED_VALUE;\n        }\n        else {\n            if (value <= -9223372036854776e3)\n                return Long.MIN_VALUE;\n            if (value + 1 >= TWO_PWR_63_DBL)\n                return Long.MAX_VALUE;\n        }\n        if (value < 0)\n            return Long.fromNumber(-value, unsigned).neg();\n        return Long.fromBits(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n    }\n    static fromBigInt(value, unsigned) {\n        const FROM_BIGINT_BIT_MASK = BigInt(0xffffffff);\n        const FROM_BIGINT_BIT_SHIFT = BigInt(32);\n        return new Long(Number(value & FROM_BIGINT_BIT_MASK), Number((value >> FROM_BIGINT_BIT_SHIFT) & FROM_BIGINT_BIT_MASK), unsigned);\n    }\n    static _fromString(str, unsigned, radix) {\n        if (str.length === 0)\n            throw new BSONError('empty string');\n        if (radix < 2 || 36 < radix)\n            throw new BSONError('radix');\n        let p;\n        if ((p = str.indexOf('-')) > 0)\n            throw new BSONError('interior hyphen');\n        else if (p === 0) {\n            return Long._fromString(str.substring(1), unsigned, radix).neg();\n        }\n        const radixToPower = Long.fromNumber(Math.pow(radix, 8));\n        let result = Long.ZERO;\n        for (let i = 0; i < str.length; i += 8) {\n            const size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                const power = Long.fromNumber(Math.pow(radix, size));\n                result = result.mul(power).add(Long.fromNumber(value));\n            }\n            else {\n                result = result.mul(radixToPower);\n                result = result.add(Long.fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    }\n    static fromStringStrict(str, unsignedOrRadix, radix) {\n        let unsigned = false;\n        if (typeof unsignedOrRadix === 'number') {\n            (radix = unsignedOrRadix), (unsignedOrRadix = false);\n        }\n        else {\n            unsigned = !!unsignedOrRadix;\n        }\n        radix ??= 10;\n        if (str.trim() !== str) {\n            throw new BSONError(`Input: '${str}' contains leading and/or trailing whitespace`);\n        }\n        if (!validateStringCharacters(str, radix)) {\n            throw new BSONError(`Input: '${str}' contains invalid characters for radix: ${radix}`);\n        }\n        const cleanedStr = removeLeadingZerosAndExplicitPlus(str);\n        const result = Long._fromString(cleanedStr, unsigned, radix);\n        if (result.toString(radix).toLowerCase() !== cleanedStr.toLowerCase()) {\n            throw new BSONError(`Input: ${str} is not representable as ${result.unsigned ? 'an unsigned' : 'a signed'} 64-bit Long ${radix != null ? `with radix: ${radix}` : ''}`);\n        }\n        return result;\n    }\n    static fromString(str, unsignedOrRadix, radix) {\n        let unsigned = false;\n        if (typeof unsignedOrRadix === 'number') {\n            (radix = unsignedOrRadix), (unsignedOrRadix = false);\n        }\n        else {\n            unsigned = !!unsignedOrRadix;\n        }\n        radix ??= 10;\n        if (str === 'NaN' && radix < 24) {\n            return Long.ZERO;\n        }\n        else if ((str === 'Infinity' || str === '+Infinity' || str === '-Infinity') && radix < 35) {\n            return Long.ZERO;\n        }\n        return Long._fromString(str, unsigned, radix);\n    }\n    static fromBytes(bytes, unsigned, le) {\n        return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n    }\n    static fromBytesLE(bytes, unsigned) {\n        return new Long(bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24), bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24), unsigned);\n    }\n    static fromBytesBE(bytes, unsigned) {\n        return new Long((bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7], (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3], unsigned);\n    }\n    static isLong(value) {\n        return (value != null &&\n            typeof value === 'object' &&\n            '__isLong__' in value &&\n            value.__isLong__ === true);\n    }\n    static fromValue(val, unsigned) {\n        if (typeof val === 'number')\n            return Long.fromNumber(val, unsigned);\n        if (typeof val === 'string')\n            return Long.fromString(val, unsigned);\n        return Long.fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n    }\n    add(addend) {\n        if (!Long.isLong(addend))\n            addend = Long.fromValue(addend);\n        const a48 = this.high >>> 16;\n        const a32 = this.high & 0xffff;\n        const a16 = this.low >>> 16;\n        const a00 = this.low & 0xffff;\n        const b48 = addend.high >>> 16;\n        const b32 = addend.high & 0xffff;\n        const b16 = addend.low >>> 16;\n        const b00 = addend.low & 0xffff;\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 + b48;\n        c48 &= 0xffff;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    }\n    and(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    }\n    compare(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        if (this.eq(other))\n            return 0;\n        const thisNeg = this.isNegative(), otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg)\n            return -1;\n        if (!thisNeg && otherNeg)\n            return 1;\n        if (!this.unsigned)\n            return this.sub(other).isNegative() ? -1 : 1;\n        return other.high >>> 0 > this.high >>> 0 ||\n            (other.high === this.high && other.low >>> 0 > this.low >>> 0)\n            ? -1\n            : 1;\n    }\n    comp(other) {\n        return this.compare(other);\n    }\n    divide(divisor) {\n        if (!Long.isLong(divisor))\n            divisor = Long.fromValue(divisor);\n        if (divisor.isZero())\n            throw new BSONError('division by zero');\n        if (wasm) {\n            if (!this.unsigned &&\n                this.high === -2147483648 &&\n                divisor.low === -1 &&\n                divisor.high === -1) {\n                return this;\n            }\n            const low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        if (this.isZero())\n            return this.unsigned ? Long.UZERO : Long.ZERO;\n        let approx, rem, res;\n        if (!this.unsigned) {\n            if (this.eq(Long.MIN_VALUE)) {\n                if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE))\n                    return Long.MIN_VALUE;\n                else if (divisor.eq(Long.MIN_VALUE))\n                    return Long.ONE;\n                else {\n                    const halfThis = this.shr(1);\n                    approx = halfThis.div(divisor).shl(1);\n                    if (approx.eq(Long.ZERO)) {\n                        return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n                    }\n                    else {\n                        rem = this.sub(divisor.mul(approx));\n                        res = approx.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n            }\n            else if (divisor.eq(Long.MIN_VALUE))\n                return this.unsigned ? Long.UZERO : Long.ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative())\n                    return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            }\n            else if (divisor.isNegative())\n                return this.div(divisor.neg()).neg();\n            res = Long.ZERO;\n        }\n        else {\n            if (!divisor.unsigned)\n                divisor = divisor.toUnsigned();\n            if (divisor.gt(this))\n                return Long.UZERO;\n            if (divisor.gt(this.shru(1)))\n                return Long.UONE;\n            res = Long.UZERO;\n        }\n        rem = this;\n        while (rem.gte(divisor)) {\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n            const log2 = Math.ceil(Math.log(approx) / Math.LN2);\n            const delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n            let approxRes = Long.fromNumber(approx);\n            let approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = Long.fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n            if (approxRes.isZero())\n                approxRes = Long.ONE;\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    }\n    div(divisor) {\n        return this.divide(divisor);\n    }\n    equals(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)\n            return false;\n        return this.high === other.high && this.low === other.low;\n    }\n    eq(other) {\n        return this.equals(other);\n    }\n    getHighBits() {\n        return this.high;\n    }\n    getHighBitsUnsigned() {\n        return this.high >>> 0;\n    }\n    getLowBits() {\n        return this.low;\n    }\n    getLowBitsUnsigned() {\n        return this.low >>> 0;\n    }\n    getNumBitsAbs() {\n        if (this.isNegative()) {\n            return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        }\n        const val = this.high !== 0 ? this.high : this.low;\n        let bit;\n        for (bit = 31; bit > 0; bit--)\n            if ((val & (1 << bit)) !== 0)\n                break;\n        return this.high !== 0 ? bit + 33 : bit + 1;\n    }\n    greaterThan(other) {\n        return this.comp(other) > 0;\n    }\n    gt(other) {\n        return this.greaterThan(other);\n    }\n    greaterThanOrEqual(other) {\n        return this.comp(other) >= 0;\n    }\n    gte(other) {\n        return this.greaterThanOrEqual(other);\n    }\n    ge(other) {\n        return this.greaterThanOrEqual(other);\n    }\n    isEven() {\n        return (this.low & 1) === 0;\n    }\n    isNegative() {\n        return !this.unsigned && this.high < 0;\n    }\n    isOdd() {\n        return (this.low & 1) === 1;\n    }\n    isPositive() {\n        return this.unsigned || this.high >= 0;\n    }\n    isZero() {\n        return this.high === 0 && this.low === 0;\n    }\n    lessThan(other) {\n        return this.comp(other) < 0;\n    }\n    lt(other) {\n        return this.lessThan(other);\n    }\n    lessThanOrEqual(other) {\n        return this.comp(other) <= 0;\n    }\n    lte(other) {\n        return this.lessThanOrEqual(other);\n    }\n    modulo(divisor) {\n        if (!Long.isLong(divisor))\n            divisor = Long.fromValue(divisor);\n        if (wasm) {\n            const low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        return this.sub(this.div(divisor).mul(divisor));\n    }\n    mod(divisor) {\n        return this.modulo(divisor);\n    }\n    rem(divisor) {\n        return this.modulo(divisor);\n    }\n    multiply(multiplier) {\n        if (this.isZero())\n            return Long.ZERO;\n        if (!Long.isLong(multiplier))\n            multiplier = Long.fromValue(multiplier);\n        if (wasm) {\n            const low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        if (multiplier.isZero())\n            return Long.ZERO;\n        if (this.eq(Long.MIN_VALUE))\n            return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (multiplier.eq(Long.MIN_VALUE))\n            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (this.isNegative()) {\n            if (multiplier.isNegative())\n                return this.neg().mul(multiplier.neg());\n            else\n                return this.neg().mul(multiplier).neg();\n        }\n        else if (multiplier.isNegative())\n            return this.mul(multiplier.neg()).neg();\n        if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24))\n            return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n        const a48 = this.high >>> 16;\n        const a32 = this.high & 0xffff;\n        const a16 = this.low >>> 16;\n        const a00 = this.low & 0xffff;\n        const b48 = multiplier.high >>> 16;\n        const b32 = multiplier.high & 0xffff;\n        const b16 = multiplier.low >>> 16;\n        const b00 = multiplier.low & 0xffff;\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xffff;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    }\n    mul(multiplier) {\n        return this.multiply(multiplier);\n    }\n    negate() {\n        if (!this.unsigned && this.eq(Long.MIN_VALUE))\n            return Long.MIN_VALUE;\n        return this.not().add(Long.ONE);\n    }\n    neg() {\n        return this.negate();\n    }\n    not() {\n        return Long.fromBits(~this.low, ~this.high, this.unsigned);\n    }\n    notEquals(other) {\n        return !this.equals(other);\n    }\n    neq(other) {\n        return this.notEquals(other);\n    }\n    ne(other) {\n        return this.notEquals(other);\n    }\n    or(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    }\n    shiftLeft(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return Long.fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n        else\n            return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);\n    }\n    shl(numBits) {\n        return this.shiftLeft(numBits);\n    }\n    shiftRight(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return Long.fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n        else\n            return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n    }\n    shr(numBits) {\n        return this.shiftRight(numBits);\n    }\n    shiftRightUnsigned(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0)\n            return this;\n        else {\n            const high = this.high;\n            if (numBits < 32) {\n                const low = this.low;\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            }\n            else if (numBits === 32)\n                return Long.fromBits(high, 0, this.unsigned);\n            else\n                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\n        }\n    }\n    shr_u(numBits) {\n        return this.shiftRightUnsigned(numBits);\n    }\n    shru(numBits) {\n        return this.shiftRightUnsigned(numBits);\n    }\n    subtract(subtrahend) {\n        if (!Long.isLong(subtrahend))\n            subtrahend = Long.fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    }\n    sub(subtrahend) {\n        return this.subtract(subtrahend);\n    }\n    toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    }\n    toNumber() {\n        if (this.unsigned)\n            return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    }\n    toBigInt() {\n        return BigInt(this.toString());\n    }\n    toBytes(le) {\n        return le ? this.toBytesLE() : this.toBytesBE();\n    }\n    toBytesLE() {\n        const hi = this.high, lo = this.low;\n        return [\n            lo & 0xff,\n            (lo >>> 8) & 0xff,\n            (lo >>> 16) & 0xff,\n            lo >>> 24,\n            hi & 0xff,\n            (hi >>> 8) & 0xff,\n            (hi >>> 16) & 0xff,\n            hi >>> 24\n        ];\n    }\n    toBytesBE() {\n        const hi = this.high, lo = this.low;\n        return [\n            hi >>> 24,\n            (hi >>> 16) & 0xff,\n            (hi >>> 8) & 0xff,\n            hi & 0xff,\n            lo >>> 24,\n            (lo >>> 16) & 0xff,\n            (lo >>> 8) & 0xff,\n            lo & 0xff\n        ];\n    }\n    toSigned() {\n        if (!this.unsigned)\n            return this;\n        return Long.fromBits(this.low, this.high, false);\n    }\n    toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw new BSONError('radix');\n        if (this.isZero())\n            return '0';\n        if (this.isNegative()) {\n            if (this.eq(Long.MIN_VALUE)) {\n                const radixLong = Long.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            }\n            else\n                return '-' + this.neg().toString(radix);\n        }\n        const radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n        let rem = this;\n        let result = '';\n        while (true) {\n            const remDiv = rem.div(radixToPower);\n            const intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;\n            let digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) {\n                return digits + result;\n            }\n            else {\n                while (digits.length < 6)\n                    digits = '0' + digits;\n                result = '' + digits + result;\n            }\n        }\n    }\n    toUnsigned() {\n        if (this.unsigned)\n            return this;\n        return Long.fromBits(this.low, this.high, true);\n    }\n    xor(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    }\n    eqz() {\n        return this.isZero();\n    }\n    le(other) {\n        return this.lessThanOrEqual(other);\n    }\n    toExtendedJSON(options) {\n        if (options && options.relaxed)\n            return this.toNumber();\n        return { $numberLong: this.toString() };\n    }\n    static fromExtendedJSON(doc, options) {\n        const { useBigInt64 = false, relaxed = true } = { ...options };\n        if (doc.$numberLong.length > MAX_INT64_STRING_LENGTH) {\n            throw new BSONError('$numberLong string is too long');\n        }\n        if (!DECIMAL_REG_EX.test(doc.$numberLong)) {\n            throw new BSONError(`$numberLong string \"${doc.$numberLong}\" is in an invalid format`);\n        }\n        if (useBigInt64) {\n            const bigIntResult = BigInt(doc.$numberLong);\n            return BigInt.asIntN(64, bigIntResult);\n        }\n        const longResult = Long.fromString(doc.$numberLong);\n        if (relaxed) {\n            return longResult.toNumber();\n        }\n        return longResult;\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const longVal = inspect(this.toString(), options);\n        const unsignedVal = this.unsigned ? `, ${inspect(this.unsigned, options)}` : '';\n        return `new Long(${longVal}${unsignedVal})`;\n    }\n}\nLong.TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\nLong.MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);\nLong.ZERO = Long.fromInt(0);\nLong.UZERO = Long.fromInt(0, true);\nLong.ONE = Long.fromInt(1);\nLong.UONE = Long.fromInt(1, true);\nLong.NEG_ONE = Long.fromInt(-1);\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n\nconst PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nconst PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nconst PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\nconst EXPONENT_MAX = 6111;\nconst EXPONENT_MIN = -6176;\nconst EXPONENT_BIAS = 6176;\nconst MAX_DIGITS = 34;\nconst NAN_BUFFER = ByteUtils.fromNumberArray([\n    0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n].reverse());\nconst INF_NEGATIVE_BUFFER = ByteUtils.fromNumberArray([\n    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n].reverse());\nconst INF_POSITIVE_BUFFER = ByteUtils.fromNumberArray([\n    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n].reverse());\nconst EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\nconst COMBINATION_MASK = 0x1f;\nconst EXPONENT_MASK = 0x3fff;\nconst COMBINATION_INFINITY = 30;\nconst COMBINATION_NAN = 31;\nfunction isDigit(value) {\n    return !isNaN(parseInt(value, 10));\n}\nfunction divideu128(value) {\n    const DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n    let _rem = Long.fromNumber(0);\n    if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n        return { quotient: value, rem: _rem };\n    }\n    for (let i = 0; i <= 3; i++) {\n        _rem = _rem.shiftLeft(32);\n        _rem = _rem.add(new Long(value.parts[i], 0));\n        value.parts[i] = _rem.div(DIVISOR).low;\n        _rem = _rem.modulo(DIVISOR);\n    }\n    return { quotient: value, rem: _rem };\n}\nfunction multiply64x2(left, right) {\n    if (!left && !right) {\n        return { high: Long.fromNumber(0), low: Long.fromNumber(0) };\n    }\n    const leftHigh = left.shiftRightUnsigned(32);\n    const leftLow = new Long(left.getLowBits(), 0);\n    const rightHigh = right.shiftRightUnsigned(32);\n    const rightLow = new Long(right.getLowBits(), 0);\n    let productHigh = leftHigh.multiply(rightHigh);\n    let productMid = leftHigh.multiply(rightLow);\n    const productMid2 = leftLow.multiply(rightHigh);\n    let productLow = leftLow.multiply(rightLow);\n    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n    productMid = new Long(productMid.getLowBits(), 0)\n        .add(productMid2)\n        .add(productLow.shiftRightUnsigned(32));\n    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n    productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n    return { high: productHigh, low: productLow };\n}\nfunction lessThan(left, right) {\n    const uhleft = left.high >>> 0;\n    const uhright = right.high >>> 0;\n    if (uhleft < uhright) {\n        return true;\n    }\n    else if (uhleft === uhright) {\n        const ulleft = left.low >>> 0;\n        const ulright = right.low >>> 0;\n        if (ulleft < ulright)\n            return true;\n    }\n    return false;\n}\nfunction invalidErr(string, message) {\n    throw new BSONError(`\"${string}\" is not a valid Decimal128 string - ${message}`);\n}\nclass Decimal128 extends BSONValue {\n    get _bsontype() {\n        return 'Decimal128';\n    }\n    constructor(bytes) {\n        super();\n        if (typeof bytes === 'string') {\n            this.bytes = Decimal128.fromString(bytes).bytes;\n        }\n        else if (bytes instanceof Uint8Array || isUint8Array(bytes)) {\n            if (bytes.byteLength !== 16) {\n                throw new BSONError('Decimal128 must take a Buffer of 16 bytes');\n            }\n            this.bytes = bytes;\n        }\n        else {\n            throw new BSONError('Decimal128 must take a Buffer or string');\n        }\n    }\n    static fromString(representation) {\n        return Decimal128._fromString(representation, { allowRounding: false });\n    }\n    static fromStringWithRounding(representation) {\n        return Decimal128._fromString(representation, { allowRounding: true });\n    }\n    static _fromString(representation, options) {\n        let isNegative = false;\n        let sawSign = false;\n        let sawRadix = false;\n        let foundNonZero = false;\n        let significantDigits = 0;\n        let nDigitsRead = 0;\n        let nDigits = 0;\n        let radixPosition = 0;\n        let firstNonZero = 0;\n        const digits = [0];\n        let nDigitsStored = 0;\n        let digitsInsert = 0;\n        let lastDigit = 0;\n        let exponent = 0;\n        let significandHigh = new Long(0, 0);\n        let significandLow = new Long(0, 0);\n        let biasedExponent = 0;\n        let index = 0;\n        if (representation.length >= 7000) {\n            throw new BSONError('' + representation + ' not a valid Decimal128 string');\n        }\n        const stringMatch = representation.match(PARSE_STRING_REGEXP);\n        const infMatch = representation.match(PARSE_INF_REGEXP);\n        const nanMatch = representation.match(PARSE_NAN_REGEXP);\n        if ((!stringMatch && !infMatch && !nanMatch) || representation.length === 0) {\n            throw new BSONError('' + representation + ' not a valid Decimal128 string');\n        }\n        if (stringMatch) {\n            const unsignedNumber = stringMatch[2];\n            const e = stringMatch[4];\n            const expSign = stringMatch[5];\n            const expNumber = stringMatch[6];\n            if (e && expNumber === undefined)\n                invalidErr(representation, 'missing exponent power');\n            if (e && unsignedNumber === undefined)\n                invalidErr(representation, 'missing exponent base');\n            if (e === undefined && (expSign || expNumber)) {\n                invalidErr(representation, 'missing e before exponent');\n            }\n        }\n        if (representation[index] === '+' || representation[index] === '-') {\n            sawSign = true;\n            isNegative = representation[index++] === '-';\n        }\n        if (!isDigit(representation[index]) && representation[index] !== '.') {\n            if (representation[index] === 'i' || representation[index] === 'I') {\n                return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n            }\n            else if (representation[index] === 'N') {\n                return new Decimal128(NAN_BUFFER);\n            }\n        }\n        while (isDigit(representation[index]) || representation[index] === '.') {\n            if (representation[index] === '.') {\n                if (sawRadix)\n                    invalidErr(representation, 'contains multiple periods');\n                sawRadix = true;\n                index = index + 1;\n                continue;\n            }\n            if (nDigitsStored < MAX_DIGITS) {\n                if (representation[index] !== '0' || foundNonZero) {\n                    if (!foundNonZero) {\n                        firstNonZero = nDigitsRead;\n                    }\n                    foundNonZero = true;\n                    digits[digitsInsert++] = parseInt(representation[index], 10);\n                    nDigitsStored = nDigitsStored + 1;\n                }\n            }\n            if (foundNonZero)\n                nDigits = nDigits + 1;\n            if (sawRadix)\n                radixPosition = radixPosition + 1;\n            nDigitsRead = nDigitsRead + 1;\n            index = index + 1;\n        }\n        if (sawRadix && !nDigitsRead)\n            throw new BSONError('' + representation + ' not a valid Decimal128 string');\n        if (representation[index] === 'e' || representation[index] === 'E') {\n            const match = representation.substr(++index).match(EXPONENT_REGEX);\n            if (!match || !match[2])\n                return new Decimal128(NAN_BUFFER);\n            exponent = parseInt(match[0], 10);\n            index = index + match[0].length;\n        }\n        if (representation[index])\n            return new Decimal128(NAN_BUFFER);\n        if (!nDigitsStored) {\n            digits[0] = 0;\n            nDigits = 1;\n            nDigitsStored = 1;\n            significantDigits = 0;\n        }\n        else {\n            lastDigit = nDigitsStored - 1;\n            significantDigits = nDigits;\n            if (significantDigits !== 1) {\n                while (representation[firstNonZero + significantDigits - 1 + Number(sawSign) + Number(sawRadix)] === '0') {\n                    significantDigits = significantDigits - 1;\n                }\n            }\n        }\n        if (exponent <= radixPosition && radixPosition > exponent + (1 << 14)) {\n            exponent = EXPONENT_MIN;\n        }\n        else {\n            exponent = exponent - radixPosition;\n        }\n        while (exponent > EXPONENT_MAX) {\n            lastDigit = lastDigit + 1;\n            if (lastDigit >= MAX_DIGITS) {\n                if (significantDigits === 0) {\n                    exponent = EXPONENT_MAX;\n                    break;\n                }\n                invalidErr(representation, 'overflow');\n            }\n            exponent = exponent - 1;\n        }\n        if (options.allowRounding) {\n            while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n                if (lastDigit === 0 && significantDigits < nDigitsStored) {\n                    exponent = EXPONENT_MIN;\n                    significantDigits = 0;\n                    break;\n                }\n                if (nDigitsStored < nDigits) {\n                    nDigits = nDigits - 1;\n                }\n                else {\n                    lastDigit = lastDigit - 1;\n                }\n                if (exponent < EXPONENT_MAX) {\n                    exponent = exponent + 1;\n                }\n                else {\n                    const digitsString = digits.join('');\n                    if (digitsString.match(/^0+$/)) {\n                        exponent = EXPONENT_MAX;\n                        break;\n                    }\n                    invalidErr(representation, 'overflow');\n                }\n            }\n            if (lastDigit + 1 < significantDigits) {\n                let endOfString = nDigitsRead;\n                if (sawRadix) {\n                    firstNonZero = firstNonZero + 1;\n                    endOfString = endOfString + 1;\n                }\n                if (sawSign) {\n                    firstNonZero = firstNonZero + 1;\n                    endOfString = endOfString + 1;\n                }\n                const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n                let roundBit = 0;\n                if (roundDigit >= 5) {\n                    roundBit = 1;\n                    if (roundDigit === 5) {\n                        roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;\n                        for (let i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n                            if (parseInt(representation[i], 10)) {\n                                roundBit = 1;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (roundBit) {\n                    let dIdx = lastDigit;\n                    for (; dIdx >= 0; dIdx--) {\n                        if (++digits[dIdx] > 9) {\n                            digits[dIdx] = 0;\n                            if (dIdx === 0) {\n                                if (exponent < EXPONENT_MAX) {\n                                    exponent = exponent + 1;\n                                    digits[dIdx] = 1;\n                                }\n                                else {\n                                    return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n                                }\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n                if (lastDigit === 0) {\n                    if (significantDigits === 0) {\n                        exponent = EXPONENT_MIN;\n                        break;\n                    }\n                    invalidErr(representation, 'exponent underflow');\n                }\n                if (nDigitsStored < nDigits) {\n                    if (representation[nDigits - 1 + Number(sawSign) + Number(sawRadix)] !== '0' &&\n                        significantDigits !== 0) {\n                        invalidErr(representation, 'inexact rounding');\n                    }\n                    nDigits = nDigits - 1;\n                }\n                else {\n                    if (digits[lastDigit] !== 0) {\n                        invalidErr(representation, 'inexact rounding');\n                    }\n                    lastDigit = lastDigit - 1;\n                }\n                if (exponent < EXPONENT_MAX) {\n                    exponent = exponent + 1;\n                }\n                else {\n                    invalidErr(representation, 'overflow');\n                }\n            }\n            if (lastDigit + 1 < significantDigits) {\n                if (sawRadix) {\n                    firstNonZero = firstNonZero + 1;\n                }\n                if (sawSign) {\n                    firstNonZero = firstNonZero + 1;\n                }\n                const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n                if (roundDigit !== 0) {\n                    invalidErr(representation, 'inexact rounding');\n                }\n            }\n        }\n        significandHigh = Long.fromNumber(0);\n        significandLow = Long.fromNumber(0);\n        if (significantDigits === 0) {\n            significandHigh = Long.fromNumber(0);\n            significandLow = Long.fromNumber(0);\n        }\n        else if (lastDigit < 17) {\n            let dIdx = 0;\n            significandLow = Long.fromNumber(digits[dIdx++]);\n            significandHigh = new Long(0, 0);\n            for (; dIdx <= lastDigit; dIdx++) {\n                significandLow = significandLow.multiply(Long.fromNumber(10));\n                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n            }\n        }\n        else {\n            let dIdx = 0;\n            significandHigh = Long.fromNumber(digits[dIdx++]);\n            for (; dIdx <= lastDigit - 17; dIdx++) {\n                significandHigh = significandHigh.multiply(Long.fromNumber(10));\n                significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n            }\n            significandLow = Long.fromNumber(digits[dIdx++]);\n            for (; dIdx <= lastDigit; dIdx++) {\n                significandLow = significandLow.multiply(Long.fromNumber(10));\n                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n            }\n        }\n        const significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n        significand.low = significand.low.add(significandLow);\n        if (lessThan(significand.low, significandLow)) {\n            significand.high = significand.high.add(Long.fromNumber(1));\n        }\n        biasedExponent = exponent + EXPONENT_BIAS;\n        const dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n        if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {\n            dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n            dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n        }\n        else {\n            dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n        }\n        dec.low = significand.low;\n        if (isNegative) {\n            dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n        }\n        const buffer = ByteUtils.allocateUnsafe(16);\n        index = 0;\n        buffer[index++] = dec.low.low & 0xff;\n        buffer[index++] = (dec.low.low >> 8) & 0xff;\n        buffer[index++] = (dec.low.low >> 16) & 0xff;\n        buffer[index++] = (dec.low.low >> 24) & 0xff;\n        buffer[index++] = dec.low.high & 0xff;\n        buffer[index++] = (dec.low.high >> 8) & 0xff;\n        buffer[index++] = (dec.low.high >> 16) & 0xff;\n        buffer[index++] = (dec.low.high >> 24) & 0xff;\n        buffer[index++] = dec.high.low & 0xff;\n        buffer[index++] = (dec.high.low >> 8) & 0xff;\n        buffer[index++] = (dec.high.low >> 16) & 0xff;\n        buffer[index++] = (dec.high.low >> 24) & 0xff;\n        buffer[index++] = dec.high.high & 0xff;\n        buffer[index++] = (dec.high.high >> 8) & 0xff;\n        buffer[index++] = (dec.high.high >> 16) & 0xff;\n        buffer[index++] = (dec.high.high >> 24) & 0xff;\n        return new Decimal128(buffer);\n    }\n    toString() {\n        let biased_exponent;\n        let significand_digits = 0;\n        const significand = new Array(36);\n        for (let i = 0; i < significand.length; i++)\n            significand[i] = 0;\n        let index = 0;\n        let is_zero = false;\n        let significand_msb;\n        let significand128 = { parts: [0, 0, 0, 0] };\n        let j, k;\n        const string = [];\n        index = 0;\n        const buffer = this.bytes;\n        const low = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        const midl = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        const midh = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        const high = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        index = 0;\n        const dec = {\n            low: new Long(low, midl),\n            high: new Long(midh, high)\n        };\n        if (dec.high.lessThan(Long.ZERO)) {\n            string.push('-');\n        }\n        const combination = (high >> 26) & COMBINATION_MASK;\n        if (combination >> 3 === 3) {\n            if (combination === COMBINATION_INFINITY) {\n                return string.join('') + 'Infinity';\n            }\n            else if (combination === COMBINATION_NAN) {\n                return 'NaN';\n            }\n            else {\n                biased_exponent = (high >> 15) & EXPONENT_MASK;\n                significand_msb = 0x08 + ((high >> 14) & 0x01);\n            }\n        }\n        else {\n            significand_msb = (high >> 14) & 0x07;\n            biased_exponent = (high >> 17) & EXPONENT_MASK;\n        }\n        const exponent = biased_exponent - EXPONENT_BIAS;\n        significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n        significand128.parts[1] = midh;\n        significand128.parts[2] = midl;\n        significand128.parts[3] = low;\n        if (significand128.parts[0] === 0 &&\n            significand128.parts[1] === 0 &&\n            significand128.parts[2] === 0 &&\n            significand128.parts[3] === 0) {\n            is_zero = true;\n        }\n        else {\n            for (k = 3; k >= 0; k--) {\n                let least_digits = 0;\n                const result = divideu128(significand128);\n                significand128 = result.quotient;\n                least_digits = result.rem.low;\n                if (!least_digits)\n                    continue;\n                for (j = 8; j >= 0; j--) {\n                    significand[k * 9 + j] = least_digits % 10;\n                    least_digits = Math.floor(least_digits / 10);\n                }\n            }\n        }\n        if (is_zero) {\n            significand_digits = 1;\n            significand[index] = 0;\n        }\n        else {\n            significand_digits = 36;\n            while (!significand[index]) {\n                significand_digits = significand_digits - 1;\n                index = index + 1;\n            }\n        }\n        const scientific_exponent = significand_digits - 1 + exponent;\n        if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n            if (significand_digits > 34) {\n                string.push(`${0}`);\n                if (exponent > 0)\n                    string.push(`E+${exponent}`);\n                else if (exponent < 0)\n                    string.push(`E${exponent}`);\n                return string.join('');\n            }\n            string.push(`${significand[index++]}`);\n            significand_digits = significand_digits - 1;\n            if (significand_digits) {\n                string.push('.');\n            }\n            for (let i = 0; i < significand_digits; i++) {\n                string.push(`${significand[index++]}`);\n            }\n            string.push('E');\n            if (scientific_exponent > 0) {\n                string.push(`+${scientific_exponent}`);\n            }\n            else {\n                string.push(`${scientific_exponent}`);\n            }\n        }\n        else {\n            if (exponent >= 0) {\n                for (let i = 0; i < significand_digits; i++) {\n                    string.push(`${significand[index++]}`);\n                }\n            }\n            else {\n                let radix_position = significand_digits + exponent;\n                if (radix_position > 0) {\n                    for (let i = 0; i < radix_position; i++) {\n                        string.push(`${significand[index++]}`);\n                    }\n                }\n                else {\n                    string.push('0');\n                }\n                string.push('.');\n                while (radix_position++ < 0) {\n                    string.push('0');\n                }\n                for (let i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n                    string.push(`${significand[index++]}`);\n                }\n            }\n        }\n        return string.join('');\n    }\n    toJSON() {\n        return { $numberDecimal: this.toString() };\n    }\n    toExtendedJSON() {\n        return { $numberDecimal: this.toString() };\n    }\n    static fromExtendedJSON(doc) {\n        return Decimal128.fromString(doc.$numberDecimal);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const d128string = inspect(this.toString(), options);\n        return `new Decimal128(${d128string})`;\n    }\n}\n\nclass Double extends BSONValue {\n    get _bsontype() {\n        return 'Double';\n    }\n    constructor(value) {\n        super();\n        if (value instanceof Number) {\n            value = value.valueOf();\n        }\n        this.value = +value;\n    }\n    static fromString(value) {\n        const coercedValue = Number(value);\n        if (value === 'NaN')\n            return new Double(NaN);\n        if (value === 'Infinity')\n            return new Double(Infinity);\n        if (value === '-Infinity')\n            return new Double(-Infinity);\n        if (!Number.isFinite(coercedValue)) {\n            throw new BSONError(`Input: ${value} is not representable as a Double`);\n        }\n        if (value.trim() !== value) {\n            throw new BSONError(`Input: '${value}' contains whitespace`);\n        }\n        if (value === '') {\n            throw new BSONError(`Input is an empty string`);\n        }\n        if (/[^-0-9.+eE]/.test(value)) {\n            throw new BSONError(`Input: '${value}' is not in decimal or exponential notation`);\n        }\n        return new Double(coercedValue);\n    }\n    valueOf() {\n        return this.value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    toString(radix) {\n        return this.value.toString(radix);\n    }\n    toExtendedJSON(options) {\n        if (options && (options.legacy || (options.relaxed && isFinite(this.value)))) {\n            return this.value;\n        }\n        if (Object.is(Math.sign(this.value), -0)) {\n            return { $numberDouble: '-0.0' };\n        }\n        return {\n            $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()\n        };\n    }\n    static fromExtendedJSON(doc, options) {\n        const doubleValue = parseFloat(doc.$numberDouble);\n        return options && options.relaxed ? doubleValue : new Double(doubleValue);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new Double(${inspect(this.value, options)})`;\n    }\n}\n\nclass Int32 extends BSONValue {\n    get _bsontype() {\n        return 'Int32';\n    }\n    constructor(value) {\n        super();\n        if (value instanceof Number) {\n            value = value.valueOf();\n        }\n        this.value = +value | 0;\n    }\n    static fromString(value) {\n        const cleanedValue = removeLeadingZerosAndExplicitPlus(value);\n        const coercedValue = Number(value);\n        if (BSON_INT32_MAX < coercedValue) {\n            throw new BSONError(`Input: '${value}' is larger than the maximum value for Int32`);\n        }\n        else if (BSON_INT32_MIN > coercedValue) {\n            throw new BSONError(`Input: '${value}' is smaller than the minimum value for Int32`);\n        }\n        else if (!Number.isSafeInteger(coercedValue)) {\n            throw new BSONError(`Input: '${value}' is not a safe integer`);\n        }\n        else if (coercedValue.toString() !== cleanedValue) {\n            throw new BSONError(`Input: '${value}' is not a valid Int32 string`);\n        }\n        return new Int32(coercedValue);\n    }\n    valueOf() {\n        return this.value;\n    }\n    toString(radix) {\n        return this.value.toString(radix);\n    }\n    toJSON() {\n        return this.value;\n    }\n    toExtendedJSON(options) {\n        if (options && (options.relaxed || options.legacy))\n            return this.value;\n        return { $numberInt: this.value.toString() };\n    }\n    static fromExtendedJSON(doc, options) {\n        return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new Int32(${inspect(this.value, options)})`;\n    }\n}\n\nclass MaxKey extends BSONValue {\n    get _bsontype() {\n        return 'MaxKey';\n    }\n    toExtendedJSON() {\n        return { $maxKey: 1 };\n    }\n    static fromExtendedJSON() {\n        return new MaxKey();\n    }\n    inspect() {\n        return 'new MaxKey()';\n    }\n}\n\nclass MinKey extends BSONValue {\n    get _bsontype() {\n        return 'MinKey';\n    }\n    toExtendedJSON() {\n        return { $minKey: 1 };\n    }\n    static fromExtendedJSON() {\n        return new MinKey();\n    }\n    inspect() {\n        return 'new MinKey()';\n    }\n}\n\nlet PROCESS_UNIQUE = null;\nconst __idCache = new WeakMap();\nclass ObjectId extends BSONValue {\n    get _bsontype() {\n        return 'ObjectId';\n    }\n    constructor(inputId) {\n        super();\n        let workingId;\n        if (typeof inputId === 'object' && inputId && 'id' in inputId) {\n            if (typeof inputId.id !== 'string' && !ArrayBuffer.isView(inputId.id)) {\n                throw new BSONError('Argument passed in must have an id that is of type string or Buffer');\n            }\n            if ('toHexString' in inputId && typeof inputId.toHexString === 'function') {\n                workingId = ByteUtils.fromHex(inputId.toHexString());\n            }\n            else {\n                workingId = inputId.id;\n            }\n        }\n        else {\n            workingId = inputId;\n        }\n        if (workingId == null || typeof workingId === 'number') {\n            this.buffer = ObjectId.generate(typeof workingId === 'number' ? workingId : undefined);\n        }\n        else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {\n            this.buffer = ByteUtils.toLocalBufferType(workingId);\n        }\n        else if (typeof workingId === 'string') {\n            if (ObjectId.validateHexString(workingId)) {\n                this.buffer = ByteUtils.fromHex(workingId);\n                if (ObjectId.cacheHexString) {\n                    __idCache.set(this, workingId);\n                }\n            }\n            else {\n                throw new BSONError('input must be a 24 character hex string, 12 byte Uint8Array, or an integer');\n            }\n        }\n        else {\n            throw new BSONError('Argument passed in does not match the accepted types');\n        }\n    }\n    get id() {\n        return this.buffer;\n    }\n    set id(value) {\n        this.buffer = value;\n        if (ObjectId.cacheHexString) {\n            __idCache.set(this, ByteUtils.toHex(value));\n        }\n    }\n    static validateHexString(string) {\n        if (string?.length !== 24)\n            return false;\n        for (let i = 0; i < 24; i++) {\n            const char = string.charCodeAt(i);\n            if ((char >= 48 && char <= 57) ||\n                (char >= 97 && char <= 102) ||\n                (char >= 65 && char <= 70)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n    toHexString() {\n        if (ObjectId.cacheHexString) {\n            const __id = __idCache.get(this);\n            if (__id)\n                return __id;\n        }\n        const hexString = ByteUtils.toHex(this.id);\n        if (ObjectId.cacheHexString) {\n            __idCache.set(this, hexString);\n        }\n        return hexString;\n    }\n    static getInc() {\n        return (ObjectId.index = (ObjectId.index + 1) % 0xffffff);\n    }\n    static generate(time) {\n        if ('number' !== typeof time) {\n            time = Math.floor(Date.now() / 1000);\n        }\n        const inc = ObjectId.getInc();\n        const buffer = ByteUtils.allocateUnsafe(12);\n        NumberUtils.setInt32BE(buffer, 0, time);\n        if (PROCESS_UNIQUE === null) {\n            PROCESS_UNIQUE = ByteUtils.randomBytes(5);\n        }\n        buffer[4] = PROCESS_UNIQUE[0];\n        buffer[5] = PROCESS_UNIQUE[1];\n        buffer[6] = PROCESS_UNIQUE[2];\n        buffer[7] = PROCESS_UNIQUE[3];\n        buffer[8] = PROCESS_UNIQUE[4];\n        buffer[11] = inc & 0xff;\n        buffer[10] = (inc >> 8) & 0xff;\n        buffer[9] = (inc >> 16) & 0xff;\n        return buffer;\n    }\n    toString(encoding) {\n        if (encoding === 'base64')\n            return ByteUtils.toBase64(this.id);\n        if (encoding === 'hex')\n            return this.toHexString();\n        return this.toHexString();\n    }\n    toJSON() {\n        return this.toHexString();\n    }\n    static is(variable) {\n        return (variable != null &&\n            typeof variable === 'object' &&\n            '_bsontype' in variable &&\n            variable._bsontype === 'ObjectId');\n    }\n    equals(otherId) {\n        if (otherId === undefined || otherId === null) {\n            return false;\n        }\n        if (ObjectId.is(otherId)) {\n            return (this.buffer[11] === otherId.buffer[11] && ByteUtils.equals(this.buffer, otherId.buffer));\n        }\n        if (typeof otherId === 'string') {\n            return otherId.toLowerCase() === this.toHexString();\n        }\n        if (typeof otherId === 'object' && typeof otherId.toHexString === 'function') {\n            const otherIdString = otherId.toHexString();\n            const thisIdString = this.toHexString();\n            return typeof otherIdString === 'string' && otherIdString.toLowerCase() === thisIdString;\n        }\n        return false;\n    }\n    getTimestamp() {\n        const timestamp = new Date();\n        const time = NumberUtils.getUint32BE(this.buffer, 0);\n        timestamp.setTime(Math.floor(time) * 1000);\n        return timestamp;\n    }\n    static createPk() {\n        return new ObjectId();\n    }\n    serializeInto(uint8array, index) {\n        uint8array[index] = this.buffer[0];\n        uint8array[index + 1] = this.buffer[1];\n        uint8array[index + 2] = this.buffer[2];\n        uint8array[index + 3] = this.buffer[3];\n        uint8array[index + 4] = this.buffer[4];\n        uint8array[index + 5] = this.buffer[5];\n        uint8array[index + 6] = this.buffer[6];\n        uint8array[index + 7] = this.buffer[7];\n        uint8array[index + 8] = this.buffer[8];\n        uint8array[index + 9] = this.buffer[9];\n        uint8array[index + 10] = this.buffer[10];\n        uint8array[index + 11] = this.buffer[11];\n        return 12;\n    }\n    static createFromTime(time) {\n        const buffer = ByteUtils.allocate(12);\n        for (let i = 11; i >= 4; i--)\n            buffer[i] = 0;\n        NumberUtils.setInt32BE(buffer, 0, time);\n        return new ObjectId(buffer);\n    }\n    static createFromHexString(hexString) {\n        if (hexString?.length !== 24) {\n            throw new BSONError('hex string must be 24 characters');\n        }\n        return new ObjectId(ByteUtils.fromHex(hexString));\n    }\n    static createFromBase64(base64) {\n        if (base64?.length !== 16) {\n            throw new BSONError('base64 string must be 16 characters');\n        }\n        return new ObjectId(ByteUtils.fromBase64(base64));\n    }\n    static isValid(id) {\n        if (id == null)\n            return false;\n        if (typeof id === 'string')\n            return ObjectId.validateHexString(id);\n        try {\n            new ObjectId(id);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    toExtendedJSON() {\n        if (this.toHexString)\n            return { $oid: this.toHexString() };\n        return { $oid: this.toString('hex') };\n    }\n    static fromExtendedJSON(doc) {\n        return new ObjectId(doc.$oid);\n    }\n    isCached() {\n        return ObjectId.cacheHexString && __idCache.has(this);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new ObjectId(${inspect(this.toHexString(), options)})`;\n    }\n}\nObjectId.index = Math.floor(Math.random() * 0xffffff);\n\nfunction internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined) {\n    let totalLength = 4 + 1;\n    if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n            totalLength += calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined);\n        }\n    }\n    else {\n        if (typeof object?.toBSON === 'function') {\n            object = object.toBSON();\n        }\n        for (const key of Object.keys(object)) {\n            totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n        }\n    }\n    return totalLength;\n}\nfunction calculateElement(name, value, serializeFunctions = false, isArray = false, ignoreUndefined = false) {\n    if (typeof value?.toBSON === 'function') {\n        value = value.toBSON();\n    }\n    switch (typeof value) {\n        case 'string':\n            return 1 + ByteUtils.utf8ByteLength(name) + 1 + 4 + ByteUtils.utf8ByteLength(value) + 1;\n        case 'number':\n            if (Math.floor(value) === value &&\n                value >= JS_INT_MIN &&\n                value <= JS_INT_MAX) {\n                if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (4 + 1);\n                }\n                else {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n                }\n            }\n            else {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n        case 'undefined':\n            if (isArray || !ignoreUndefined)\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n            return 0;\n        case 'boolean':\n            return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 1);\n        case 'object':\n            if (value != null &&\n                typeof value._bsontype === 'string' &&\n                value[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            }\n            else if (value == null || value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n            }\n            else if (value._bsontype === 'ObjectId') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (12 + 1);\n            }\n            else if (value instanceof Date || isDate(value)) {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n            else if (ArrayBuffer.isView(value) ||\n                value instanceof ArrayBuffer ||\n                isAnyArrayBuffer(value)) {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 4 + 1) + value.byteLength);\n            }\n            else if (value._bsontype === 'Long' ||\n                value._bsontype === 'Double' ||\n                value._bsontype === 'Timestamp') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n            else if (value._bsontype === 'Decimal128') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (16 + 1);\n            }\n            else if (value._bsontype === 'Code') {\n                if (value.scope != null && Object.keys(value.scope).length > 0) {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                        1 +\n                        4 +\n                        4 +\n                        ByteUtils.utf8ByteLength(value.code.toString()) +\n                        1 +\n                        internalCalculateObjectSize(value.scope, serializeFunctions, ignoreUndefined));\n                }\n                else {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                        1 +\n                        4 +\n                        ByteUtils.utf8ByteLength(value.code.toString()) +\n                        1);\n                }\n            }\n            else if (value._bsontype === 'Binary') {\n                const binary = value;\n                if (binary.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                        (binary.position + 1 + 4 + 1 + 4));\n                }\n                else {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (binary.position + 1 + 4 + 1));\n                }\n            }\n            else if (value._bsontype === 'Symbol') {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    ByteUtils.utf8ByteLength(value.value) +\n                    4 +\n                    1 +\n                    1);\n            }\n            else if (value._bsontype === 'DBRef') {\n                const ordered_values = Object.assign({\n                    $ref: value.collection,\n                    $id: value.oid\n                }, value.fields);\n                if (value.db != null) {\n                    ordered_values['$db'] = value.db;\n                }\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    internalCalculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined));\n            }\n            else if (value instanceof RegExp || isRegExp(value)) {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    ByteUtils.utf8ByteLength(value.source) +\n                    1 +\n                    (value.global ? 1 : 0) +\n                    (value.ignoreCase ? 1 : 0) +\n                    (value.multiline ? 1 : 0) +\n                    1);\n            }\n            else if (value._bsontype === 'BSONRegExp') {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    ByteUtils.utf8ByteLength(value.pattern) +\n                    1 +\n                    ByteUtils.utf8ByteLength(value.options) +\n                    1);\n            }\n            else {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    internalCalculateObjectSize(value, serializeFunctions, ignoreUndefined) +\n                    1);\n            }\n        case 'function':\n            if (serializeFunctions) {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    4 +\n                    ByteUtils.utf8ByteLength(value.toString()) +\n                    1);\n            }\n            return 0;\n        case 'bigint':\n            return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n        case 'symbol':\n            return 0;\n        default:\n            throw new BSONError(`Unrecognized JS type: ${typeof value}`);\n    }\n}\n\nfunction alphabetize(str) {\n    return str.split('').sort().join('');\n}\nclass BSONRegExp extends BSONValue {\n    get _bsontype() {\n        return 'BSONRegExp';\n    }\n    constructor(pattern, options) {\n        super();\n        this.pattern = pattern;\n        this.options = alphabetize(options ?? '');\n        if (this.pattern.indexOf('\\x00') !== -1) {\n            throw new BSONError(`BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`);\n        }\n        if (this.options.indexOf('\\x00') !== -1) {\n            throw new BSONError(`BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`);\n        }\n        for (let i = 0; i < this.options.length; i++) {\n            if (!(this.options[i] === 'i' ||\n                this.options[i] === 'm' ||\n                this.options[i] === 'x' ||\n                this.options[i] === 'l' ||\n                this.options[i] === 's' ||\n                this.options[i] === 'u')) {\n                throw new BSONError(`The regular expression option [${this.options[i]}] is not supported`);\n            }\n        }\n    }\n    static parseOptions(options) {\n        return options ? options.split('').sort().join('') : '';\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        if (options.legacy) {\n            return { $regex: this.pattern, $options: this.options };\n        }\n        return { $regularExpression: { pattern: this.pattern, options: this.options } };\n    }\n    static fromExtendedJSON(doc) {\n        if ('$regex' in doc) {\n            if (typeof doc.$regex !== 'string') {\n                if (doc.$regex._bsontype === 'BSONRegExp') {\n                    return doc;\n                }\n            }\n            else {\n                return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));\n            }\n        }\n        if ('$regularExpression' in doc) {\n            return new BSONRegExp(doc.$regularExpression.pattern, BSONRegExp.parseOptions(doc.$regularExpression.options));\n        }\n        throw new BSONError(`Unexpected BSONRegExp EJSON object form: ${JSON.stringify(doc)}`);\n    }\n    inspect(depth, options, inspect) {\n        const stylize = getStylizeFunction(options) ?? (v => v);\n        inspect ??= defaultInspect;\n        const pattern = stylize(inspect(this.pattern), 'regexp');\n        const flags = stylize(inspect(this.options), 'regexp');\n        return `new BSONRegExp(${pattern}, ${flags})`;\n    }\n}\n\nclass BSONSymbol extends BSONValue {\n    get _bsontype() {\n        return 'BSONSymbol';\n    }\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toString() {\n        return this.value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    toExtendedJSON() {\n        return { $symbol: this.value };\n    }\n    static fromExtendedJSON(doc) {\n        return new BSONSymbol(doc.$symbol);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new BSONSymbol(${inspect(this.value, options)})`;\n    }\n}\n\nconst LongWithoutOverridesClass = Long;\nclass Timestamp extends LongWithoutOverridesClass {\n    get _bsontype() {\n        return 'Timestamp';\n    }\n    get i() {\n        return this.low >>> 0;\n    }\n    get t() {\n        return this.high >>> 0;\n    }\n    constructor(low) {\n        if (low == null) {\n            super(0, 0, true);\n        }\n        else if (typeof low === 'bigint') {\n            super(low, true);\n        }\n        else if (Long.isLong(low)) {\n            super(low.low, low.high, true);\n        }\n        else if (typeof low === 'object' && 't' in low && 'i' in low) {\n            if (typeof low.t !== 'number' && (typeof low.t !== 'object' || low.t._bsontype !== 'Int32')) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide t as a number');\n            }\n            if (typeof low.i !== 'number' && (typeof low.i !== 'object' || low.i._bsontype !== 'Int32')) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide i as a number');\n            }\n            const t = Number(low.t);\n            const i = Number(low.i);\n            if (t < 0 || Number.isNaN(t)) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide a positive t');\n            }\n            if (i < 0 || Number.isNaN(i)) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide a positive i');\n            }\n            if (t > 0xffff_ffff) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide t equal or less than uint32 max');\n            }\n            if (i > 0xffff_ffff) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide i equal or less than uint32 max');\n            }\n            super(i, t, true);\n        }\n        else {\n            throw new BSONError('A Timestamp can only be constructed with: bigint, Long, or { t: number; i: number }');\n        }\n    }\n    toJSON() {\n        return {\n            $timestamp: this.toString()\n        };\n    }\n    static fromInt(value) {\n        return new Timestamp(Long.fromInt(value, true));\n    }\n    static fromNumber(value) {\n        return new Timestamp(Long.fromNumber(value, true));\n    }\n    static fromBits(lowBits, highBits) {\n        return new Timestamp({ i: lowBits, t: highBits });\n    }\n    static fromString(str, optRadix) {\n        return new Timestamp(Long.fromString(str, true, optRadix));\n    }\n    toExtendedJSON() {\n        return { $timestamp: { t: this.t, i: this.i } };\n    }\n    static fromExtendedJSON(doc) {\n        const i = Long.isLong(doc.$timestamp.i)\n            ? doc.$timestamp.i.getLowBitsUnsigned()\n            : doc.$timestamp.i;\n        const t = Long.isLong(doc.$timestamp.t)\n            ? doc.$timestamp.t.getLowBitsUnsigned()\n            : doc.$timestamp.t;\n        return new Timestamp({ t, i });\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const t = inspect(this.t, options);\n        const i = inspect(this.i, options);\n        return `new Timestamp({ t: ${t}, i: ${i} })`;\n    }\n}\nTimestamp.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;\n\nconst JS_INT_MAX_LONG = Long.fromNumber(JS_INT_MAX);\nconst JS_INT_MIN_LONG = Long.fromNumber(JS_INT_MIN);\nfunction internalDeserialize(buffer, options, isArray) {\n    options = options == null ? {} : options;\n    const index = options && options.index ? options.index : 0;\n    const size = NumberUtils.getInt32LE(buffer, index);\n    if (size < 5) {\n        throw new BSONError(`bson size must be >= 5, is ${size}`);\n    }\n    if (options.allowObjectSmallerThanBufferSize && buffer.length < size) {\n        throw new BSONError(`buffer length ${buffer.length} must be >= bson size ${size}`);\n    }\n    if (!options.allowObjectSmallerThanBufferSize && buffer.length !== size) {\n        throw new BSONError(`buffer length ${buffer.length} must === bson size ${size}`);\n    }\n    if (size + index > buffer.byteLength) {\n        throw new BSONError(`(bson size ${size} + options.index ${index} must be <= buffer length ${buffer.byteLength})`);\n    }\n    if (buffer[index + size - 1] !== 0) {\n        throw new BSONError(\"One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00\");\n    }\n    return deserializeObject(buffer, index, options, isArray);\n}\nconst allowedDBRefKeys = /^\\$ref$|^\\$id$|^\\$db$/;\nfunction deserializeObject(buffer, index, options, isArray = false) {\n    const fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];\n    const raw = options['raw'] == null ? false : options['raw'];\n    const bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;\n    const promoteBuffers = options.promoteBuffers ?? false;\n    const promoteLongs = options.promoteLongs ?? true;\n    const promoteValues = options.promoteValues ?? true;\n    const useBigInt64 = options.useBigInt64 ?? false;\n    if (useBigInt64 && !promoteValues) {\n        throw new BSONError('Must either request bigint or Long for int64 deserialization');\n    }\n    if (useBigInt64 && !promoteLongs) {\n        throw new BSONError('Must either request bigint or Long for int64 deserialization');\n    }\n    const validation = options.validation == null ? { utf8: true } : options.validation;\n    let globalUTFValidation = true;\n    let validationSetting;\n    let utf8KeysSet;\n    const utf8ValidatedKeys = validation.utf8;\n    if (typeof utf8ValidatedKeys === 'boolean') {\n        validationSetting = utf8ValidatedKeys;\n    }\n    else {\n        globalUTFValidation = false;\n        const utf8ValidationValues = Object.keys(utf8ValidatedKeys).map(function (key) {\n            return utf8ValidatedKeys[key];\n        });\n        if (utf8ValidationValues.length === 0) {\n            throw new BSONError('UTF-8 validation setting cannot be empty');\n        }\n        if (typeof utf8ValidationValues[0] !== 'boolean') {\n            throw new BSONError('Invalid UTF-8 validation option, must specify boolean values');\n        }\n        validationSetting = utf8ValidationValues[0];\n        if (!utf8ValidationValues.every(item => item === validationSetting)) {\n            throw new BSONError('Invalid UTF-8 validation option - keys must be all true or all false');\n        }\n    }\n    if (!globalUTFValidation) {\n        utf8KeysSet = new Set();\n        for (const key of Object.keys(utf8ValidatedKeys)) {\n            utf8KeysSet.add(key);\n        }\n    }\n    const startIndex = index;\n    if (buffer.length < 5)\n        throw new BSONError('corrupt bson message < 5 bytes long');\n    const size = NumberUtils.getInt32LE(buffer, index);\n    index += 4;\n    if (size < 5 || size > buffer.length)\n        throw new BSONError('corrupt bson message');\n    const object = isArray ? [] : {};\n    let arrayIndex = 0;\n    let isPossibleDBRef = isArray ? false : null;\n    while (true) {\n        const elementType = buffer[index++];\n        if (elementType === 0)\n            break;\n        let i = index;\n        while (buffer[i] !== 0x00 && i < buffer.length) {\n            i++;\n        }\n        if (i >= buffer.byteLength)\n            throw new BSONError('Bad BSON Document: illegal CString');\n        const name = isArray ? arrayIndex++ : ByteUtils.toUTF8(buffer, index, i, false);\n        let shouldValidateKey = true;\n        if (globalUTFValidation || utf8KeysSet?.has(name)) {\n            shouldValidateKey = validationSetting;\n        }\n        else {\n            shouldValidateKey = !validationSetting;\n        }\n        if (isPossibleDBRef !== false && name[0] === '$') {\n            isPossibleDBRef = allowedDBRefKeys.test(name);\n        }\n        let value;\n        index = i + 1;\n        if (elementType === BSON_DATA_STRING) {\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            value = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n        }\n        else if (elementType === BSON_DATA_OID) {\n            const oid = ByteUtils.allocateUnsafe(12);\n            for (let i = 0; i < 12; i++)\n                oid[i] = buffer[index + i];\n            value = new ObjectId(oid);\n            index = index + 12;\n        }\n        else if (elementType === BSON_DATA_INT && promoteValues === false) {\n            value = new Int32(NumberUtils.getInt32LE(buffer, index));\n            index += 4;\n        }\n        else if (elementType === BSON_DATA_INT) {\n            value = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n        }\n        else if (elementType === BSON_DATA_NUMBER) {\n            value = NumberUtils.getFloat64LE(buffer, index);\n            index += 8;\n            if (promoteValues === false)\n                value = new Double(value);\n        }\n        else if (elementType === BSON_DATA_DATE) {\n            const lowBits = NumberUtils.getInt32LE(buffer, index);\n            const highBits = NumberUtils.getInt32LE(buffer, index + 4);\n            index += 8;\n            value = new Date(new Long(lowBits, highBits).toNumber());\n        }\n        else if (elementType === BSON_DATA_BOOLEAN) {\n            if (buffer[index] !== 0 && buffer[index] !== 1)\n                throw new BSONError('illegal boolean type value');\n            value = buffer[index++] === 1;\n        }\n        else if (elementType === BSON_DATA_OBJECT) {\n            const _index = index;\n            const objectSize = NumberUtils.getInt32LE(buffer, index);\n            if (objectSize <= 0 || objectSize > buffer.length - index)\n                throw new BSONError('bad embedded document length in bson');\n            if (raw) {\n                value = buffer.subarray(index, index + objectSize);\n            }\n            else {\n                let objectOptions = options;\n                if (!globalUTFValidation) {\n                    objectOptions = { ...options, validation: { utf8: shouldValidateKey } };\n                }\n                value = deserializeObject(buffer, _index, objectOptions, false);\n            }\n            index = index + objectSize;\n        }\n        else if (elementType === BSON_DATA_ARRAY) {\n            const _index = index;\n            const objectSize = NumberUtils.getInt32LE(buffer, index);\n            let arrayOptions = options;\n            const stopIndex = index + objectSize;\n            if (fieldsAsRaw && fieldsAsRaw[name]) {\n                arrayOptions = { ...options, raw: true };\n            }\n            if (!globalUTFValidation) {\n                arrayOptions = { ...arrayOptions, validation: { utf8: shouldValidateKey } };\n            }\n            value = deserializeObject(buffer, _index, arrayOptions, true);\n            index = index + objectSize;\n            if (buffer[index - 1] !== 0)\n                throw new BSONError('invalid array terminator byte');\n            if (index !== stopIndex)\n                throw new BSONError('corrupted array bson');\n        }\n        else if (elementType === BSON_DATA_UNDEFINED) {\n            value = undefined;\n        }\n        else if (elementType === BSON_DATA_NULL) {\n            value = null;\n        }\n        else if (elementType === BSON_DATA_LONG) {\n            if (useBigInt64) {\n                value = NumberUtils.getBigInt64LE(buffer, index);\n                index += 8;\n            }\n            else {\n                const lowBits = NumberUtils.getInt32LE(buffer, index);\n                const highBits = NumberUtils.getInt32LE(buffer, index + 4);\n                index += 8;\n                const long = new Long(lowBits, highBits);\n                if (promoteLongs && promoteValues === true) {\n                    value =\n                        long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG)\n                            ? long.toNumber()\n                            : long;\n                }\n                else {\n                    value = long;\n                }\n            }\n        }\n        else if (elementType === BSON_DATA_DECIMAL128) {\n            const bytes = ByteUtils.allocateUnsafe(16);\n            for (let i = 0; i < 16; i++)\n                bytes[i] = buffer[index + i];\n            index = index + 16;\n            value = new Decimal128(bytes);\n        }\n        else if (elementType === BSON_DATA_BINARY) {\n            let binarySize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            const totalBinarySize = binarySize;\n            const subType = buffer[index++];\n            if (binarySize < 0)\n                throw new BSONError('Negative binary type element size found');\n            if (binarySize > buffer.byteLength)\n                throw new BSONError('Binary type size larger than document size');\n            if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n                binarySize = NumberUtils.getInt32LE(buffer, index);\n                index += 4;\n                if (binarySize < 0)\n                    throw new BSONError('Negative binary type element size found for subtype 0x02');\n                if (binarySize > totalBinarySize - 4)\n                    throw new BSONError('Binary type with subtype 0x02 contains too long binary size');\n                if (binarySize < totalBinarySize - 4)\n                    throw new BSONError('Binary type with subtype 0x02 contains too short binary size');\n            }\n            if (promoteBuffers && promoteValues) {\n                value = ByteUtils.toLocalBufferType(buffer.subarray(index, index + binarySize));\n            }\n            else {\n                value = new Binary(buffer.subarray(index, index + binarySize), subType);\n                if (subType === BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n                    value = value.toUUID();\n                }\n            }\n            index = index + binarySize;\n        }\n        else if (elementType === BSON_DATA_REGEXP && bsonRegExp === false) {\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const source = ByteUtils.toUTF8(buffer, index, i, false);\n            index = i + 1;\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const regExpOptions = ByteUtils.toUTF8(buffer, index, i, false);\n            index = i + 1;\n            const optionsArray = new Array(regExpOptions.length);\n            for (i = 0; i < regExpOptions.length; i++) {\n                switch (regExpOptions[i]) {\n                    case 'm':\n                        optionsArray[i] = 'm';\n                        break;\n                    case 's':\n                        optionsArray[i] = 'g';\n                        break;\n                    case 'i':\n                        optionsArray[i] = 'i';\n                        break;\n                }\n            }\n            value = new RegExp(source, optionsArray.join(''));\n        }\n        else if (elementType === BSON_DATA_REGEXP && bsonRegExp === true) {\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const source = ByteUtils.toUTF8(buffer, index, i, false);\n            index = i + 1;\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const regExpOptions = ByteUtils.toUTF8(buffer, index, i, false);\n            index = i + 1;\n            value = new BSONRegExp(source, regExpOptions);\n        }\n        else if (elementType === BSON_DATA_SYMBOL) {\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            const symbol = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            value = promoteValues ? symbol : new BSONSymbol(symbol);\n            index = index + stringSize;\n        }\n        else if (elementType === BSON_DATA_TIMESTAMP) {\n            value = new Timestamp({\n                i: NumberUtils.getUint32LE(buffer, index),\n                t: NumberUtils.getUint32LE(buffer, index + 4)\n            });\n            index += 8;\n        }\n        else if (elementType === BSON_DATA_MIN_KEY) {\n            value = new MinKey();\n        }\n        else if (elementType === BSON_DATA_MAX_KEY) {\n            value = new MaxKey();\n        }\n        else if (elementType === BSON_DATA_CODE) {\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            const functionString = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            value = new Code(functionString);\n            index = index + stringSize;\n        }\n        else if (elementType === BSON_DATA_CODE_W_SCOPE) {\n            const totalSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (totalSize < 4 + 4 + 4 + 1) {\n                throw new BSONError('code_w_scope total size shorter minimum expected length');\n            }\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            const functionString = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n            const _index = index;\n            const objectSize = NumberUtils.getInt32LE(buffer, index);\n            const scopeObject = deserializeObject(buffer, _index, options, false);\n            index = index + objectSize;\n            if (totalSize < 4 + 4 + objectSize + stringSize) {\n                throw new BSONError('code_w_scope total size is too short, truncating scope');\n            }\n            if (totalSize > 4 + 4 + objectSize + stringSize) {\n                throw new BSONError('code_w_scope total size is too long, clips outer document');\n            }\n            value = new Code(functionString, scopeObject);\n        }\n        else if (elementType === BSON_DATA_DBPOINTER) {\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0)\n                throw new BSONError('bad string length in bson');\n            const namespace = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n            const oidBuffer = ByteUtils.allocateUnsafe(12);\n            for (let i = 0; i < 12; i++)\n                oidBuffer[i] = buffer[index + i];\n            const oid = new ObjectId(oidBuffer);\n            index = index + 12;\n            value = new DBRef(namespace, oid);\n        }\n        else {\n            throw new BSONError(`Detected unknown BSON type ${elementType.toString(16)} for fieldname \"${name}\"`);\n        }\n        if (name === '__proto__') {\n            Object.defineProperty(object, name, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        }\n        else {\n            object[name] = value;\n        }\n    }\n    if (size !== index - startIndex) {\n        if (isArray)\n            throw new BSONError('corrupt array bson');\n        throw new BSONError('corrupt object bson');\n    }\n    if (!isPossibleDBRef)\n        return object;\n    if (isDBRefLike(object)) {\n        const copy = Object.assign({}, object);\n        delete copy.$ref;\n        delete copy.$id;\n        delete copy.$db;\n        return new DBRef(object.$ref, object.$id, object.$db, copy);\n    }\n    return object;\n}\n\nconst regexp = /\\x00/;\nconst ignoreKeys = new Set(['$db', '$ref', '$id', '$clusterTime']);\nfunction serializeString(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_STRING;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes + 1;\n    buffer[index - 1] = 0;\n    const size = ByteUtils.encodeUTF8Into(buffer, value, index + 4);\n    NumberUtils.setInt32LE(buffer, index, size + 1);\n    index = index + 4 + size;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeNumber(buffer, key, value, index) {\n    const isNegativeZero = Object.is(value, -0);\n    const type = !isNegativeZero &&\n        Number.isSafeInteger(value) &&\n        value <= BSON_INT32_MAX &&\n        value >= BSON_INT32_MIN\n        ? BSON_DATA_INT\n        : BSON_DATA_NUMBER;\n    buffer[index++] = type;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0x00;\n    if (type === BSON_DATA_INT) {\n        index += NumberUtils.setInt32LE(buffer, index, value);\n    }\n    else {\n        index += NumberUtils.setFloat64LE(buffer, index, value);\n    }\n    return index;\n}\nfunction serializeBigInt(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_LONG;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index += numberOfWrittenBytes;\n    buffer[index++] = 0;\n    index += NumberUtils.setBigInt64LE(buffer, index, value);\n    return index;\n}\nfunction serializeNull(buffer, key, _, index) {\n    buffer[index++] = BSON_DATA_NULL;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeBoolean(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BOOLEAN;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    buffer[index++] = value ? 1 : 0;\n    return index;\n}\nfunction serializeDate(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_DATE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const dateInMilis = Long.fromNumber(value.getTime());\n    const lowBits = dateInMilis.getLowBits();\n    const highBits = dateInMilis.getHighBits();\n    index += NumberUtils.setInt32LE(buffer, index, lowBits);\n    index += NumberUtils.setInt32LE(buffer, index, highBits);\n    return index;\n}\nfunction serializeRegExp(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_REGEXP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    if (value.source && value.source.match(regexp) != null) {\n        throw new BSONError('value ' + value.source + ' must not contain null bytes');\n    }\n    index = index + ByteUtils.encodeUTF8Into(buffer, value.source, index);\n    buffer[index++] = 0x00;\n    if (value.ignoreCase)\n        buffer[index++] = 0x69;\n    if (value.global)\n        buffer[index++] = 0x73;\n    if (value.multiline)\n        buffer[index++] = 0x6d;\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeBSONRegExp(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_REGEXP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    if (value.pattern.match(regexp) != null) {\n        throw new BSONError('pattern ' + value.pattern + ' must not contain null bytes');\n    }\n    index = index + ByteUtils.encodeUTF8Into(buffer, value.pattern, index);\n    buffer[index++] = 0x00;\n    const sortedOptions = value.options.split('').sort().join('');\n    index = index + ByteUtils.encodeUTF8Into(buffer, sortedOptions, index);\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeMinMax(buffer, key, value, index) {\n    if (value === null) {\n        buffer[index++] = BSON_DATA_NULL;\n    }\n    else if (value._bsontype === 'MinKey') {\n        buffer[index++] = BSON_DATA_MIN_KEY;\n    }\n    else {\n        buffer[index++] = BSON_DATA_MAX_KEY;\n    }\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeObjectId(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_OID;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    index += value.serializeInto(buffer, index);\n    return index;\n}\nfunction serializeBuffer(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BINARY;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const size = value.length;\n    index += NumberUtils.setInt32LE(buffer, index, size);\n    buffer[index++] = BSON_BINARY_SUBTYPE_DEFAULT;\n    if (size <= 16) {\n        for (let i = 0; i < size; i++)\n            buffer[index + i] = value[i];\n    }\n    else {\n        buffer.set(value, index);\n    }\n    index = index + size;\n    return index;\n}\nfunction serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path) {\n    if (path.has(value)) {\n        throw new BSONError('Cannot convert circular structure to BSON');\n    }\n    path.add(value);\n    buffer[index++] = Array.isArray(value) ? BSON_DATA_ARRAY : BSON_DATA_OBJECT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n    path.delete(value);\n    return endIndex;\n}\nfunction serializeDecimal128(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_DECIMAL128;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    for (let i = 0; i < 16; i++)\n        buffer[index + i] = value.bytes[i];\n    return index + 16;\n}\nfunction serializeLong(buffer, key, value, index) {\n    buffer[index++] =\n        value._bsontype === 'Long' ? BSON_DATA_LONG : BSON_DATA_TIMESTAMP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const lowBits = value.getLowBits();\n    const highBits = value.getHighBits();\n    index += NumberUtils.setInt32LE(buffer, index, lowBits);\n    index += NumberUtils.setInt32LE(buffer, index, highBits);\n    return index;\n}\nfunction serializeInt32(buffer, key, value, index) {\n    value = value.valueOf();\n    buffer[index++] = BSON_DATA_INT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    index += NumberUtils.setInt32LE(buffer, index, value);\n    return index;\n}\nfunction serializeDouble(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_NUMBER;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    index += NumberUtils.setFloat64LE(buffer, index, value.value);\n    return index;\n}\nfunction serializeFunction(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_CODE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const functionString = value.toString();\n    const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n    NumberUtils.setInt32LE(buffer, index, size);\n    index = index + 4 + size - 1;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeCode(buffer, key, value, index, checkKeys = false, depth = 0, serializeFunctions = false, ignoreUndefined = true, path) {\n    if (value.scope && typeof value.scope === 'object') {\n        buffer[index++] = BSON_DATA_CODE_W_SCOPE;\n        const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n        index = index + numberOfWrittenBytes;\n        buffer[index++] = 0;\n        let startIndex = index;\n        const functionString = value.code;\n        index = index + 4;\n        const codeSize = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n        NumberUtils.setInt32LE(buffer, index, codeSize);\n        buffer[index + 4 + codeSize - 1] = 0;\n        index = index + codeSize + 4;\n        const endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n        index = endIndex - 1;\n        const totalSize = endIndex - startIndex;\n        startIndex += NumberUtils.setInt32LE(buffer, startIndex, totalSize);\n        buffer[index++] = 0;\n    }\n    else {\n        buffer[index++] = BSON_DATA_CODE;\n        const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n        index = index + numberOfWrittenBytes;\n        buffer[index++] = 0;\n        const functionString = value.code.toString();\n        const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n        NumberUtils.setInt32LE(buffer, index, size);\n        index = index + 4 + size - 1;\n        buffer[index++] = 0;\n    }\n    return index;\n}\nfunction serializeBinary(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BINARY;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const data = value.buffer;\n    let size = value.position;\n    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY)\n        size = size + 4;\n    index += NumberUtils.setInt32LE(buffer, index, size);\n    buffer[index++] = value.sub_type;\n    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n        size = size - 4;\n        index += NumberUtils.setInt32LE(buffer, index, size);\n    }\n    if (value.sub_type === Binary.SUBTYPE_VECTOR) {\n        validateBinaryVector(value);\n    }\n    if (size <= 16) {\n        for (let i = 0; i < size; i++)\n            buffer[index + i] = data[i];\n    }\n    else {\n        buffer.set(data, index);\n    }\n    index = index + value.position;\n    return index;\n}\nfunction serializeSymbol(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_SYMBOL;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const size = ByteUtils.encodeUTF8Into(buffer, value.value, index + 4) + 1;\n    NumberUtils.setInt32LE(buffer, index, size);\n    index = index + 4 + size - 1;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path) {\n    buffer[index++] = BSON_DATA_OBJECT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    let startIndex = index;\n    let output = {\n        $ref: value.collection || value.namespace,\n        $id: value.oid\n    };\n    if (value.db != null) {\n        output.$db = value.db;\n    }\n    output = Object.assign(output, value.fields);\n    const endIndex = serializeInto(buffer, output, false, index, depth + 1, serializeFunctions, true, path);\n    const size = endIndex - startIndex;\n    startIndex += NumberUtils.setInt32LE(buffer, index, size);\n    return endIndex;\n}\nfunction serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {\n    if (path == null) {\n        if (object == null) {\n            buffer[0] = 0x05;\n            buffer[1] = 0x00;\n            buffer[2] = 0x00;\n            buffer[3] = 0x00;\n            buffer[4] = 0x00;\n            return 5;\n        }\n        if (Array.isArray(object)) {\n            throw new BSONError('serialize does not support an array as the root input');\n        }\n        if (typeof object !== 'object') {\n            throw new BSONError('serialize does not support non-object as the root input');\n        }\n        else if ('_bsontype' in object && typeof object._bsontype === 'string') {\n            throw new BSONError(`BSON types cannot be serialized as a document`);\n        }\n        else if (isDate(object) ||\n            isRegExp(object) ||\n            isUint8Array(object) ||\n            isAnyArrayBuffer(object)) {\n            throw new BSONError(`date, regexp, typedarray, and arraybuffer cannot be BSON documents`);\n        }\n        path = new Set();\n    }\n    path.add(object);\n    let index = startingIndex + 4;\n    if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n            const key = `${i}`;\n            let value = object[i];\n            if (typeof value?.toBSON === 'function') {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (value === undefined) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (type === 'string') {\n                index = serializeString(buffer, key, value, index);\n            }\n            else if (type === 'number') {\n                index = serializeNumber(buffer, key, value, index);\n            }\n            else if (type === 'bigint') {\n                index = serializeBigInt(buffer, key, value, index);\n            }\n            else if (type === 'boolean') {\n                index = serializeBoolean(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype == null) {\n                if (value instanceof Date || isDate(value)) {\n                    index = serializeDate(buffer, key, value, index);\n                }\n                else if (value instanceof Uint8Array || isUint8Array(value)) {\n                    index = serializeBuffer(buffer, key, value, index);\n                }\n                else if (value instanceof RegExp || isRegExp(value)) {\n                    index = serializeRegExp(buffer, key, value, index);\n                }\n                else {\n                    index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n            }\n            else if (type === 'object') {\n                if (value[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n                    throw new BSONVersionError();\n                }\n                else if (value._bsontype === 'ObjectId') {\n                    index = serializeObjectId(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Decimal128') {\n                    index = serializeDecimal128(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n                    index = serializeLong(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Double') {\n                    index = serializeDouble(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Code') {\n                    index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n                else if (value._bsontype === 'Binary') {\n                    index = serializeBinary(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'BSONSymbol') {\n                    index = serializeSymbol(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'DBRef') {\n                    index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n                }\n                else if (value._bsontype === 'BSONRegExp') {\n                    index = serializeBSONRegExp(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Int32') {\n                    index = serializeInt32(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                    index = serializeMinMax(buffer, key, value, index);\n                }\n                else if (typeof value._bsontype !== 'undefined') {\n                    throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n                }\n            }\n            else if (type === 'function' && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            }\n        }\n    }\n    else if (object instanceof Map || isMap(object)) {\n        const iterator = object.entries();\n        let done = false;\n        while (!done) {\n            const entry = iterator.next();\n            done = !!entry.done;\n            if (done)\n                continue;\n            const key = entry.value ? entry.value[0] : undefined;\n            let value = entry.value ? entry.value[1] : undefined;\n            if (typeof value?.toBSON === 'function') {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (typeof key === 'string' && !ignoreKeys.has(key)) {\n                if (key.match(regexp) != null) {\n                    throw new BSONError('key ' + key + ' must not contain null bytes');\n                }\n                if (checkKeys) {\n                    if ('$' === key[0]) {\n                        throw new BSONError('key ' + key + \" must not start with '$'\");\n                    }\n                    else if (key.includes('.')) {\n                        throw new BSONError('key ' + key + \" must not contain '.'\");\n                    }\n                }\n            }\n            if (value === undefined) {\n                if (ignoreUndefined === false)\n                    index = serializeNull(buffer, key, value, index);\n            }\n            else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (type === 'string') {\n                index = serializeString(buffer, key, value, index);\n            }\n            else if (type === 'number') {\n                index = serializeNumber(buffer, key, value, index);\n            }\n            else if (type === 'bigint') {\n                index = serializeBigInt(buffer, key, value, index);\n            }\n            else if (type === 'boolean') {\n                index = serializeBoolean(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype == null) {\n                if (value instanceof Date || isDate(value)) {\n                    index = serializeDate(buffer, key, value, index);\n                }\n                else if (value instanceof Uint8Array || isUint8Array(value)) {\n                    index = serializeBuffer(buffer, key, value, index);\n                }\n                else if (value instanceof RegExp || isRegExp(value)) {\n                    index = serializeRegExp(buffer, key, value, index);\n                }\n                else {\n                    index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n            }\n            else if (type === 'object') {\n                if (value[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n                    throw new BSONVersionError();\n                }\n                else if (value._bsontype === 'ObjectId') {\n                    index = serializeObjectId(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Decimal128') {\n                    index = serializeDecimal128(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n                    index = serializeLong(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Double') {\n                    index = serializeDouble(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Code') {\n                    index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n                else if (value._bsontype === 'Binary') {\n                    index = serializeBinary(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'BSONSymbol') {\n                    index = serializeSymbol(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'DBRef') {\n                    index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n                }\n                else if (value._bsontype === 'BSONRegExp') {\n                    index = serializeBSONRegExp(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Int32') {\n                    index = serializeInt32(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                    index = serializeMinMax(buffer, key, value, index);\n                }\n                else if (typeof value._bsontype !== 'undefined') {\n                    throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n                }\n            }\n            else if (type === 'function' && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            }\n        }\n    }\n    else {\n        if (typeof object?.toBSON === 'function') {\n            object = object.toBSON();\n            if (object != null && typeof object !== 'object') {\n                throw new BSONError('toBSON function did not return an object');\n            }\n        }\n        for (const key of Object.keys(object)) {\n            let value = object[key];\n            if (typeof value?.toBSON === 'function') {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (typeof key === 'string' && !ignoreKeys.has(key)) {\n                if (key.match(regexp) != null) {\n                    throw new BSONError('key ' + key + ' must not contain null bytes');\n                }\n                if (checkKeys) {\n                    if ('$' === key[0]) {\n                        throw new BSONError('key ' + key + \" must not start with '$'\");\n                    }\n                    else if (key.includes('.')) {\n                        throw new BSONError('key ' + key + \" must not contain '.'\");\n                    }\n                }\n            }\n            if (value === undefined) {\n                if (ignoreUndefined === false)\n                    index = serializeNull(buffer, key, value, index);\n            }\n            else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (type === 'string') {\n                index = serializeString(buffer, key, value, index);\n            }\n            else if (type === 'number') {\n                index = serializeNumber(buffer, key, value, index);\n            }\n            else if (type === 'bigint') {\n                index = serializeBigInt(buffer, key, value, index);\n            }\n            else if (type === 'boolean') {\n                index = serializeBoolean(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype == null) {\n                if (value instanceof Date || isDate(value)) {\n                    index = serializeDate(buffer, key, value, index);\n                }\n                else if (value instanceof Uint8Array || isUint8Array(value)) {\n                    index = serializeBuffer(buffer, key, value, index);\n                }\n                else if (value instanceof RegExp || isRegExp(value)) {\n                    index = serializeRegExp(buffer, key, value, index);\n                }\n                else {\n                    index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n            }\n            else if (type === 'object') {\n                if (value[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n                    throw new BSONVersionError();\n                }\n                else if (value._bsontype === 'ObjectId') {\n                    index = serializeObjectId(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Decimal128') {\n                    index = serializeDecimal128(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n                    index = serializeLong(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Double') {\n                    index = serializeDouble(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Code') {\n                    index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n                else if (value._bsontype === 'Binary') {\n                    index = serializeBinary(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'BSONSymbol') {\n                    index = serializeSymbol(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'DBRef') {\n                    index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n                }\n                else if (value._bsontype === 'BSONRegExp') {\n                    index = serializeBSONRegExp(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Int32') {\n                    index = serializeInt32(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                    index = serializeMinMax(buffer, key, value, index);\n                }\n                else if (typeof value._bsontype !== 'undefined') {\n                    throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n                }\n            }\n            else if (type === 'function' && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            }\n        }\n    }\n    path.delete(object);\n    buffer[index++] = 0x00;\n    const size = index - startingIndex;\n    startingIndex += NumberUtils.setInt32LE(buffer, startingIndex, size);\n    return index;\n}\n\nfunction isBSONType(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        '_bsontype' in value &&\n        typeof value._bsontype === 'string');\n}\nconst keysToCodecs = {\n    $oid: ObjectId,\n    $binary: Binary,\n    $uuid: Binary,\n    $symbol: BSONSymbol,\n    $numberInt: Int32,\n    $numberDecimal: Decimal128,\n    $numberDouble: Double,\n    $numberLong: Long,\n    $minKey: MinKey,\n    $maxKey: MaxKey,\n    $regex: BSONRegExp,\n    $regularExpression: BSONRegExp,\n    $timestamp: Timestamp\n};\nfunction deserializeValue(value, options = {}) {\n    if (typeof value === 'number') {\n        const in32BitRange = value <= BSON_INT32_MAX && value >= BSON_INT32_MIN;\n        const in64BitRange = value <= BSON_INT64_MAX && value >= BSON_INT64_MIN;\n        if (options.relaxed || options.legacy) {\n            return value;\n        }\n        if (Number.isInteger(value) && !Object.is(value, -0)) {\n            if (in32BitRange) {\n                return new Int32(value);\n            }\n            if (in64BitRange) {\n                if (options.useBigInt64) {\n                    return BigInt(value);\n                }\n                return Long.fromNumber(value);\n            }\n        }\n        return new Double(value);\n    }\n    if (value == null || typeof value !== 'object')\n        return value;\n    if (value.$undefined)\n        return null;\n    const keys = Object.keys(value).filter(k => k.startsWith('$') && value[k] != null);\n    for (let i = 0; i < keys.length; i++) {\n        const c = keysToCodecs[keys[i]];\n        if (c)\n            return c.fromExtendedJSON(value, options);\n    }\n    if (value.$date != null) {\n        const d = value.$date;\n        const date = new Date();\n        if (options.legacy) {\n            if (typeof d === 'number')\n                date.setTime(d);\n            else if (typeof d === 'string')\n                date.setTime(Date.parse(d));\n            else if (typeof d === 'bigint')\n                date.setTime(Number(d));\n            else\n                throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n        }\n        else {\n            if (typeof d === 'string')\n                date.setTime(Date.parse(d));\n            else if (Long.isLong(d))\n                date.setTime(d.toNumber());\n            else if (typeof d === 'number' && options.relaxed)\n                date.setTime(d);\n            else if (typeof d === 'bigint')\n                date.setTime(Number(d));\n            else\n                throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n        }\n        return date;\n    }\n    if (value.$code != null) {\n        const copy = Object.assign({}, value);\n        if (value.$scope) {\n            copy.$scope = deserializeValue(value.$scope);\n        }\n        return Code.fromExtendedJSON(value);\n    }\n    if (isDBRefLike(value) || value.$dbPointer) {\n        const v = value.$ref ? value : value.$dbPointer;\n        if (v instanceof DBRef)\n            return v;\n        const dollarKeys = Object.keys(v).filter(k => k.startsWith('$'));\n        let valid = true;\n        dollarKeys.forEach(k => {\n            if (['$ref', '$id', '$db'].indexOf(k) === -1)\n                valid = false;\n        });\n        if (valid)\n            return DBRef.fromExtendedJSON(v);\n    }\n    return value;\n}\nfunction serializeArray(array, options) {\n    return array.map((v, index) => {\n        options.seenObjects.push({ propertyName: `index ${index}`, obj: null });\n        try {\n            return serializeValue(v, options);\n        }\n        finally {\n            options.seenObjects.pop();\n        }\n    });\n}\nfunction getISOString(date) {\n    const isoStr = date.toISOString();\n    return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';\n}\nfunction serializeValue(value, options) {\n    if (value instanceof Map || isMap(value)) {\n        const obj = Object.create(null);\n        for (const [k, v] of value) {\n            if (typeof k !== 'string') {\n                throw new BSONError('Can only serialize maps with string keys');\n            }\n            obj[k] = v;\n        }\n        return serializeValue(obj, options);\n    }\n    if ((typeof value === 'object' || typeof value === 'function') && value !== null) {\n        const index = options.seenObjects.findIndex(entry => entry.obj === value);\n        if (index !== -1) {\n            const props = options.seenObjects.map(entry => entry.propertyName);\n            const leadingPart = props\n                .slice(0, index)\n                .map(prop => `${prop} -> `)\n                .join('');\n            const alreadySeen = props[index];\n            const circularPart = ' -> ' +\n                props\n                    .slice(index + 1, props.length - 1)\n                    .map(prop => `${prop} -> `)\n                    .join('');\n            const current = props[props.length - 1];\n            const leadingSpace = ' '.repeat(leadingPart.length + alreadySeen.length / 2);\n            const dashes = '-'.repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);\n            throw new BSONError('Converting circular structure to EJSON:\\n' +\n                `    ${leadingPart}${alreadySeen}${circularPart}${current}\\n` +\n                `    ${leadingSpace}\\\\${dashes}/`);\n        }\n        options.seenObjects[options.seenObjects.length - 1].obj = value;\n    }\n    if (Array.isArray(value))\n        return serializeArray(value, options);\n    if (value === undefined)\n        return null;\n    if (value instanceof Date || isDate(value)) {\n        const dateNum = value.getTime(), inRange = dateNum > -1 && dateNum < 253402318800000;\n        if (options.legacy) {\n            return options.relaxed && inRange\n                ? { $date: value.getTime() }\n                : { $date: getISOString(value) };\n        }\n        return options.relaxed && inRange\n            ? { $date: getISOString(value) }\n            : { $date: { $numberLong: value.getTime().toString() } };\n    }\n    if (typeof value === 'number' && (!options.relaxed || !isFinite(value))) {\n        if (Number.isInteger(value) && !Object.is(value, -0)) {\n            if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n                return { $numberInt: value.toString() };\n            }\n            if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX) {\n                return { $numberLong: value.toString() };\n            }\n        }\n        return { $numberDouble: Object.is(value, -0) ? '-0.0' : value.toString() };\n    }\n    if (typeof value === 'bigint') {\n        if (!options.relaxed) {\n            return { $numberLong: BigInt.asIntN(64, value).toString() };\n        }\n        return Number(BigInt.asIntN(64, value));\n    }\n    if (value instanceof RegExp || isRegExp(value)) {\n        let flags = value.flags;\n        if (flags === undefined) {\n            const match = value.toString().match(/[gimuy]*$/);\n            if (match) {\n                flags = match[0];\n            }\n        }\n        const rx = new BSONRegExp(value.source, flags);\n        return rx.toExtendedJSON(options);\n    }\n    if (value != null && typeof value === 'object')\n        return serializeDocument(value, options);\n    return value;\n}\nconst BSON_TYPE_MAPPINGS = {\n    Binary: (o) => new Binary(o.value(), o.sub_type),\n    Code: (o) => new Code(o.code, o.scope),\n    DBRef: (o) => new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields),\n    Decimal128: (o) => new Decimal128(o.bytes),\n    Double: (o) => new Double(o.value),\n    Int32: (o) => new Int32(o.value),\n    Long: (o) => Long.fromBits(o.low != null ? o.low : o.low_, o.low != null ? o.high : o.high_, o.low != null ? o.unsigned : o.unsigned_),\n    MaxKey: () => new MaxKey(),\n    MinKey: () => new MinKey(),\n    ObjectId: (o) => new ObjectId(o),\n    BSONRegExp: (o) => new BSONRegExp(o.pattern, o.options),\n    BSONSymbol: (o) => new BSONSymbol(o.value),\n    Timestamp: (o) => Timestamp.fromBits(o.low, o.high)\n};\nfunction serializeDocument(doc, options) {\n    if (doc == null || typeof doc !== 'object')\n        throw new BSONError('not an object instance');\n    const bsontype = doc._bsontype;\n    if (typeof bsontype === 'undefined') {\n        const _doc = {};\n        for (const name of Object.keys(doc)) {\n            options.seenObjects.push({ propertyName: name, obj: null });\n            try {\n                const value = serializeValue(doc[name], options);\n                if (name === '__proto__') {\n                    Object.defineProperty(_doc, name, {\n                        value,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                }\n                else {\n                    _doc[name] = value;\n                }\n            }\n            finally {\n                options.seenObjects.pop();\n            }\n        }\n        return _doc;\n    }\n    else if (doc != null &&\n        typeof doc === 'object' &&\n        typeof doc._bsontype === 'string' &&\n        doc[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n        throw new BSONVersionError();\n    }\n    else if (isBSONType(doc)) {\n        let outDoc = doc;\n        if (typeof outDoc.toExtendedJSON !== 'function') {\n            const mapper = BSON_TYPE_MAPPINGS[doc._bsontype];\n            if (!mapper) {\n                throw new BSONError('Unrecognized or invalid _bsontype: ' + doc._bsontype);\n            }\n            outDoc = mapper(outDoc);\n        }\n        if (bsontype === 'Code' && outDoc.scope) {\n            outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));\n        }\n        else if (bsontype === 'DBRef' && outDoc.oid) {\n            outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));\n        }\n        return outDoc.toExtendedJSON(options);\n    }\n    else {\n        throw new BSONError('_bsontype must be a string, but was: ' + typeof bsontype);\n    }\n}\nfunction parse(text, options) {\n    const ejsonOptions = {\n        useBigInt64: options?.useBigInt64 ?? false,\n        relaxed: options?.relaxed ?? true,\n        legacy: options?.legacy ?? false\n    };\n    return JSON.parse(text, (key, value) => {\n        if (key.indexOf('\\x00') !== -1) {\n            throw new BSONError(`BSON Document field names cannot contain null bytes, found: ${JSON.stringify(key)}`);\n        }\n        return deserializeValue(value, ejsonOptions);\n    });\n}\nfunction stringify(value, replacer, space, options) {\n    if (space != null && typeof space === 'object') {\n        options = space;\n        space = 0;\n    }\n    if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {\n        options = replacer;\n        replacer = undefined;\n        space = 0;\n    }\n    const serializeOptions = Object.assign({ relaxed: true, legacy: false }, options, {\n        seenObjects: [{ propertyName: '(root)', obj: null }]\n    });\n    const doc = serializeValue(value, serializeOptions);\n    return JSON.stringify(doc, replacer, space);\n}\nfunction EJSONserialize(value, options) {\n    options = options || {};\n    return JSON.parse(stringify(value, options));\n}\nfunction EJSONdeserialize(ejson, options) {\n    options = options || {};\n    return parse(JSON.stringify(ejson), options);\n}\nconst EJSON = Object.create(null);\nEJSON.parse = parse;\nEJSON.stringify = stringify;\nEJSON.serialize = EJSONserialize;\nEJSON.deserialize = EJSONdeserialize;\nObject.freeze(EJSON);\n\nconst BSONElementType = {\n    double: 1,\n    string: 2,\n    object: 3,\n    array: 4,\n    binData: 5,\n    undefined: 6,\n    objectId: 7,\n    bool: 8,\n    date: 9,\n    null: 10,\n    regex: 11,\n    dbPointer: 12,\n    javascript: 13,\n    symbol: 14,\n    javascriptWithScope: 15,\n    int: 16,\n    timestamp: 17,\n    long: 18,\n    decimal: 19,\n    minKey: 255,\n    maxKey: 127\n};\nfunction getSize(source, offset) {\n    try {\n        return NumberUtils.getNonnegativeInt32LE(source, offset);\n    }\n    catch (cause) {\n        throw new BSONOffsetError('BSON size cannot be negative', offset, { cause });\n    }\n}\nfunction findNull(bytes, offset) {\n    let nullTerminatorOffset = offset;\n    for (; bytes[nullTerminatorOffset] !== 0x00; nullTerminatorOffset++)\n        ;\n    if (nullTerminatorOffset === bytes.length - 1) {\n        throw new BSONOffsetError('Null terminator not found', offset);\n    }\n    return nullTerminatorOffset;\n}\nfunction parseToElements(bytes, startOffset = 0) {\n    startOffset ??= 0;\n    if (bytes.length < 5) {\n        throw new BSONOffsetError(`Input must be at least 5 bytes, got ${bytes.length} bytes`, startOffset);\n    }\n    const documentSize = getSize(bytes, startOffset);\n    if (documentSize > bytes.length - startOffset) {\n        throw new BSONOffsetError(`Parsed documentSize (${documentSize} bytes) does not match input length (${bytes.length} bytes)`, startOffset);\n    }\n    if (bytes[startOffset + documentSize - 1] !== 0x00) {\n        throw new BSONOffsetError('BSON documents must end in 0x00', startOffset + documentSize);\n    }\n    const elements = [];\n    let offset = startOffset + 4;\n    while (offset <= documentSize + startOffset) {\n        const type = bytes[offset];\n        offset += 1;\n        if (type === 0) {\n            if (offset - startOffset !== documentSize) {\n                throw new BSONOffsetError(`Invalid 0x00 type byte`, offset);\n            }\n            break;\n        }\n        const nameOffset = offset;\n        const nameLength = findNull(bytes, offset) - nameOffset;\n        offset += nameLength + 1;\n        let length;\n        if (type === BSONElementType.double ||\n            type === BSONElementType.long ||\n            type === BSONElementType.date ||\n            type === BSONElementType.timestamp) {\n            length = 8;\n        }\n        else if (type === BSONElementType.int) {\n            length = 4;\n        }\n        else if (type === BSONElementType.objectId) {\n            length = 12;\n        }\n        else if (type === BSONElementType.decimal) {\n            length = 16;\n        }\n        else if (type === BSONElementType.bool) {\n            length = 1;\n        }\n        else if (type === BSONElementType.null ||\n            type === BSONElementType.undefined ||\n            type === BSONElementType.maxKey ||\n            type === BSONElementType.minKey) {\n            length = 0;\n        }\n        else if (type === BSONElementType.regex) {\n            length = findNull(bytes, findNull(bytes, offset) + 1) + 1 - offset;\n        }\n        else if (type === BSONElementType.object ||\n            type === BSONElementType.array ||\n            type === BSONElementType.javascriptWithScope) {\n            length = getSize(bytes, offset);\n        }\n        else if (type === BSONElementType.string ||\n            type === BSONElementType.binData ||\n            type === BSONElementType.dbPointer ||\n            type === BSONElementType.javascript ||\n            type === BSONElementType.symbol) {\n            length = getSize(bytes, offset) + 4;\n            if (type === BSONElementType.binData) {\n                length += 1;\n            }\n            if (type === BSONElementType.dbPointer) {\n                length += 12;\n            }\n        }\n        else {\n            throw new BSONOffsetError(`Invalid 0x${type.toString(16).padStart(2, '0')} type byte`, offset);\n        }\n        if (length > documentSize) {\n            throw new BSONOffsetError('value reports length larger than document', offset);\n        }\n        elements.push([type, nameOffset, nameLength, offset, length]);\n        offset += length;\n    }\n    return elements;\n}\n\nconst onDemand = Object.create(null);\nonDemand.parseToElements = parseToElements;\nonDemand.ByteUtils = ByteUtils;\nonDemand.NumberUtils = NumberUtils;\nObject.freeze(onDemand);\n\nconst MAXSIZE = 1024 * 1024 * 17;\nlet buffer = ByteUtils.allocate(MAXSIZE);\nfunction setInternalBufferSize(size) {\n    if (buffer.length < size) {\n        buffer = ByteUtils.allocate(size);\n    }\n}\nfunction serialize(object, options = {}) {\n    const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n    const minInternalBufferSize = typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n    if (buffer.length < minInternalBufferSize) {\n        buffer = ByteUtils.allocate(minInternalBufferSize);\n    }\n    const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n    const finishedBuffer = ByteUtils.allocateUnsafe(serializationIndex);\n    finishedBuffer.set(buffer.subarray(0, serializationIndex), 0);\n    return finishedBuffer;\n}\nfunction serializeWithBufferAndIndex(object, finalBuffer, options = {}) {\n    const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n    const startIndex = typeof options.index === 'number' ? options.index : 0;\n    const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n    finalBuffer.set(buffer.subarray(0, serializationIndex), startIndex);\n    return startIndex + serializationIndex - 1;\n}\nfunction deserialize(buffer, options = {}) {\n    return internalDeserialize(ByteUtils.toLocalBufferType(buffer), options);\n}\nfunction calculateObjectSize(object, options = {}) {\n    options = options || {};\n    const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n    return internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\nfunction deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n    const internalOptions = Object.assign({ allowObjectSmallerThanBufferSize: true, index: 0 }, options);\n    const bufferData = ByteUtils.toLocalBufferType(data);\n    let index = startIndex;\n    for (let i = 0; i < numberOfDocuments; i++) {\n        const size = NumberUtils.getInt32LE(bufferData, index);\n        internalOptions.index = index;\n        documents[docStartIndex + i] = internalDeserialize(bufferData, internalOptions);\n        index = index + size;\n    }\n    return index;\n}\n\nvar bson = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BSONError: BSONError,\n    BSONOffsetError: BSONOffsetError,\n    BSONRegExp: BSONRegExp,\n    BSONRuntimeError: BSONRuntimeError,\n    BSONSymbol: BSONSymbol,\n    BSONType: BSONType,\n    BSONValue: BSONValue,\n    BSONVersionError: BSONVersionError,\n    Binary: Binary,\n    Code: Code,\n    DBRef: DBRef,\n    Decimal128: Decimal128,\n    Double: Double,\n    EJSON: EJSON,\n    Int32: Int32,\n    Long: Long,\n    MaxKey: MaxKey,\n    MinKey: MinKey,\n    ObjectId: ObjectId,\n    Timestamp: Timestamp,\n    UUID: UUID,\n    calculateObjectSize: calculateObjectSize,\n    deserialize: deserialize,\n    deserializeStream: deserializeStream,\n    onDemand: onDemand,\n    serialize: serialize,\n    serializeWithBufferAndIndex: serializeWithBufferAndIndex,\n    setInternalBufferSize: setInternalBufferSize\n});\n\nexport { bson as BSON, BSONError, BSONOffsetError, BSONRegExp, BSONRuntimeError, BSONSymbol, BSONType, BSONValue, BSONVersionError, Binary, Code, DBRef, Decimal128, Double, EJSON, Int32, Long, MaxKey, MinKey, ObjectId, Timestamp, UUID, calculateObjectSize, deserialize, deserializeStream, onDemand, serialize, serializeWithBufferAndIndex, setInternalBufferSize };\n//# sourceMappingURL=bson.mjs.map\n"],"names":["module","exports","require","globalThis","__import_unsupported","api","BaseServerSpan","LoadComponentsSpan","NextServerSpan","NextNodeServerSpan","StartServerSpan","RenderSpan","AppRenderSpan","RouterSpan","constants_NodeSpan","AppRouteRouteHandlersSpan","ResolveMetadataSpan","MiddlewareSpan","registerInstrumentation","register","_ENTRIES","middleware_instrumentation","err","message","registerInstrumentationPromise","ensureInstrumentationRegistered","getUnsupportedModuleErrorMessage","process","__webpack_require__","g","env","Object","defineProperty","value","moduleName","proxy","Proxy","get","_obj","prop","construct","apply","_target","_this","args","enumerable","configurable","PageSignatureError","Error","constructor","page","RemovedPageError","RemovedUAError","WEBPACK_LAYERS_NAMES","shared","reactServerComponents","serverSideRendering","actionBrowser","middleware","instrument","edgeAsset","appPagesBrowser","appMetadataRoute","appRouteHandler","splitCookiesString","cookiesString","start","ch","lastComma","nextStart","cookiesSeparatorFound","cookiesStrings","pos","skipWhitespace","length","test","charAt","push","substring","toNodeOutgoingHttpHeaders","headers","nodeHeaders","cookies","key","entries","toLowerCase","validateURL","url","String","URL","error","cause","GROUP","serverOnly","clientOnly","nonClientServerTarget","app","responseSymbol","Symbol","passThroughSymbol","waitUntilSymbol","FetchEvent","_request","respondWith","response","Promise","resolve","passThroughOnException","waitUntil","promise","NextFetchEvent","params","request","sourcePage","removeTrailingSlash","route","replace","parsePath","path","hashIndex","indexOf","queryIndex","hasQuery","pathname","query","undefined","hash","slice","addPathPrefix","prefix","startsWith","addPathSuffix","suffix","pathHasPrefix","normalizeLocalePath","locales","detectedLocale","pathnameParts","split","some","locale","splice","join","REGEX_LOCALHOST_HOSTNAME","parseURL","base","Internal","NextURL","input","baseOrOpts","opts","options","basePath","analyze","_this_Internal_options_nextConfig_i18n","_this_Internal_options_nextConfig","_this_Internal_domainLocale","_this_Internal_options_nextConfig_i18n1","_this_Internal_options_nextConfig1","info","getNextPathnameInfo","result","i18n","trailingSlash","nextConfig","endsWith","removePathPrefix","withoutPrefix","pathnameNoDataPrefix","paths","buildId","parseData","i18nProvider","hostname","getHostname","parsed","host","Array","isArray","toString","domainLocale","detectDomainLocale","domainItems","item","domainHostname","domain","defaultLocale","domains","formatPathname","addLocale","ignorePrefix","lower","forceLocale","formatSearch","search","includes","searchParams","port","protocol","href","origin","password","username","toJSON","for","clone","INTERNALS","NextRequest","Request","init","nextUrl","_edge_runtime_cookies","RequestCookies","geo","ip","bodyUsed","cache","credentials","destination","fromEntries","integrity","keepalive","method","mode","redirect","referrer","referrerPolicy","signal","ua","ReflectAdapter","target","receiver","Reflect","bind","set","has","deleteProperty","response_INTERNALS","REDIRECTS","Set","handleMiddlewareField","_init_request","Headers","keys","NextResponse","Response","body","cookiesProxy","ResponseCookies","newHeaders","getAll","map","stringifyCookie","cookie","ok","redirected","status","statusText","type","json","initObj","rewrite","next","relativizeURL","baseURL","relative","FLIGHT_PARAMETERS","INTERNAL_QUERY_NAMES","EDGE_EXTENDED_INTERNAL_QUERY_NAMES","ReadonlyHeadersError","callable","HeadersAdapter","lowercased","original","find","o","seal","merge","from","append","name","existing","delete","forEach","callbackfn","thisArg","call","values","iterator","sharedAsyncLocalStorageNotAvailableError","FakeAsyncLocalStorage","disable","getStore","run","exit","enterWith","maybeGlobalAsyncLocalStorage","AsyncLocalStorage","createAsyncLocalStorage","staticGenerationAsyncStorage","ReadonlyRequestCookiesError","RequestCookiesAdapter","SYMBOL_MODIFY_COOKIE_VALUES","MutableRequestCookiesAdapter","wrap","onUpdateCookies","responseCookies","modifiedValues","modifiedCookies","updateResponseCookies","staticGenerationAsyncStore","pathWasRevalidated","allCookies","filter","c","serializedCookies","tempCookies","add","NodeSpan","NextVanillaSpanAllowlist","LogSpanAllowList","context","propagation","trace","SpanStatusCode","SpanKind","ROOT_CONTEXT","isPromise","p","then","closeSpanWithError","span","bubble","setAttribute","recordException","setStatus","code","ERROR","end","rootSpanAttributesStore","Map","rootSpanIdKey","createContextKey","lastSpanId","getSpanId","NextTracerImpl","getTracerInstance","getTracer","getContext","getActiveScopeSpan","getSpan","active","withPropagatedContext","carrier","fn","getter","activeContext","getSpanContext","remoteContext","extract","with","_trace_getSpanContext","fnOrOptions","fnOrEmpty","spanName","NEXT_OTEL_VERBOSE","hideSpan","spanContext","parentSpan","isRootSpan","isRemote","spanId","attributes","setValue","startActiveSpan","startTime","performance","now","onCleanup","NEXT_OTEL_PERFORMANCE_PREFIX","measure","pop","match","res","catch","finally","tracer","optionsObj","arguments","lastArgId","cb","scopeBoundCb","_span","done","startSpan","setSpan","getRootSpanAttributes","getValue","tracer_getTracer","COOKIE_NAME_PRERENDER_BYPASS","DraftModeProvider","previewProps","req","mutableCookies","_cookies_get","isOnDemandRevalidate","checkIsOnDemandRevalidate","previewModeId","revalidateOnlyGenerated","cookieValue","isEnabled","Boolean","_previewModeId","_mutableCookies","enable","httpOnly","sameSite","secure","expires","Date","mergeMiddlewareCookies","existingCookies","setCookieValue","responseHeaders","RequestAsyncStorageWrapper","storage","renderOpts","callback","defaultOnUpdateCookies","setHeader","store","getHeaders","cleaned","param","requestCookies","getMutableCookies","draftMode","reactLoadableManifest","assetPrefix","requestAsyncStorage","getEdgePreviewProps","__NEXT_PREVIEW_MODE_ID","previewModeSigningKey","__NEXT_PREVIEW_MODE_SIGNING_KEY","previewModeEncryptionKey","__NEXT_PREVIEW_MODE_ENCRYPTION_KEY","NextRequestHint","headersGetter","propagator","testApisIntercepted","adapter","cookiesFromResponse","ensureTestApisIntercepted","NEXT_PRIVATE_TEST_PROXY","interceptTestApis","wrapRequestHandler","isEdgeRendering","self","__BUILD_MANIFEST","requestUrl","normalizeNextQueryParam","onKeyNormalized","val","normalizedKey","isNextDataRequest","requestHeaders","fromNodeOutgoingHttpHeaders","v","flightHeaders","stripInternalSearchParams","isEdge","isStringUrl","instance","__incrementalCacheShared","IncrementalCache","__incrementalCache","appDir","fetchCache","minimalMode","fetchCacheKeyPrefix","dev","requestProtocol","getPrerenderManifest","version","routes","dynamicRoutes","notFoundRoutes","preview","event","execute","request_async_storage_instance_requestAsyncStorage","handler","rewriteUrl","relativizedRewrite","redirectURL","finalResponse","middlewareOverrideHeaders","overwrittenHeaders","all","fetchMetrics","URLPattern","MONGODB_URI","JWT_SECRET","token","verifyToken","adminId","payload","jwt","config","matcher","mod","middleware_namespaceObject","default","nHandler","__importDefault","__esModule","index_1","memory_code_points_1","code_points_data_browser_1","codePoints","createMemoryCodePoints","saslprep","assign","data","Buffer","getCodePoint","character","codePointAt","first","x","last","toCodePoints","codepoints","size","i","before","charCodeAt","unassigned_code_points","commonly_mapped_to_nothing","non_ASCII_space_characters","prohibited_characters","bidirectional_r_al","bidirectional_l","mapped_input","mapping2space","mapping2nothing","normalized_input","fromCodePoint","normalize","normalized_map","allowUnassigned","hasBidiRAL","hasBidiL","isFirstBidiRAL","isLastBidiRAL","offset","read","readUInt32BE","sparse_bitfield_1","buffer","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","utfx","bcrypt","randomFallback","random","len","randomBytes","e","a","Uint32Array","prototype","safeStringCompare","known","unknown","right","wrong","k","setRandomFallback","genSaltSync","rounds","seed_length","GENSALT_DEFAULT_LOG2_ROUNDS","salt","base64_encode","BCRYPT_SALT_LEN","genSalt","_async","nextTick","reject","hashSync","s","_hash","progressCallback","compareSync","substr","compare","comp","getRounds","parseInt","getSalt","setImmediate","setTimeout","BASE64_CODE","BASE64_INDEX","stringFromCharCode","fromCharCode","b","c1","c2","off","rs","base64_decode","c3","slen","olen","MAX_CODEPOINT","encodeUTF8","src","dst","cp","decodeUTF8","d","fail","RangeError","UTF16toUTF8","UTF8toUTF16","encodeUTF16toUTF8","decodeUTF8toUTF16","calculateCodePoint","calculateUTF8","l","calculateUTF16asUTF8","n","P_ORIG","S_ORIG","C_ORIG","_encipher","lr","P","S","r","BLOWFISH_NUM_ROUNDS","_streamtoword","offp","word","_key","sw","plen","_crypt","cdata","clen","j","ret","Int32Array","_ekskey","minor","str","out","r1","real_salt","passwordb","saltb","finish","bytes","encodeBase64","decodeBase64","SlowBuffer","bufferEq","isBuffer","install","equal","that","origBufEqual","origSlowBufEqual","restore","getParamBytesForAlg","signatureAsBuffer","signature","countPadding","buf","stop","padding","derToJose","alg","paramBytes","maxEncodedParamLength","inputLength","seqLength","MAX_OCTET","rLength","rOffset","sLength","sOffset","rPadding","sPadding","allocUnsafe","copy","Math","max","base64","joseToDer","signatureBytes","rsBytes","shortLength","TAG_INT","getParamSize","keySize","paramBytesForAlg","ES256","ES384","ES512","jws","decoded","decode","obj","JSON","parse","complete","header","verify","sign","JsonWebTokenError","NotBeforeError","TokenExpiredError","captureStackTrace","inner","create","date","expiredAt","semver","satisfies","ms","time","iat","timestamp","floor","milliseconds","ASYMMETRIC_KEY_DETAILS_SUPPORTED","RSA_PSS_KEY_DETAILS_SUPPORTED","allowedAlgorithmsForKeys","allowedCurves","algorithm","keyType","asymmetricKeyType","allowedAlgorithms","keyCurve","asymmetricKeyDetails","namedCurve","allowedCurve","hashAlgorithm","mgf1HashAlgorithm","saltLength","timespan","PS_SUPPORTED","validateAsymmetricKey","isBoolean","isInteger","isNumber","isPlainObject","isString","once","KeyObject","createSecretKey","createPrivateKey","SUPPORTED_ALGS","sign_options_schema","expiresIn","isValid","notBefore","audience","encoding","issuer","subject","jwtid","noTimestamp","keyid","mutatePayload","allowInsecureKeySizes","allowInvalidAsymmetricKeyTypes","registered_claims_schema","exp","nbf","validate","schema","allowUnknown","object","parameterName","validator","options_to_payload","options_for_objects","secretOrPrivateKey","isObjectPayload","typ","kid","failure","_","modulusLength","invalid_options","opt","claim","createSign","privateKey","secret","createPublicKey","PUB_KEY_ALGS","EC_KEY_ALGS","RSA_KEY_ALGS","HS_ALGS","jwtString","secretOrPublicKey","decodedToken","getSecret","clockTimestamp","nonce","trim","parts","secretCallback","valid","hasSignature","algorithms","ignoreNotBefore","clockTolerance","ignoreExpiration","audiences","aud","targetAudience","RegExp","iss","sub","jti","maxAge","maxAgeTimestamp","bufferEqual","crypto","formatEcdsa","util","MSG_INVALID_SECRET","MSG_INVALID_VERIFIER_KEY","supportsKeyObjects","checkIsPublicKey","export","typeError","checkIsPrivateKey","fromBase64","toBase64","base64url","template","format","normalizeInput","thing","stringify","createHmacSigner","bits","checkIsSecretKey","hmac","createHmac","update","digest","timingSafeEqual","byteLength","createHmacVerifier","computedSig","createKeySigner","signer","createKeyVerifier","publicKey","verifier","createVerify","createPSSKeySigner","constants","RSA_PKCS1_PSS_PADDING","RSA_PSS_SALTLEN_DIGEST","createPSSKeyVerifier","createECDSASigner","createECDSAVerifer","createNoneSigner","createNoneVerifier","algo","signerFactories","hs","ps","es","none","verifierFactories","SignStream","VerifyStream","ALGORITHMS","Stream","DataStream","writable","readable","alloc","pipe","emit","inherits","write","concat","jwa","string","jwsSign","encodedHeader","encodedPayload","secretOrKey","securedInput","secretStream","JWS_REGEX","headerFromJWS","jwsSig","safeJsonParse","signatureFromJWS","isValidJws","jwsVerify","jwsDecode","func","transform","INFINITY","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","reIsUint","freeParseInt","baseIsNaN","objectProto","hasOwnProperty","objectToString","propertyIsEnumerable","nativeKeys","arg","nativeMax","isArrayLike","tag","isObject","isObjectLike","collection","fromIndex","guard","arrayMap","array","iteratee","index","arrayLikeKeys","inherited","isArrayLikeObject","baseTimes","skipIndexes","baseKeys","Ctor","remainder","toNumber","other","valueOf","isBinary","baseIndexOf","baseFindIndex","predicate","fromRight","funcToString","funcProto","objectCtorString","getPrototype","getPrototypeOf","isHostObject","proto","Pager","pageSize","updates","Uint16Array","pages","maxPages","level","deduplicate","zeros","fill","Page","updated","equals","lastUpdate","_array","noAllocate","grow","pager","old","arr","cpy","truncate","toBuffer","list","empty","ptr","CommaAndColonSeparatedRecord","ConnectionString","redactConnectionString","whatwg_url_1","redact_1","DUMMY_HOSTNAME","HOSTS_REGEX","CaseInsensitiveMap","_normalizeKey","URLWithoutHost","MongoParseError","uri","_a","looseValidation","connectionStringHasValidScheme","connectionString","hosts","rest","groups","decodeURIComponent","illegalCharacters","uriWithoutProtocol","authString","_hosts","isSRV","setPrototypeOf","caseInsenstiveURLSearchParams","_ignored","redact","redactValidConnectionString","typedSearchParams","entry","colonIndex","__createBinding","m","k2","desc","getOwnPropertyDescriptor","__setModuleDefault","__importStar","inputUrl","_b","replacementString","redactUsernames","props","_c","replacer","Admin","bson_1","execute_operation_1","list_databases_1","remove_user_1","run_command_1","validate_collection_1","db","command","executeOperation","client","RunAdminCommandOperation","resolveBSONOptions","session","readPreference","timeoutMS","buildInfo","buildinfo","serverInfo","serverStatus","ping","removeUser","RemoveUserOperation","dbName","validateCollection","collectionName","ValidateCollectionOperation","listDatabases","ListDatabasesOperation","replSetGetStatus","__exportStar","toUTF8","getBigInt64LE","getFloat64LE","getInt32LE","UUID","Timestamp","serialize","ObjectId","MinKey","MaxKey","Long","Int32","EJSON","Double","deserialize","Decimal128","DBRef","Code","calculateObjectSize","BSONType","BSONSymbol","BSONRegExp","BSONError","BSON","Binary","parseToElementsToArray","onDemand","parseToElements","pluckBSONSerializeOptions","fieldsAsRaw","useBigInt64","promoteValues","promoteBuffers","promoteLongs","serializeFunctions","ignoreUndefined","bsonRegExp","raw","enableUtf8Validation","parent","parentOptions","bsonOptions","parseUtf8ValidationOption","utf8","writeErrors","bson_2","NumberUtils","ByteUtils","BulkOperationBase","BulkWriteShimOperation","FindOperators","MongoBulkWriteError","WriteError","WriteConcernError","BulkWriteResult","Batch","BatchType","mergeBatchResults","error_1","delete_1","insert_1","operation_1","update_1","utils_1","write_concern_1","freeze","INSERT","UPDATE","DELETE","batchType","originalZeroIndex","currentIndex","originalIndexes","operations","sizeBytes","generateIdMap","ids","idMap","doc","_id","bulkResult","isOrdered","insertedCount","nInserted","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","upsertedIds","insertedIds","getSuccessfullyInsertedIds","writeError","getUpsertedIdAt","getRawResponse","hasWriteErrors","getWriteErrorCount","getWriteErrorAt","getWriteErrors","getWriteConcernError","writeConcernErrors","errmsg","MONGODB_ERROR_CODES","WriteConcernTimeout","isOk","serverError","errInfo","getOperation","op","batch","isInsertBatch","isDeleteBatch","nUpserted","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","batches","finalOptions","resolveOptions","ordered","bypassDocumentValidation","checkKeys","retryWrites","multi","limit","operation","InsertOperation","namespace","UpdateOperation","DeleteOperation","MongoRuntimeError","thrownError","timeoutContext","MongoWriteConcernError","writeResult","handleWriteError","MongoServerError","updateDocument","currentOp","buildCurrentOp","addToOperationsList","makeUpdateStatement","selector","updateOne","hasAtomicOperators","MongoInvalidArgumentError","replaceOne","replacement","deleteOne","makeDeleteStatement","upsert","collation","arrayFilters","hint","AbstractOperation","commandName","_server","topology","getTopology","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxWriteBatchSize","maxKeySize","applyRetryableWrites","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","WriteConcern","fromOptions","maxBatchSizeBytes","executed","insert","document","maybeAddIdToDocuments","forceServerObjectId","shouldForceServerObjectId","insertOne","updateStatement","u","updateMany","deleteMany","MongoBatchReExecutionError","bulkOp","OrderedBulkOperation","common_1","bsonSize","UnorderedBulkOperation","ChangeStream","collection_1","constants_1","abstract_cursor_1","change_stream_cursor_1","db_1","mongo_client_1","mongo_types_1","resource_management_1","timeout_1","CHANGE_STREAM_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","CHANGE_STREAM_EVENTS","RESUME_TOKEN_CHANGED","END","CLOSE","CHANGESTREAM_CLOSED_ERROR","TypedEventEmitter","asyncDispose","close","pipeline","serverSelectionTimeoutMS","Collection","Db","MongoClient","MongoChangeStreamError","contextOwner","cursor","_createChangeStreamCursor","isClosed","on","eventName","listenerCount","_streamEvents","cursorStream","removeAllListeners","CSOTTimeoutContext","resumeToken","hasNext","_setIsIterator","refresh","_processErrorIteratorMode","id","MongoOperationTimeoutError","squashError","clear","change","_processChange","tryNext","asyncIterator","closed","_endStream","stream","streamOptions","_setIsEmitter","MongoAPIError","changeStreamStageOptions","filterOptions","allChangesForCluster","$changeStream","changeStreamCursor","ChangeStreamCursor","CursorTimeoutContext","CHANGE","_closeEmitterModeWithError","processedChange","_processErrorStreamMode","destroy","cacheResumeToken","startAtOperationTime","changeStreamError","cursorInitialized","isResumableError","maxWireVersion","_resume","selectServer","operationName","resumeOptions","RESPONSE","MORE","INIT","configureResourceManagement","net","deps_1","client_encryption_1","cryptoCallbacks","errors_1","mongocryptd_manager_1","providers_1","state_machine_1","FatalError","Warning","Info","Trace","AutoEncrypter","getMongoCrypt","encryption","getMongoDBClientEncryption","kModuleError","MongoCrypt","_client","_bypassEncryption","bypassAutoEncryption","_keyVaultNamespace","keyVaultNamespace","_keyVaultClient","keyVaultClient","_metaDataClient","metadataClient","_proxyOptions","proxyOptions","_tlsOptions","tlsOptions","_kmsProviders","kmsProviders","_credentialProviders","credentialProviders","aws","isEmptyCredentials","MongoCryptInvalidArgumentError","mongoCryptOptions","enableMultipleCollinfo","schemaMap","encryptedFieldsMap","logger","extraOptions","cryptSharedLibPath","bypassQueryAnalysis","keyExpirationMS","_bypassMongocryptdAndCryptShared","cryptSharedLibSearchPaths","_mongocrypt","_contextCounter","cryptSharedLibRequired","cryptSharedLibVersionInfo","_mongocryptdManager","MongocryptdManager","clientOptions","mongocryptdURI","getDefaultAutoSelectFamily","family","autoSelectSocketOptions","_mongocryptdClient","bypassSpawn","spawn","connect","encrypt","ns","cmd","throwIfAborted","commandBuffer","makeEncryptionContext","MongoDBCollectionNamespace","fromString","stateMachine","StateMachine","socketOptions","decrypt","makeDecryptionContext","askForKMSCredentials","refreshKMSCredentials","libmongocryptVersion","kDecorateResult","ClientEncryption","resolveTimeoutOptions","_timeoutMS","_mongoCrypt","createDataKey","provider","keyAltNames","keyMaterial","keyAltName","dataKeyBson","masterKey","makeDataKeyContext","TimeoutContext","dataKey","insertedId","w","csotEnabled","getRemainingTimeMSOrThrow","rewrapManyDataKey","keyEncryptionKeyBson","keyEncryptionKey","filterBson","makeRewrapManyDataKeyContext","dataKeys","replacements","$set","$currentDate","updateDate","bulkWriteResult","bulkWrite","remainingTimeMS","deleteKey","getKeys","readConcern","getKey","findOne","getKeyByAltName","addKeyAltName","findOneAndUpdate","$addToSet","returnDocument","removeKeyAltName","$cond","$eq","$filter","cond","$ne","createEncryptedCollection","createCollectionOptions","encryptedFields","fields","createDataKeyPromises","field","keyId","createDataKeyResolutions","allSettled","resolution","rejection","MongoCryptCreateDataKeyError","reason","createCollection","MongoCryptCreateEncryptedCollectionError","_encrypt","encryptExpression","expression","valueBuffer","makeExplicitDecryptionContext","expressionMode","contentionFactor","queryType","rangeOptions","contextOptions","makeExplicitEncryptionContext","baseOptions","autoSelectFamily","autoSelectFamilyAttemptTimeout","hmacSha256Hook","hmacSha512Hook","aes256CtrDecryptHook","aes256CtrEncryptHook","aes256CbcDecryptHook","aes256CbcEncryptHook","makeAES256Hook","randomHook","count","randomFillSync","sha256Hook","output","createHash","makeHmacHook","signRsaSha256Hook","iv","cipher","setAutoPadding","final","MongoCryptKMSRequestNetworkTimeoutError","MongoCryptAzureKMSRequestError","MongoCryptError","MongoError","spawnPath","spawnArgs","DEFAULT_MONGOCRYPTD_URI","mongocryptdBypassSpawn","hasOwn","mongocryptdSpawnPath","mongocryptdSpawnArgs","every","cmdName","_child","stdio","detached","unref","withRespawn","MongoNetworkTimeoutError","loadAWSCredentials","aws_temporary_credentials_1","credentialProvider","AWSSDKCredentialProvider","SecretAccessKey","AccessKeyId","Token","getCredentials","secretAccessKey","accessKeyId","sessionToken","tokenCache","AzureCredentialCache","AZURE_BASE_URL","addAzureParams","prepareRequest","fetchAzureKMSToken","loadAzureCredentials","cachedToken","getToken","needsRefresh","_getToken","accessToken","timeUntilExpirationMS","expiresOnTimestamp","resetCache","parseResponse","rawBody","access_token","expires_in","expiresInMS","Number","isNaN","resource","Metadata","azure","loadGCPCredentials","gcpMetadata","getGcpMetadata","property","gcp","aws_1","azure_1","gcp_1","providerName","finalKMSProviders","EMPTY_V","fs","tls","socks","stateToString","INSECURE_TLS_OPTIONS","debug","msg","MONGODB_CRYPT_DEBUG","console","executor","metaDataClient","mongocryptdClient","mongocryptdManager","getStatus","getState","state","nextMongoOperation","collInfo","fetchCollectionInfo","addMongoOperationResponse","finishMongoOperation","markedCommand","markCommand","fetchKeys","provideKMSProviders","requests","finishKMSRequests","finalizedContext","finalize","kmsRequest","netSocket","socket","abortListener","parsedUrl","endpoint","servername","BufferPool","destroySockets","sock","onerror","onclose","kmsProvider","providerTlsOptions","validateTlsOptions","setTlsOptions","proxyHost","Socket","willConnect","rejectOnNetSocketError","resolveOnNetSocketConnect","promiseWithResolvers","netSocketOptions","proxyPort","loadSocks","socksImport","getSocks","SocksClient","createConnection","existing_socket","userId","proxyUsername","proxyPassword","willResolveKmsRequest","rejectOnTlsSocketError","addAbortListener","bytesNeeded","min","addResponse","Timeout","TimeoutError","kDispose","nextKMSRequest","tlsOptionNames","option","tlsCertificateKeyFile","cert","readFile","tlsCAFile","ca","tlsCertificateKeyFilePassword","passphrase","listCollections","nameOnly","rawCommand","commandOptions","toArray","AuthProvider","AuthContext","connection","reauthenticating","prepare","handshakeDoc","_authContext","reauth","auth","LegacyAWSTemporaryCredentialProvider","AWSTemporaryCredentialProvider","AWS_EC2_URI","AWS_EC2_PATH","awsSDK","_awsSDK","getAwsCredentialProvider","isAWSSDKInstalled","credentialsProvider","_provider","AWS_STS_REGIONAL_ENDPOINTS","AWS_REGION","awsRegionSettingsExist","LEGACY_REGIONS","useRegionalSts","fromNodeProviderChain","clientConfig","region","creds","Expiration","expiration","MongoAWSError","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","roleName","krb","GSSAPI","GSSAPICanonicalizationValue","performGSSAPICanonicalizeHostName","resolveCname","dns","auth_provider_1","externalCommand","forward","forwardAndReverse","authContext","MongoMissingCredentialsError","makeKerberosClient","step","saslStartResponse","saslStart","mechanism","autoAuthorize","negotiatedPayload","negotiate","saslContinueResponse","saslContinue","conversationId","finalizePayload","hostAddress","getKerberos","initializeClient","mechanismProperties","serviceName","SERVICE_NAME","initOptions","user","spnHost","SERVICE_HOST","spn","platform","SERVICE_REALM","retries","unwrap","CANONICALIZE_HOST_NAME","address","promises","lookup","results","resolvePtr","MongoCredentials","DEFAULT_ALLOWED_HOSTS","gssapi_1","ALLOWED_ENVIRONMENT_NAMES","ALLOWED_HOSTS_ERROR","source","AuthMechanism","MONGODB_DEFAULT","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","MONGODB_OIDC","ALLOWED_HOSTS","resolveAuthMechanism","saslSupportedMechs","MONGODB_SCRAM_SHA256","MONGODB_SCRAM_SHA1","MONGODB_GSSAPI","MONGODB_PLAIN","ENVIRONMENT","TOKEN_RESOURCE","OIDC_CALLBACK","OIDC_HUMAN_CALLBACK","AUTH_MECHS_AUTH_SRC_EXTERNAL","MONGODB_X509","canonicalization","MongoDBAWS","mongo_credentials_1","credentialFetcher","aws4","MongoCompatibilityError","makeTempCredentials","awsCredentials","serverResponse","h","serverNonce","subarray","deriveRegion","service","Authorization","t","awsCredentialFetcher","makeMongoCredentialsFromAWSTemp","MONGODB_AWS","MongoDBOIDC","OIDC_WORKFLOWS","OIDC_VERSION","automated_callback_workflow_1","azure_machine_workflow_1","gcp_machine_workflow_1","k8s_machine_workflow_1","token_cache_1","token_machine_workflow_1","AutomatedCallbackWorkflow","TokenCache","workflow","speculativeAuthenticate","reauthenticate","speculativeAuth","mongodb_oidc_1","callback_workflow_1","CallbackWorkflow","hasAccessToken","getAccessToken","finishAuthentication","AuthenticationFailed","removeAccessToken","fetchAccessToken","put","controller","AbortController","tokenAudience","timeout","AUTOMATED_TIMEOUT_MS","race","executeAndValidateCallback","is","abort","MongoOIDCError","AZURE_HEADERS","Accept","MongoAzureError","getAzureTokenData","isEndpointResultValid","expiresInSeconds","HUMAN_TIMEOUT_MS","promises_1","command_builders_1","RESULT_PROPERTIES","withLock","lastExecutionTime","finishCommandDocument","startAuthentication","startCommandDocument","getOwnPropertyNames","lock","difference","THROTTLE_MS","GCP_HEADERS","MongoGCPError","getGcpTokenData","HumanCallbackWorkflow","hasRefreshToken","refreshToken","getRefreshToken","getIdpInfo","removeRefreshToken","startResponse","idpInfo","callbackResponse","AZURE_FILENAME","AWS_FILENAME","filename","MongoDriverError","hasIdpInfo","tokenFile","OIDC_TOKEN_FILE","Plain","MONGODB_CR","ScramSHA256","ScramSHA1","saslprep_1","ScramSHA","cryptoMethod","makeFirstMessage","continueScramConversation","executeScram","cleanUsername","clientFirstMessageBare","skipEmptyExchange","saslStartCmd","processedPassword","passwordDigest","md5","getFips","dict","parsePayload","iterations","rnonce","withoutProof","saltedPassword","HI","_hiCache","saltedData","pbkdf2Sync","hiLengthMap","_hiCacheCount","clientKey","HMAC","serverKey","storedKey","authMessage","clientSignature","clientFinal","xor","serverSignature","saslContinueCmd","parsedResponse","compareDigest","lhs","rhs","retrySaslContinueCmd","payloadStr","valueParts","text","sha256","sha1","X509","x509AuthenticateCommand","authenticate","SENSITIVE_COMMANDS","CommandFailedEvent","CommandSucceededEvent","CommandStartedEvent","commands_1","serverConnectionId","COMMAND_STARTED","extractCommand","extractCommandName","connectionId","serviceId","extractConnectionDetails","commandObj","requestId","databaseName","maybeRedact","hasServiceId","reply","started","COMMAND_SUCCEEDED","duration","calculateDurationInMs","extractReply","COMMAND_FAILED","HELLO_COMMANDS","LEGACY_HELLO_COMMAND","LEGACY_HELLO_COMMAND_CAMEL_CASE","commandDoc","LEGACY_FIND_QUERY_MAP","$query","$orderby","$hint","$comment","$maxScan","$max","$min","$returnKey","$showDiskLoc","$maxTimeMS","$snapshot","LEGACY_FIND_OPTIONS_MAP","numberToSkip","numberToReturn","returnFieldSelector","OpMsgRequest","ops","DocumentSequence","documents","nsInfo","clonedQuery","clonedCommand","OpCompressedRequest","OpMsgResponse","OpReply","OpQueryRequest","compression_1","_requestId","encodeUTF8Into","moreToCome","getRequestId","pre32Limit","maxBsonSize","batchSize","tailable","secondaryOk","oplogReplay","noCursorTimeout","awaitData","exhaust","partial","incRequestId","nextRequestId","toBin","buffers","projection","flags","totalLength","OP_QUERY","msgHeader","msgBody","sections","responseTo","opCode","fromCompressed","isParsed","responseFlags","readInt32LE","cursorId","startingFrom","numberReturned","cursorNotFound","queryFailure","shardConfigStale","awaitCapable","section","chunks","serializedDocumentsLength","writeInt32LE","$db","checksumPresent","exhaustAllowed","makeSections","OP_MSG","writeUInt32LE","sequencesBuffer","extractDocumentSequences","payloadTypeBuffer","documentBuffer","serializeBson","payloadType","readUInt8","readUInt32LE","bin","zlibCompressionLevel","agreedCompressor","canCompress","uncompressibleCommands","concatenatedOriginalCommandBuffer","messageToBeCompressed","originalCommandOpCode","compressedMessage","compress","MESSAGE_HEADER_SIZE","OP_COMPRESSED","compressionDetails","writeUInt8","Compressor","LEGAL_TCP_SOCKET_OPTIONS","LEGAL_TLS_SOCKET_OPTIONS","makeConnection","performInitialHandshake","prepareHandshakeDocument","makeSocket","connection_1","constants_2","ConnectionType","connectionType","Connection","CryptoConnection","conn","authProviders","getOrCreateProvider","handshakeOptions","connectTimeoutMS","socketTimeoutMS","getTime","executeHandshake","isWritablePrimary","helloOk","supportedServerErr","checkSupportedServer","minWireVersion","serverVersionHighEnough","MIN_SUPPORTED_WIRE_VERSION","serverVersionLowEnough","MAX_SUPPORTED_WIRE_VERSION","MAX_SUPPORTED_SERVER_VERSION","MIN_SUPPORTED_SERVER_VERSION","loadBalanced","lastHelloMS","arbiterOnly","resolvedCredentials","addErrorLabel","MongoErrorLabel","HandshakeError","needsRetryableWriteLabel","description","RetryableWriteError","established","compressors","serverApi","clientMetadata","extendedMetadata","compression","parseConnectOptions","keepAliveInitialDelay","keepAlive","noDelay","socketPath","useTLS","existingSocket","makeSocks5Connection","tlsSocket","parseSslOptions","isIP","disableRenegotiation","cancellationHandler","connectedSocket","connectEvent","MongoNetworkError","buildErrorMessage","cancellationToken","removeListener","HostAddress","fromHostPort","rawSocket","SizedMessageTransform","hasSessionSupport","logicalSessionTimeoutMinutes","stream_1","timers_1","mongo_logger_1","read_preference_1","sessions_1","command_monitoring_events_1","stream_description_1","on_data_1","responses_1","shared_1","delayedTimeoutId","clusterTime","dataEvents","noop","streamIdentifier","remoteAddress","remotePort","uuidV4","monitorCommands","mongoLogger","StreamDescription","generation","lastUseTime","messageStream","onSocketError","onTransformError","onClose","onTimeout","pause","receiveResponse","idleTime","supportsOpMsg","__nodejs_mock_server__","shouldEmitAndLogCommand","willLog","MongoLoggableComponent","COMMAND","SeverityLevel","DEBUG","markAvailable","onError","cleanup","beforeHandshake","PINNED","UNPINNED","throw","prepareCommand","getReadPreference","strict","deprecationErrors","apiVersion","apiStrict","apiDeprecationErrors","greaterThan","sessionError","applySession","explicit","$clusterTime","ServerType","Standalone","isSharded","directConnection","$readPreference","ReadPreference","primaryPreferred","addMaxTimeMSToCommand","sendWire","responseType","getSocketTimeoutMS","writeCommand","compressor","noResponse","MongoDBResponse","minRoundTripTime","readMany","bson","make","sendCommand","emitAndLogCommand","documentsReturnedIn","updateSessionFromResponse","CLUSTER_TIME_RECEIVED","isMaxTimeExpiredError","toObject","MaxTimeMSExpired","MongoUnexpectedServerResponseError","exhaustCommand","replyListener","exhaustLoop","finalCommand","drainEvent","timeoutForSocketWrite","drained","timeoutError","onData","resume","decompressResponse","readError","Transform","writableObjectMode","readableObjectMode","bufferPool","_transform","chunk","clearTimeout","sizeOfMessage","getInt32","MongoMissingDependencyError","dependencyName","serverWireVersion","sort","findAndModify","indexKeys","createIndexes","indexes","encrypted","encryptedResponse","toBytes","decryptedResponse","decorateDecryptionResult","CursorResponse","ConnectionPool","PoolState","connect_1","connection_pool_events_1","metrics_1","paused","ready","server","maxPoolSize","minPoolSize","maxConnecting","maxIdleTimeMS","waitQueueTimeoutMS","minPoolSizeCheckFrequencyMS","poolState","connections","List","pending","checkedOut","minPoolSizeTimer","serviceGenerations","connectionCounter","makeCounter","CancellationToken","setMaxListeners","Infinity","waitQueue","metrics","ConnectionPoolMetrics","processingWaitQueue","component","emitAndLog","CONNECTION_POOL_CREATED","ConnectionPoolCreatedEvent","totalConnectionCount","availableConnectionCount","pendingConnectionCount","currentCheckedOutCount","waitQueueSize","checkedOutConnections","waitQueueErrorMetrics","CONNECTION_POOL_READY","ConnectionPoolReadyEvent","ensureMinPoolSize","checkOut","checkoutTime","CONNECTION_CHECK_OUT_STARTED","ConnectionCheckOutStartedEvent","connectionCheckoutTimeout","waitQueueMember","cancelled","processWaitQueue","throwIfExpired","CONNECTION_CHECK_OUT_FAILED","ConnectionCheckOutFailedEvent","WaitQueueTimeoutError","checkIn","poolClosed","stale","connectionIsStale","willDestroy","unshift","CONNECTION_CHECKED_IN","ConnectionCheckedInEvent","destroyConnection","sid","toHexString","CONNECTION_POOL_CLEARED","ConnectionPoolClearedEvent","interruptInUseConnections","oldGeneration","alreadyPaused","clearMinPoolSizeTimer","minGeneration","PoolClearedOnNetworkError","closeCheckedOutConnections","MongoClientClosedError","return","CONNECTION_CLOSED","ConnectionClosedEvent","CONNECTION_POOL_CLOSED","ConnectionPoolClosedEvent","connectionIsIdle","destroyConnectionIfPerished","isStale","isIdle","connectOptions","connectionCreatedTime","CONNECTION_CREATED","ConnectionCreatedEvent","PoolClosedError","PoolClearedError","APM_EVENTS","pinType","markPinned","markUnpinned","CONNECTION_READY","ConnectionReadyEvent","handleError","connectionGeneration","prune","shift","CONNECTION_CHECKED_OUT","ConnectionCheckedOutEvent","ConnectionPoolMonitoringEvent","pool","connectionCreatedEventTime","durationMS","PoolRequstedRetry","dockerPromise","LimitedSizeDocument","makeClientMetadata","metadataDocument","appName","ifItFitsItSits","driverInfo","NODE_DRIVER_VERSION","additionalDriverInfo","runtimeInfo","getRuntimeInfo","Deno","deno","os","endianness","Bun","osInfo","arch","release","faasEnv","getFAASEnv","addContainerMetadata","i8","maxSize","documentSize","newElementSize","getContainerMetadata","containerMetadata","fileIsAccessible","isDocker","KUBERNETES_SERVICE_HOST","isKubernetes","runtime","orchestrator","originalMetadata","extendedEnvMetadata","container","AWS_EXECUTION_ENV","AWS_LAMBDA_RUNTIME_API","FUNCTIONS_WORKER_RUNTIME","K_SERVICE","FUNCTION_NAME","VERCEL","AWS_LAMBDA_FUNCTION_MEMORY_SIZE","FUNCTION_MEMORY_MB","FUNCTION_REGION","FUNCTION_TIMEOUT_SEC","VERCEL_REGION","isAWSFaaS","isAzureFaaS","isGCPFaaS","isVercelFaaS","txnConnections","cursorConnections","otherConnections","TXN","CURSOR","reset","OTHER","server_description_1","RESPONSE_FIELDS","Unknown","maxMessageSizeBytes","parseServerType","parseServerConnectionID","isLong","toBigInt","BigInt","zstd","decompress","compressCommand","util_1","zlib","snappy","zlibInflate","promisify","inflate","zlibDeflate","deflate","Snappy","loadSnappy","snappyImport","getSnappy","dataToBeCompressed","zlibOptions","loadZstd","compressorID","compressedData","MongoDecompressionError","uncompress","asBuffer","getZstdLibrary","messageHeader","ResponseType","messageBody","compressedBuffer","OP_DELETE","OP_INSERT","OP_UPDATE","OP_REPLY","MIN_SUPPORTED_QE_SERVER_VERSION","MIN_SUPPORTED_QE_WIRE_VERSION","emitter","unconsumedEvents","unconsumedPromises","finished","closeHandler","errorHandler","eventHandler","timeoutForSocketRead","doneResult","OnDemandDocument","BSONElementOffset","nameOffset","nameLength","elements","indexFound","isElementName","element","nameEnd","byteIndex","charIndex","getElement","cachedElement","toJSValue","as","null","double","int","long","bool","objectId","binData","totalBinarySize","subType","subType2BinarySize","required","getNumber","maybeBool","maybeLong","allowObjectSmallerThanBufferSize","ClientBulkWriteCursorResponse","ExplainedCursorResponse","isErrorResponse","document_1","eIdx","valueOffset","valueLength","isError","recoveryToken","validation","atClusterTime","operationTime","$err","clusterTimeDoc","exactBSONOptions","Uint8Array","_batch","iterated","_encryptedBatch","emptyGetMore","nextBatch","fromBigInt","encryptedBatch","postBatchResumeToken","encryptedResult","isExplain","_length","primary","topologyOrServer","Mongos","topology_description_1","TopologyDescription","servers","ordered_1","unordered_1","change_stream_1","aggregation_cursor_1","find_cursor_1","list_indexes_cursor_1","list_search_indexes_cursor_1","bulk_write_1","count_1","distinct_1","drop_1","estimated_document_count_1","find_and_modify_1","indexes_1","is_capped_1","options_operation_1","rename_1","create_1","drop_2","update_2","read_concern_1","pkFactory","DEFAULT_PK_FACTORY","ReadConcern","fullNamespace","collectionHint","normalizeHintField","InsertOneOperation","insertMany","docs","InsertManyOperation","BulkWriteOperation","UpdateOneOperation","ReplaceOneOperation","UpdateManyOperation","DeleteOneOperation","DeleteManyOperation","rename","newName","RenameOperation","PRIMARY","drop","DropCollectionOperation","FindCursor","OptionsOperation","isCapped","IsCappedOperation","createIndex","indexSpec","CreateIndexesOperation","fromIndexSpecification","indexSpecs","fromIndexDescriptionArray","maxTimeMS","dropIndex","indexName","DropIndexOperation","dropIndexes","listIndexes","ListIndexesCursor","indexExists","indexNames","allIndexes","indexInformation","full","estimatedDocumentCount","EstimatedDocumentCountOperation","countDocuments","$match","skip","$skip","$limit","$group","$sum","aggregate","distinct","DistinctOperation","findOneAndDelete","FindOneAndDeleteOperation","findOneAndReplace","FindOneAndReplaceOperation","FindOneAndUpdateOperation","AggregationCursor","watch","initializeUnorderedBulkOp","initializeOrderedBulkOp","CountOperation","listSearchIndexes","indexNameOrOptions","ListSearchIndexesCursor","createSearchIndex","createSearchIndexes","descriptions","CreateSearchIndexesOperation","dropSearchIndex","DropSearchIndexOperation","updateSearchIndex","definition","UpdateSearchIndexOperation","DEFAULT_OPTIONS","OPTIONS","resolveSRVRecord","parseOptions","mongoClient","mongodb_connection_string_url_1","mongoOptions","urlOptions","isReadPreferenceTags","objectOptions","uriMechanismProperties","allProvidedOptions","allProvidedKeys","objectOptionValue","urlValues","getBoolean","checkTLSOptions","allOptions","check","unsupportedOptions","setDifference","optionWord","isOrAre","descriptor","deprecated","deprecatedMsg","emitWarning","setOption","isGssapi","isX509","isAws","isOidc","validateLoadBalancedOptions","autoEncryption","encrypter_1","Encrypter","checkForMongoCrypt","encrypter","userSpecifiedAuthSource","userSpecifiedReplicaSet","srvHost","srvMaxHosts","replicaSet","noUserSpecifiedTLS","noUserSpecifiedSSL","mongoLoggerOptions","MongoLogger","MONGODB_LOG_COMMAND","MONGODB_LOG_TOPOLOGY","MONGODB_LOG_SERVER_SELECTION","MONGODB_LOG_CONNECTION","MONGODB_LOG_CLIENT","MONGODB_LOG_ALL","MONGODB_LOG_MAX_DOCUMENT_LENGTH","MONGODB_LOG_PATH","mongodbLogPath","mongodbLogComponentSeverities","mongodbLogMaxDocumentLength","metadata","client_metadata_1","url_1","monitor_1","VALID_TXT_RECORDS","retryDNSTimeoutFor","lookupAddress","firstDNSError","TIMEOUT","resolveSrv","resolveTxt","record","txtResolutionPromise","srvServiceName","addresses","checkParentDomainMatch","hostAddresses","txtRecordOptions","URLSearchParams","txtRecordOptionKeys","getIntFromOptions","parsedInt","parseInteger","getUIntFromOptions","parsedValue","entriesFromString","keyValue","isSrv","isRecord","transformValue","authMechanism","mechanisms","authMechanismProperties","optionValue","authSource","serverApiToValidate","versionToValidate","ServerApiVersion","compressionList","compVal","compValArray","fsync","wc","heartbeatFrequencyMS","journal","localThresholdMS","maxStalenessSeconds","minInternalBufferSize","minHeartbeatFrequencyMS","createPk","readConcernLevel","rp","rpOpts","hedge","tags","readPreferenceTags","readPreferenceTag","retryReads","serverMonitoringMode","ServerMonitoringMode","ssl","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCRLFile","tlsInsecure","checkServerIdentity","rejectUnauthorized","wtimeout","wtimeoutMS","srvPoller","allowPartialTrustChain","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","requestOCSP","localAddress","localPort","hints","ciphers","crl","ecdhCurve","pfx","secureProtocol","useNewUrlParser","useUnifiedTopology","__skipPingOnConnect","SERVER_HEARTBEAT_FAILED","SERVER_HEARTBEAT_SUCCEEDED","SERVER_HEARTBEAT_STARTED","WAITING_FOR_SUITABLE_SERVER","SERVER_SELECTION_SUCCEEDED","SERVER_SELECTION_FAILED","SERVER_SELECTION_STARTED","TOPOLOGY_DESCRIPTION_CHANGED","TOPOLOGY_CLOSED","TOPOLOGY_OPENING","SERVER_DESCRIPTION_CHANGED","SERVER_CLOSED","SERVER_OPENING","DESCRIPTION_RECEIVED","MESSAGE","ENDED","CLOSED","CONNECT","OPEN","SYSTEM_JS_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_NAMESPACE_COLLECTION","kDecoratedKeys","MONGO_CLIENT_EVENTS","LOCAL_SERVER_EVENTS","SERVER_RELAY_EVENTS","TOPOLOGY_EVENTS","CMAP_EVENTS","HEARTBEAT_EVENTS","AbstractCursor","CursorTimeoutMode","CURSOR_FLAGS","get_more_1","kill_cursors_1","removeActiveCursor","activeCursors","ITERATION","LIFETIME","hasEmittedClose","isMongoClient","cursorClient","cursorNamespace","initialized","isKilled","cursorOptions","timeoutMode","maxAwaitTimeMS","omitMaxTimeMS","comment","cursorSession","deserializationOptions","trackCursor","isDead","isZero","selectedServer","clientSession","killed","listeners","bufferedCount","readBufferedDocuments","number","bufferedDocs","documentsToRead","ReadableCursorStream","transformedStream","objectMode","highWaterMark","transformed","ZERO","fetchBatch","MongoCursorExhaustedError","transformDocument","addCursorFlag","flag","throwIfInitialized","oldTransform","withReadPreference","withReadConcern","resolvedReadConcern","MongoTailableCursorError","rewind","owner","hasEnded","endSession","getMore","getMoreOptions","getMoreOperation","GetMoreOperation","cursorInit","startSession","_initialize","cleanupError","timeoutContextForKillCursors","refreshed","withEmitClose","emitClose","KillCursorsOperation","inTransaction","maybeClearPinnedConnection","transformedDocument","transformError","closeError","MongoCursorInUseError","Readable","autoDestroy","_readInProgress","_cursor","_read","_readNext","_destroy","destroyed","serverSelectionTimeout","clearServerSelectionTimeout","explain_1","aggregate_1","ExplainableCursor","aggregateOptions","lastStage","$merge","$out","clonedOptions","mergeOptions","explain","validateExplainTimeoutOptions","Explain","aggregateOperation","AggregateOperation","verbosity","resolveExplainTimeoutOptions","addStage","stage","group","project","$project","$lookup","$redact","$sort","unwind","$unwind","geoNear","$geoNear","changeStreamCursorOptions","_resumeToken","startAfter","resumeAfter","hasReceived","_processBatch","ClientBulkWriteCursor","client_bulk_write_1","commandBuilder","MongoDBNamespace","clientBulkWriteOptions","cursorResponse","lastOperations","clientBulkWriteOperation","ClientBulkWriteOperation","FLAGS","find_1","sort_1","numReturned","cursorFilter","findOptions","formatSort","findOperation","FindOperation","emitWarningOnce","returnKey","showRecordId","addQueryModifier","direction","allowDiskUse","allow","ListCollectionsCursor","list_collections_1","ListCollectionsOperation","ListIndexesOperation","$listSearchIndexes","RunCommandCursor","setComment","setMaxTimeMS","setBatchSize","__","RunCommandOperation","_batchSize","admin_1","CONSTANTS","list_collections_cursor_1","run_command_cursor_1","collections_1","create_collection_1","profiling_level_1","set_profiling_level_1","stats_1","DB_OPTIONS_ALLOW_LIST","preference","CreateCollectionOperation","admin","stats","DbStatsOperation","renameCollection","fromCollection","toCollection","new_collection","dropCollection","dropDatabase","DropDatabaseOperation","collections","CollectionsOperation","setProfilingLevel","SetProfilingLevelOperation","profilingLevel","ProfilingLevelOperation","runCursorCommand","kerberos","makeErrorModule","ZStandard","mongodbClientEncryption","loadAws4","auto_encrypter_1","internalClient","needsConnecting","getInternalClient","getOwnPropertySymbols","listener","connectInternalClient","autoEncrypterError","serverType","isRetryableWriteError","hasErrorLabel","RETRYABLE_WRITE_ERROR_CODES","LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE","NODE_IS_RECOVERING_ERROR_MESSAGE","RETRYABLE_READ_ERROR_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","SDAM_NOT_PRIMARY_CODES","wireVersion","CursorNotFound","ResumableChangeStreamError","GET_MORE_RESUMABLE_CODES","HostUnreachable","HostNotFound","NetworkTimeout","ShutdownInProgress","PrimarySteppedDown","ExceededTimeLimit","SocketException","NotWritablePrimary","InterruptedAtShutdown","InterruptedDueToReplStateChange","NotPrimaryNoSecondaryOk","NotPrimaryOrSecondary","StaleShardVersion","StaleEpoch","StaleConfig","RetryChangeStream","FailedToSatisfyReadPreference","LegacyNotPrimary","NamespaceNotFound","IllegalOperation","UnknownReplWriteConcern","UnsatisfiableWriteConcern","Reauthenticate","ReadConcernMajorityNotAvailableYet","TransientTransactionError","UnknownTransactionCommitResult","ResetPool","InterruptInUseConnections","NoWritesPerformed","errorLabels","errorLabelSet","errors","label","errorResponse","MongoStalePrimaryError","MongoNotConnectedError","MongoTransactionError","MongoExpiredSessionError","MongoKerberosError","MongoClientBulkWriteError","MongoClientBulkWriteCursorError","MongoClientBulkWriteExecutionError","MongoGridFSStreamError","MongoGridFSChunkError","MongoServerClosedError","MongoTopologyClosedError","MongoSystemError","MongoServerSelectionError","SDAM_RECOVERING_CODES","LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE","ExplainVerbosity","decorateWithExplain","baseCommand","queryPlanner","queryPlannerExtended","executionStats","allPlansExecution","GridFSBucketReadStream","files","bytesToTrim","bytesToSkip","bytesRead","expected","expectedEnd","waitForFile","file","findOneOptions","identifier","handleStartOption","chunkSize","files_id","$gte","ceil","handleEndOption","FILE","bytesRemaining","expectedN","expectedLength","sliceStart","sliceEnd","atEndOfStream","bytesLeftToRead","GridFSBucket","download_1","upload_1","DEFAULT_GRIDFS_BUCKET_OPTIONS","bucketName","chunkSizeBytes","privateOptions","_chunksCollection","_filesCollection","checkedIndexes","calledOpenUploadStream","openUploadStream","GridFSBucketWriteStream","openUploadStreamWithId","openDownloadStream","openDownloadStreamByName","uploadDate","revision","INDEX","Writable","bucket","gridFSFile","bufToStore","streamEnd","outstandingRequests","errored","aborted","_construct","checkIndexes","_write","doWrite","isAborted","inputBuf","inputBufRemaining","spaceRemaining","numToCopy","inputBufPos","createChunkDoc","checkDone","_final","writeRemnant","remnant","filesId","checkChunksIndex","background","unique","createFilesDoc","contentType","aliases","listIndexesOptions","TopologyType","ReadPreferenceMode","ReadConcernLevel","ProfilingLevel","ReturnDocument","AutoEncryptionLoggerLevel","ClientSession","configureExplicitResourceManagement","MongoClientAuthProviders","SrvPollingEvent","WaitingForSuitableServerEvent","ServerSelectionSucceededEvent","ServerSelectionStartedEvent","ServerSelectionFailedEvent","ServerSelectionEvent","TopologyOpeningEvent","TopologyDescriptionChangedEvent","TopologyClosedEvent","ServerOpeningEvent","ServerHeartbeatSucceededEvent","ServerHeartbeatStartedEvent","ServerHeartbeatFailedEvent","ServerDescriptionChangedEvent","ServerClosedEvent","gridfs_1","common_2","abstract_cursor_2","error_2","explain_2","mongo_client_2","common_3","read_concern_2","read_preference_2","events_1","server_selection_events_1","srv_polling_1","mongo_client_auth_providers_1","fs_1","connection_string_1","executor_1","server_selection_1","topology_1","v1","shouldSetLogger","componentSeverities","OFF","hasBeenClosed","sessionPool","ServerSessionPool","activeSessions","checkForNonGenuineHosts","appendMetadata","documentDBHostnames","isHostMatch","DOCUMENT_DB_CHECK","srvHostIsDocumentDB","cosmosDBHostnames","COSMOS_DB_CHECK","srvHostIsCosmosDB","DOCUMENT_DB_MSG","COSMOS_DB_MSG","models","ClientBulkWriteExecutor","connectionLock","_connect","isConnected","contents","allowedHosts","hostMatchesWildcards","toHostPort","Topology","topologyConnect","_force","closeLock","_close","activeCursorCloses","activeSessionEnds","readPreferenceServerSelector","topologyDescription","serverDescriptions","endSessions","sessions","withSession","optionsOrExecutor","withSessionCallback","mongodb_aws_1","human_callback_workflow_1","plain_1","scram_1","x509_1","AUTH_PROVIDERS","AWS_CREDENTIAL_PROVIDER","properties","getWorkflow","environment","existingProviders","authProvider","providerFunction","SEVERITY_LEVEL_MAP","DEFAULT_MAX_DOCUMENT_LENGTH","parseSeverityFromString","createStdioLogger","stringifyWithMaxLen","defaultLogTransform","EMERGENCY","ALERT","CRITICAL","WARNING","NOTICE","INFORMATIONAL","TRACE","SeverityLevelMap","newEntries","getNumericSeverityLevel","severity","getSeverityLevelName","validSeverities","lowerSeverity","log","logLine","inspect","compact","breakLength","resolveSeverityConfiguration","clientOption","environmentOption","defaultSeverity","maxDocumentLength","strToTruncate","currentLength","isUint8Array","_bsontype","position","scope","pattern","attachServerSelectionFields","serverSelectionEvent","attachCommandFields","commandEvent","driverConnectionId","serverHost","serverPort","attachConnectionFields","attachSDAMFields","sdamEvent","topologyId","attachServerHeartbeatFields","serverHeartbeatEvent","awaited","logObject","relaxed","previousDescription","newDescription","TOPOLOGY","SERVER_SELECTION","CONNECTION","CLIENT","pendingLog","warn","logDestination","logDestinationIsStdErr","severities","createLoggingSeverities","severityLevel","compareSeverity","s0","s1","s0Num","s1Num","turnOffSeverities","logWriteFailureHandler","clearPendingLog","stderr","toLog","logMessage","objAsLogConvertible","isPromiseLike","logResult","envOptions","resolvedLogPath","resolveLogPath","mongodbLogPathIsStdErr","stdout","combinedOptions","serverSelection","parseUnsignedInteger","EventEmitter","emitAndLogHeartbeat","loggableHeartbeatEvent","connectionEstablished","loggableCommandEvent","DB_AGGREGATE_COLLECTION","command_1","CommandOperation","hasWriteStage","finalStage","trySecondaryWrite","canRetryRead","addToPipeline","let","executeCommand","defineAspects","Aspect","READ_OPERATION","RETRYABLE","EXPLAINABLE","CURSOR_CREATING","coll","bulk","WRITE_OPERATION","beta_1","resetBatch","canRetryWrite","isBatchRetryable","LoadBalancer","pinnedConnection","pin","buildBatch","willRetryWrite","SKIP_COLLATION","COMMAND_BATCHING","buildReplaceOneOperation","buildUpdateManyOperation","buildUpdateOneOperation","buildDeleteManyOperation","buildDeleteOneOperation","buildInsertOneOperation","ClientBulkWriteCommandBuilder","buildOperation","currentModelIndex","previousModelIndex","errorsOnly","verboseResults","hasNextBatch","commandLength","currentNamespaceIndex","namespaces","model","nsIndex","operationBuffer","validateBufferSize","MESSAGE_OVERHEAD_BYTES","nsInfoBuffer","createDeleteOperation","createUpdateOperation","validateUpdate","updateMods","client_bulk_write_cursor_1","command_builder_1","results_merger_1","resolvedOptions","ClientBulkWriteResultsMerger","unacknowledged","resultsMerger","cursorContext","bulkWriteError","partialResult","__1","UNACKNOWLEDGED","acknowledged","insertResults","updateResults","deleteResults","currentBatchOffset","writeConcernErrorResult","processDocument","idx","nDeleted","firstBatch","incrementCounts","didUpsert","upsertedId","dbNameOverride","authdb","withCollection","hasAspect","commandSupportsReadConcern","MIN_SECONDARY_WRITE_WIRE_VERSION","omitReadPreference","ILLEGAL_COMMAND_FIELDS","escCollection","ecocCollection","createOp","clusteredIndex","executeWithoutEncryptedFieldsCheck","createIndexOp","__safeContent__","statements","deletes","unacknowledgedWrite","q","decorateWithReadConcern","decorateWithCollation","listCollectionsResult","dropOp","MMAPv1_RETRY_WRITES_ERROR_CODE","MMAPv1_RETRY_WRITES_ERROR_MESSAGE","abortable","autoConnect","snapshotEnabled","capabilities","supportsSnapshotReads","hasReadAspect","isPinned","transaction","isCommitted","bypassPinningCheck","unpin","tryOperation","previousOperationError","previousServer","MUST_SELECT_SAME_SERVER","sameServerSelector","secondaryWritableServerSelector","commonWireVersion","hasWriteAspect","willRetryRead","supportsRetryableWrites","willRetry","incrementTransactionNumber","maxTries","tries","originalError","isRetryableReadError","force","forceClear","operationError","findCommand","makeFindCommand","reduce","singleBatch","abs","allowPartialResults","FindAndModifyOperation","configureFindAndModifyCmdBaseUpdateOpts","cmdBase","new","AFTER","BEFORE","remove","includeResultMetadata","_session","getMoreCmd","VALID_INDEX_OPTIONS","userIndex","flat","validProvidedOptions","optionName","constructIndexDescriptionMap","spec","commitQuorum","collectionNamespace","bulkWriteOperation","capped","killCursors","killCursorsCommand","cursors","authorizedCollections","generateCommand","authorizedDatabases","aspects","aspect","ctor","clearSession","profile","was","dropUser","dropTarget","to","indexesCreated","levelValues","slowOnly","enumToString","dbStats","scale","local","majority","linearizable","available","snapshot","MAJORITY","AVAILABLE","LINEARIZABLE","SNAPSHOT","secondary","secondaryPreferred","nearest","translate","VALID_MODES","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","NEEDS_SECONDARYOK","STATE_CONNECTED","STATE_CONNECTING","STATE_CLOSED","STATE_CLOSING","_advanceClusterTime","entity","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","LoadBalanced","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","RTTSampler","MonitorInterval","RTTPinger","Monitor","server_1","STATE_IDLE","STATE_MONITORING","stateTransition","makeStateMachine","INVALID_REQUEST_CHECK_STATES","isInCloseState","monitor","auto","poll","monitorId","isRunningInFaasEnv","rttSampler","monitorServer","immediate","requestCheck","wake","topologyVersion","resetMonitorState","roundTripTime","average","latestRtt","addRttSample","rtt","addSample","clearRttSamples","rttPinger","useStreamingProtocol","checkServer","isAwaitable","onHeartbeatFailed","Server","onHeartbeatSucceeded","processId","tv","counter","fromNumber","measureRoundTripTime","measureAndReschedule","isExpeditedCallToFnScheduled","stopped","isExecutionInProgress","hasExecutedOnce","_executeAndReschedule","timerId","lastExecutionEnded","_reschedule","timeSinceLastCall","currentTime","lastCallTime","isExpeditedCheckScheduled","windowSize","rttSamples","Float64Array","writeIndex","sample","sum","connection_pool_1","transactions_1","poolOptions","operationCount","markServerUnknown","ServerDescription","iscryptd","incrementOperationCount","checkoutError","decrementOperationCount","reauthPromise","throwIfWriteConcernError","commandError","decorateCommandError","checkBackIn","isNetworkNonTimeoutError","isNetworkTimeoutBeforeHandshakeError","isAuthHandshakeError","isSDAMUnrecoverableError","shouldHandleStateChangeError","etv","stv","compareTopologyVersion","shouldClearPool","isNodeShuttingDownError","serverSession","isDirty","inActiveTransaction","isRetryableWritesEnabled","isTransactionCommand","WRITABLE_SERVER_TYPES","DATA_BEARING_SERVER_TYPES","passives","arbiters","lastUpdateTime","lastWriteDate","lastWrite","stack","setName","setVersion","electionId","me","allHosts","isReadable","isWritable","isDataBearing","chopLength","topologyVersionsEqual","electionIdsEqual","compareObjectId","errorStrictEqual","arrayStrictEqual","tagsStrictEqual","tags2","tagsKeys","tags2Keys","isreplicaset","hidden","currentTv","newTv","currentCounter","newCounter","writableServerSelector","latencyWindowReducer","sd","low","high","primaryFilter","secondaryFilter","nearestFilter","knownFilter","loadBalancerFilter","deprioritized","filtered","selectable","selectedServers","tagSetReducer","tagSet","serversMatchingTagset","matched","tagSetMatch","serverTags","serverTagKeys","maxStalenessReducer","maxStaleness","maxStalenessVariance","sMax","SrvPoller","srvRecords","hostnames","fromSrvRecord","rescanSrvIntervalMS","haMode","_timeout","srvAddress","intervalMS","schedule","_poll","success","SRV_RECORD_DISCOVERY","finalAddresses","ServerCapabilities","globalTopologyCounter","seeds","seedlist","seed","topologyType","topologyTypeFromOptions","selectedHosts","shuffle","detectShardedTopology","ev","detectSrvRecords","previousType","newType","transitionToSharded","srvListeners","listeningToSrvPolling","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","serverDescription","createAndConnectServer","serverUpdateHandler","selectServerOptions","closeServer","drainWaitQueue","serverSelector","serverPromise","waitingLogged","hasServer","isStaleServerDescription","incomingServerDescription","currentServerDescription","currentTopologyVersion","previousServerDescription","equalDescriptions","compatibilityError","isDestroyed","newTopologyType","serverAddress","queue","drainError","membersToProcess","selectedDescriptions","selectorError","server1","server2","serverSelectionError","isActive","pinServer","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","commandsTakeWriteConcern","commandsTakeCollation","WIRE_CONSTANTS","MONGOS_OR_UNKNOWN","MONGOS_OR_STANDALONE","NON_PRIMARY_RS_MEMBERS","maxSetVersion","maxElectionId","compatible","incomingHostnames","currentHostnames","hostnamesToAdd","hostnamesToRemove","removedHost","hostToAdd","selectedHostToAdd","topologyTypeForServerType","updateRsFromPrimary","updateRsNoPrimaryFromMember","checkHasPrimary","updateRsWithPrimaryFromMember","descriptionsWithError","hasKnownServers","hasDataBearingServers","setVersionElectionIdMismatch","electionIdComparison","maxSetVersionIsLessOrEqual","maxElectionIdIsLess","maxElectionIdIsEqual","currentAddresses","responseAddresses","addr","ServerSession","lastUse","lsid","inTxnOrTxnCommand","isRetryableWrite","txnNumber","txnNumberIncrement","TxnState","NO_TRANSACTION","transition","supports","causalConsistency","afterClusterTime","snapshotTime","autocommit","STARTING_TRANSACTION","TRANSACTION_IN_PROGRESS","startTransaction","advanceOperationTime","_recoveryToken","defaultTimeoutMS","_serverSession","acquire","defaultCausalConsistencyValue","initialClusterTime","defaultTransactionOptions","Transaction","TypeError","unpinServer","abortTransaction","throwTimeout","advanceClusterTime","topologyMaxWireVersion","commitAttempted","maxCommitTimeMS","commitTransaction","TRANSACTION_COMMITTED_EMPTY","TRANSACTION_ABORTED","wcKeys","TRANSACTION_COMMITTED","firstCommitError","retryCommitError","shouldAddUnknownTransactionCommitResultLabel","shouldUnpinAfterCommitError","firstAbortError","secondAbortError","toBSON","withTransaction","committed","fnError","commitError","isMaxTimeMSExpiredError","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","isUnknownTransactionCommitResult","isNonDeterministicWriteConcernError","codeName","loadBalancer","cloned","idBytes","sub_type","SUBTYPE_UUID","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","round","potentialSession","prepareDirection","isPair","$meta","LegacyTimeoutContext","remainingTime","timedOut","trunc","timeElapsed","promiseReject","ended","cleared","timePassed","_serverSelectionTimeout","csotMin","isFinite","_connectionCheckoutTimeout","_command","_options","ACTIVE_STATES","COMMITTED_STATES","_pinnedServer","isStarting","nextState","nextStates","MONGODB_WARNING_CODE","toStringTag","wildcards","wildcard","finalHint","names","newCount","arr2","elt","stateTable","newState","legalStates","elapsed","allUndefined","isConvenientTransaction","isSuperset","isHello","setA","setB","elem","requiredKeys","HAS_OWN","emittedWarnings","en","sequence","items","remainingItemsToShuffle","lowerBound","randomIndex","swapHold","oid1","oid2","normalizedAddress","normalizedSrvHost","allCharacterBeforeFirstDot","srvIsLessThanThreeParts","addressDomain","srvHostDomain","timeoutId","http","setEncoding","statusCode","_error","docOrDocs","duration1","duration2","decrypted","isTopLevelDecorateCall","originalValue","toLocalBufferType","byteOffset","seqA","seqB","uint8array","TO_STRING","collectionParts","hrtime","subset","head","prev","node","nodes","newNode","pushMany","iterable","prevNode","nextNode","totalByteLength","firstBuffer","top4Bytes","bytesReadable","hostString","isIPv6","escapedHost","urlString","urlError","runtimeError","normalized","requestOptions","promiseResolve","ee","onEvent","fileName","access","addEventListener","removeEventListener","dispose","WRITE_CONCERN_KEYS","inherit","plural","msAbs","isPlural","exec","parseFloat","_global_process","_global_process1","__defProp","__getOwnPropDesc","__getOwnPropNames","__hasOwnProp","src_exports","attrs","toUTCString","partitioned","priority","stringified","encodeURIComponent","parseCookie","pair","splitAt","parseSetCookie","setCookie","httponly","maxage","samesite","value2","newT","SAME_SITE","PRIORITY","__export","__copyProps","except","_parsed","_headers","getSetCookie","cookieString","normalizeCookie","bag","serialized","ContextAPI","NoopContextManager","getInstance","_instance","setGlobalContextManager","registerGlobal","DiagAPI","_getContextManager","getGlobal","unregisterGlobal","_logProxy","setLogger","logLevel","DiagLogLevel","INFO","createLogLevelDiagLogger","suppressOverrideMessage","createComponentLogger","DiagComponentLogger","verbose","MetricsAPI","setGlobalMeterProvider","getMeterProvider","NOOP_METER_PROVIDER","getMeter","PropagationAPI","NoopTextMapPropagator","createBaggage","getBaggage","getActiveBaggage","setBaggage","deleteBaggage","setGlobalPropagator","inject","defaultTextMapSetter","_getGlobalPropagator","defaultTextMapGetter","TraceAPI","_proxyTracerProvider","ProxyTracerProvider","wrapSpanContext","isSpanContextValid","deleteSpan","getActiveSpan","setSpanContext","setGlobalTracerProvider","setDelegate","getTracerProvider","deleteValue","BaggageImpl","_entries","getEntry","getAllEntries","setEntry","removeEntry","removeEntries","baggageEntryMetadataSymbol","baggageEntryMetadataFromString","__TYPE__","BaseContext","_currentContext","diag","_namespace","logProxy","DiagConsoleLogger","_consoleFunc","_filterFunc","NONE","ALL","WARN","VERBOSE","VERSION","_globalThis","isCompatible","_makeCompatibilityCheck","major","patch","prerelease","_reject","ValueType","createNoopMeter","NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC","NOOP_OBSERVABLE_GAUGE_METRIC","NOOP_OBSERVABLE_COUNTER_METRIC","NOOP_UP_DOWN_COUNTER_METRIC","NOOP_HISTOGRAM_METRIC","NOOP_COUNTER_METRIC","NOOP_METER","NoopObservableUpDownCounterMetric","NoopObservableGaugeMetric","NoopObservableCounterMetric","NoopObservableMetric","NoopHistogramMetric","NoopUpDownCounterMetric","NoopCounterMetric","NoopMetric","NoopMeter","createHistogram","createCounter","createUpDownCounter","createObservableGauge","createObservableCounter","createObservableUpDownCounter","addBatchObservableCallback","removeBatchObservableCallback","addCallback","removeCallback","NoopMeterProvider","NonRecordingSpan","INVALID_SPAN_CONTEXT","_spanContext","setAttributes","addEvent","updateName","isRecording","NoopTracer","root","NoopTracerProvider","ProxyTracer","_getTracer","_delegate","getDelegateTracer","getDelegate","SamplingDecision","TraceStateImpl","_internalState","_parse","_clone","unset","_keys","reverse","validateKey","validateValue","createTraceState","INVALID_TRACEID","INVALID_SPANID","traceId","traceFlags","TraceFlags","isValidSpanId","isValidTraceId","__nccwpck_require__","ab","__dirname","f","O","N","C","tryDecode","encode","slashes","resolveObject","y","U","toUpperCase","Url","defaultSetTimout","defaultClearTimeout","runTimeout","cleanUpNextTick","drainQueue","runClearTimeout","Item","fun","title","browser","argv","versions","addListener","prependListener","prependOnceListener","binding","cwd","chdir","umask","maxKeys","stringifyPrimitive","T","z","A","R","M","B","V","D","I","F","G","H","L","Z","extend","enumerize","lowerize","rgxMapper","strMapper","X","ME","XP","Vista","RT","K","cpu","device","engine","E","UAParser","getResult","navigator","userAgent","userAgentData","getBrowser","brave","isBrave","getCPU","getDevice","mobile","standalone","maxTouchPoints","getEngine","getOS","getUA","setUA","BROWSER","CPU","DEVICE","ENGINE","OS","amdO","Q","jQuery","Zepto","Y","window","_export","getTestReqInfo","withRequest","testStorage","_nodeasync_hooks","extractTestInfoFromRequest","reader","proxyPortHeader","testData","testReqInfo","handleFetch","interceptFetch","_context","buildProxyRequest","getTestStack","arrayBuffer","originalFetch","testInfo","proxyRequest","resp","internal","proxyResponse","buildResponse","fetch","_init_next","_fetch","regexPunycode","regexNonASCII","regexSeparators","mapDomain","ucs2decode","extra","ucs2encode","digitToBasic","digit","adapt","delta","numPoints","firstTime","baseMinusTMin","bias","basic","lastIndexOf","oldi","codePoint","maxInt","baseMinusT","currentValue","basicLength","handledCPCount","handledCPCountPlusOne","qMinusT","toUnicode","toASCII","__WEBPACK_DEFAULT_EXPORT__","copyProps","SafeBuffer","encodingOrOffset","allocUnsafeSlow","ANY","Comparator","loose","operator","re","COMPARATORLOOSE","COMPARATOR","SemVer","er","cmp","intersects","Range","includePrerelease","safeRe","SPACE_CHARACTERS","range","formatted","parseRange","isNullSet","isAny","comps","memoKey","memoOpts","FLAG_INCLUDE_PRERELEASE","FLAG_LOOSE","cached","hr","HYPHENRANGELOOSE","HYPHENRANGE","hyphenReplace","COMPARATORTRIM","comparatorTrimReplace","TILDETRIM","tildeTrimReplace","CARETTRIM","caretTrimReplace","rangeList","parseComparator","replaceGTE0","rangeMap","isSatisfiable","thisComparators","rangeComparators","thisComparator","rangeComparator","testSet","comparators","remainingComparators","testComparator","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","replaceTilde","TILDELOOSE","TILDE","pr","replaceCaret","CARETLOOSE","CARET","replaceXRange","XRANGELOOSE","XRANGE","gtlt","xM","xm","xp","STAR","GTE0PRE","GTE0","incPr","$0","fM","fm","fp","fpr","fb","tM","tm","tp","tpr","allowed","MAX_LENGTH","MAX_SAFE_INTEGER","compareIdentifiers","LOOSE","FULL","num","build","compareMain","comparePre","compareBuild","inc","identifierBase","PRERELEASELOOSE","PRERELEASE","eq","neq","gt","gte","lt","lte","rtl","coerceRtlRegex","COERCERTLFULL","COERCERTL","lastIndex","COERCEFULL","COERCE","versionA","versionB","version1","version2","v2","comparison","v1Higher","highVersion","lowVersion","highHasPre","lowHasPre","throwErrors","internalRe","identifiers","clean","diff","rcompare","compareLoose","rsort","coerce","toComparators","maxSatisfying","minSatisfying","minVersion","validRange","outside","gtr","ltr","simplifyRange","tokens","SEMVER_SPEC_VERSION","RELEASE_TYPES","rcompareIdentifiers","MAX_SAFE_COMPONENT_LENGTH","MAX_SAFE_BUILD_LENGTH","NODE_DEBUG","numeric","anum","bnum","LRUCache","firstKey","looseOption","emptyOpts","safeSrc","LETTERDASHNUMBER","safeRegexReplacements","makeSafeRegex","createToken","isGlobal","safe","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","BUILD","FULLPLAIN","MAINVERSIONLOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","COERCEPLAIN","LONETILDE","LONECARET","r2","maxSV","rangeObj","minSV","minver","setMin","compver","comparator","hilo","gtfn","ltefn","ltfn","ecomp","ranges","simplified","minimumVersionWithPreRelease","minimumVersion","simpleSubset","dom","gtltComp","higher","hasDomLT","hasDomGT","eqSet","higherGT","lowerLT","needDomLTPre","needDomGTPre","sawNonNull","OUTER","simpleSub","simpleDom","isSub","Bitfield","pageOffset","_trackUpdates","trackUpdates","_pageMask","getByte","setByte","allOffset","punycode","regexes","mappingTable","STATUS_MAPPING","containsNonASCII","findStatus","mid","processing","domainName","mapChars","transitionalProcessing","processed","mapping","disallowed","ignored","mapped","deviation","labels","isBidi","isBidiDomain","bidiDomain","origLabel","transitionalProcessingForThisLabel","ignoreInvalidPunycode","validateLabel","checkHyphens","checkBidi","checkJoiners","useSTD3ASCIIRules","combiningMarks","combiningClassVirama","validZWNJ","bidiS1LTR","bidiS1RTL","bidiS2","bidiS3","bidiS4EN","bidiS4AN","bidiS5","bidiS6","verifyDNSLength","total","makeException","ErrorType","globals","evenRound","censorNegativeZero","integerPart","createIntegerConversion","bitLength","unsigned","upperBound","twoToTheBitLength","twoToOneLessThanTheBitLength","enforceRange","clamp","modulo","signMightNotMatch","createLongLongConversion","MIN_SAFE_INTEGER","asBigIntN","asUintN","asIntN","xBigInt","any","boolean","byte","octet","short","float","fround","DOMString","treatNullAsEmptyString","StringCtor","ByteString","USVString","abByteLengthGetter","ArrayBuffer","sabByteLengthGetter","SharedArrayBuffer","isNonSharedArrayBuffer","isSharedArrayBuffer","isArrayBufferDetached","allowShared","dvByteLengthGetter","DataView","typedArrayNameGetter","Int8Array","Int16Array","Uint8ClampedArray","Float32Array","article","isView","ArrayBufferView","BufferSource","DOMTimeStamp","urlStateMachine","percentEncoding","sharedGlobalObject","basicURLParse","serializeURL","serializePath","serializeHost","serializeInteger","serializeURLOrigin","setTheUsername","setThePassword","cannotHaveAUsernamePasswordPort","hasAnOpaquePath","percentDecodeString","percentDecodeBytes","conversions","utils","convert","globalObject","invokeTheCallbackFunction","callResult","tryWrapperForImpl","wrapperSymbol","objectReference","usm","urlencoded","implementation","URLImpl","parsedBase","parsedURL","_url","_query","createImpl","doNotStripQMark","canParse","_list","parseUrlencodedString","scheme","stateOverride","fragment","implSymbol","ctorRegistrySymbol","makeWrapper","newTarget","Impl","isImpl","implForWrapper","constructorArgs","privateData","wrapper","setup","_internalSetup","exposed","globalNames","globalName","ctorRegistry","initCtorRegistry","curArg","esValue","getSameObject","defineProperties","_updateSteps","serializedQuery","serializeUrlencoded","tuple","found","Function","newObjectInRealm","interfaceName","createDefaultIterator","kind","iterInternalSymbol","nextItem","ownKeys","typedKey","typedValue","pairs","define","iteratorResult","utf8Encoder","TextEncoder","utf8Decoder","TextDecoder","ignoreBOM","utf8Encode","utf8DecodeWithoutBOM","isASCIIDigit","isASCIIAlpha","isASCIIAlphanumeric","isASCIIHex","char","outputIndex","bytePoint","isC0ControlPercentEncode","extraFragmentPercentEncodeSet","extraQueryPercentEncodeSet","isQueryPercentEncode","extraPathPercentEncodeSet","isPathPercentEncode","extraUserinfoPercentEncodeSet","isUserinfoPercentEncode","extraComponentPercentEncodeSet","extraURLEncodedPercentEncodeSet","utf8PercentEncodeCodePointInternal","percentEncodePredicate","percentEncode","hex","isFragmentPercentEncode","isSpecialQueryPercentEncode","isURLEncodedPercentEncode","isComponentPercentEncode","utf8PercentEncodeString","spaceAsPlus","utf8PercentEncodeCodePoint","tr46","infra","specialSchemes","ftp","https","ws","wss","countSymbols","at","isSingleDot","isWindowsDriveLetterString","containsForbiddenHostCodePoint","isSpecialScheme","isSpecial","isNotSpecial","parseIPv4Number","regex","parseHost","isOpaque","parseIPv6","pieceIndex","pointer","numbersSeen","ipv4Piece","swaps","temp","asciiDomain","domainToASCII","beStrict","endsInANumber","parseIPv4","numbers","part","ipv4","serializeIPv4","serializeIPv6","findTheIPv6AddressCompressedPieceIndex","longestIndex","longestSize","foundIndex","foundSize","ignore0","shortenPath","includesCredentials","URLStateMachine","encodingOverride","parseError","trimControlChars","atFlag","arrFlag","passwordTokenSeenFlag","cStr","encodedCodePoints","fileOtherwiseCodePoints","startsWithWindowsDriveLetter","cp1","cp2","segment","remaining","queryPercentEncodePredicate","excludeFragment","pathURL","integer","replaceByteInByteSequence","parseUrlencoded","sequences","strictlySplitByteSequence","indexOfEqual","nameString","valueString","tuples","sameObjectCaches","AsyncIteratorPrototype","eval","wrapperForImpl","impl","byteLengthGetter","supportsPropertyIndex","supportedPropertyIndices","supportsPropertyName","supportedPropertyNames","indexedGet","indexedSetNew","indexedSetExisting","namedGet","namedSetNew","namedSetExisting","namedDelete","asyncIteratorNext","asyncIteratorReturn","asyncIteratorInit","asyncIteratorEOI","getOwnPropertyDescriptors","creator","tryImplForWrapper","isArrayBuffer","isArrayIndexPropName","TextDecoderFatal","TextDecoderNonFatal","wasm","TypedArrayPrototypeGetSymbolToStringTag","isAnyArrayBuffer","isRegExp","regexp","isMap","isDate","defaultInspect","$numberLong","BSON_VERSION_SYMBOL","BSON_INT64_MAX","dbPointer","javascript","symbol","javascriptWithScope","decimal","minKey","maxKey","bsonError","isBSONError","BSONVersionError","BSONRuntimeError","BSONOffsetError","parseUtf8","fatal","tryReadBasicLatin","stringByteLength","latinBytes","nodeJsByteUtils","potentialBuffer","stringTag","allocate","allocateUnsafe","fromNumberArray","fromISO88591","toISO88591","fromHex","toHex","basicLatin","utf8ByteLength","latinBytesWritten","tryWriteBasicLatin","charOffset","destinationOffset","swap32","webMathRandomBytes","webByteUtils","webRandomBytes","getRandomValues","isReactNative","product","HEX_DIGIT","potentialUint8array","atob","btoa","evenLengthHex","firstDigit","secondDigit","hexDigit","padStart","byte0","byte1","byte2","byte3","hasGlobalBuffer","_isBuffer","BSONValue","depth","FLOAT","FLOAT_BYTES","isBigEndian","getNonnegativeInt32LE","getUint32LE","getUint32BE","hi","lo","setInt32BE","setInt32LE","setBigInt64LE","mask32bits","setFloat64LE","BSON_BINARY_SUBTYPE_DEFAULT","BUFFER_SIZE","byteValue","decodedByte","newSpace","toExtendedJSON","SUBTYPE_VECTOR","validateBinaryVector","base64String","legacy","$binary","$type","toUUID","createFromHexString","createFromBase64","fromExtendedJSON","bytesFromString","$uuid","base64Arg","subTypeArg","toInt8Array","VECTOR_TYPE","Int8","toFloat32Array","Float32","floatBytes","toPackedBits","PackedBit","toBits","byteCount","bitOffset","bit","fromInt8Array","intBytes","fromFloat32Array","binaryBytes","fromPackedBits","fromBits","vector","datatype","SUBTYPE_DEFAULT","SUBTYPE_FUNCTION","SUBTYPE_BYTE_ARRAY","SUBTYPE_UUID_OLD","SUBTYPE_MD5","SUBTYPE_ENCRYPTED","SUBTYPE_COLUMN","SUBTYPE_SENSITIVE","SUBTYPE_USER_DEFINED","UUID_WITHOUT_DASHES","UUID_WITH_DASHES","generate","includeDashes","otherId","toBinary","isValidUUIDString","hexString","representation","$code","$scope","parametersString","multiLineFn","endingNewline","isDBRefLike","$id","$ref","oid","removeLeadingZerosAndExplicitPlus","startIndex","isNegative","isExplicitlyPositive","foundInsignificantZero","WebAssembly","Instance","Module","INT_CACHE","UINT_CACHE","DECIMAL_REG_EX","__isLong__","lowOrValue","highOrUnsigned","unsignedBool","lowBits","highBits","fromInt","cachedObj","UZERO","TWO_PWR_32_DBL","MAX_UNSIGNED_VALUE","MIN_VALUE","TWO_PWR_64_DBL","MAX_VALUE","neg","TWO_PWR_16_DBL","FROM_BIGINT_BIT_MASK","FROM_BIGINT_BIT_SHIFT","_fromString","radix","radixToPower","pow","power","mul","fromStringStrict","unsignedOrRadix","validateStringCharacters","validCharacters","cleanedStr","fromBytes","le","fromBytesLE","fromBytesBE","fromValue","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","and","thisNeg","otherNeg","divide","divisor","approx","rem","div_u","div_s","get_high","toUnsigned","shru","UONE","ONE","NEG_ONE","halfThis","shr","div","shl","log2","LN2","approxRes","approxRem","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","greaterThanOrEqual","ge","isEven","isOdd","isPositive","lessThan","lessThanOrEqual","rem_u","rem_s","multiply","multiplier","TWO_PWR_24","negate","not","notEquals","ne","or","shiftLeft","numBits","toInt","shiftRight","shiftRightUnsigned","shr_u","subtract","subtrahend","toBytesLE","toBytesBE","toSigned","radixLong","rem1","remDiv","digits","intval","eqz","longResult","longVal","unsignedVal","PARSE_STRING_REGEXP","PARSE_INF_REGEXP","PARSE_NAN_REGEXP","NAN_BUFFER","INF_NEGATIVE_BUFFER","INF_POSITIVE_BUFFER","EXPONENT_REGEX","isDigit","invalidErr","allowRounding","fromStringWithRounding","sawSign","sawRadix","foundNonZero","significantDigits","nDigitsRead","nDigits","radixPosition","firstNonZero","nDigitsStored","digitsInsert","lastDigit","exponent","significandHigh","significandLow","biasedExponent","stringMatch","infMatch","nanMatch","unsignedNumber","expSign","expNumber","digitsString","endOfString","roundDigit","roundBit","dIdx","significand","multiply64x2","left","leftHigh","leftLow","rightHigh","rightLow","productHigh","productMid","productMid2","productLow","uhleft","uhright","ulleft","dec","biased_exponent","significand_msb","significand_digits","is_zero","significand128","midl","midh","combination","least_digits","divideu128","DIVISOR","_rem","quotient","scientific_exponent","radix_position","$numberDecimal","d128string","coercedValue","NaN","$numberDouble","toFixed","doubleValue","cleanedValue","BSON_INT32_MAX","BSON_INT32_MIN","isSafeInteger","$numberInt","$maxKey","$minKey","PROCESS_UNIQUE","__idCache","WeakMap","inputId","workingId","validateHexString","cacheHexString","__id","getInc","variable","otherIdString","thisIdString","getTimestamp","setTime","serializeInto","createFromTime","$oid","isCached","internalCalculateObjectSize","calculateElement","binary","ordered_values","global","ignoreCase","multiline","$regex","$options","$regularExpression","stylize","getStylizeFunction","$symbol","LongWithoutOverridesClass","$timestamp","optRadix","JS_INT_MAX_LONG","JS_INT_MIN_LONG","internalDeserialize","deserializeObject","validationSetting","utf8KeysSet","globalUTFValidation","utf8ValidatedKeys","utf8ValidationValues","arrayIndex","isPossibleDBRef","elementType","shouldValidateKey","allowedDBRefKeys","stringSize","_index","objectSize","arrayOptions","stopIndex","binarySize","regExpOptions","optionsArray","totalSize","functionString","scopeObject","oidBuffer","ignoreKeys","serializeString","numberOfWrittenBytes","serializeNumber","serializeBigInt","serializeNull","serializeBoolean","serializeDate","dateInMilis","serializeRegExp","serializeBSONRegExp","sortedOptions","serializeMinMax","serializeObjectId","serializeBuffer","serializeObject","endIndex","serializeDecimal128","serializeLong","serializeInt32","serializeDouble","serializeFunction","serializeCode","codeSize","serializeBinary","serializeSymbol","serializeDBRef","startingIndex","keysToCodecs","getISOString","isoStr","toISOString","getUTCMilliseconds","BSON_TYPE_MAPPINGS","low_","high_","unsigned_","ejsonOptions","deserializeValue","in32BitRange","in64BitRange","$undefined","$date","$dbPointer","dollarKeys","space","serializeValue","seenObjects","findIndex","propertyName","leadingPart","alreadySeen","circularPart","current","leadingSpace","repeat","dashes","dateNum","inRange","rx","serializeDocument","bsontype","_doc","outDoc","mapper","ejson","BSONElementType","getSize","findNull","nullTerminatorOffset","startOffset","setInternalBufferSize","serializationIndex","finishedBuffer","serializeWithBufferAndIndex","finalBuffer","deserializeStream","numberOfDocuments","docStartIndex","internalOptions","bufferData","__proto__"],"sourceRoot":""}